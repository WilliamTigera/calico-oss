// Code generated by mockery v2.14.0. DO NOT EDIT.

package client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQueryInterface is an autogenerated mock type for the QueryInterface type
type MockQueryInterface struct {
	mock.Mock
}

// RunQuery provides a mock function with given fields: ctx, req
func (_m *MockQueryInterface) RunQuery(ctx context.Context, req interface{}) (interface{}, error) {
	ret := _m.Called(ctx, req)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockQueryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockQueryInterface creates a new instance of MockQueryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockQueryInterface(t mockConstructorTestingTNewMockQueryInterface) *MockQueryInterface {
	mock := &MockQueryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
