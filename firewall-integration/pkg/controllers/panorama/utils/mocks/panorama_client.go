// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	addr "github.com/PaloAltoNetworks/pango/objs/addr"
	addrgrp "github.com/PaloAltoNetworks/pango/objs/addrgrp"

	dg "github.com/PaloAltoNetworks/pango/pnrm/dg"

	mock "github.com/stretchr/testify/mock"

	pango "github.com/PaloAltoNetworks/pango"

	security "github.com/PaloAltoNetworks/pango/poli/security"

	srvc "github.com/PaloAltoNetworks/pango/objs/srvc"

	util "github.com/projectcalico/calico/firewall-integration/pkg/util"
)

// MockPanoramaClient is an autogenerated mock type for the PanoramaClient type
type MockPanoramaClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: url, response
func (_m *MockPanoramaClient) Get(url string, response *util.PredefinedSecurityRulesResponse) ([]byte, error) {
	ret := _m.Called(url, response)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, *util.PredefinedSecurityRulesResponse) []byte); ok {
		r0 = rf(url, response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *util.PredefinedSecurityRulesResponse) error); ok {
		r1 = rf(url, response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressEntries provides a mock function with given fields: _a0
func (_m *MockPanoramaClient) GetAddressEntries(_a0 string) ([]addr.Entry, error) {
	ret := _m.Called(_a0)

	var r0 []addr.Entry
	if rf, ok := ret.Get(0).(func(string) []addr.Entry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]addr.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressGroupEntries provides a mock function with given fields: _a0
func (_m *MockPanoramaClient) GetAddressGroupEntries(_a0 string) ([]addrgrp.Entry, error) {
	ret := _m.Called(_a0)

	var r0 []addrgrp.Entry
	if rf, ok := ret.Get(0).(func(string) []addrgrp.Entry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]addrgrp.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressGroups provides a mock function with given fields: _a0
func (_m *MockPanoramaClient) GetAddressGroups(_a0 string) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields:
func (_m *MockPanoramaClient) GetClient() *pango.Panorama {
	ret := _m.Called()

	var r0 *pango.Panorama
	if rf, ok := ret.Get(0).(func() *pango.Panorama); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pango.Panorama)
		}
	}

	return r0
}

// GetDeviceGroupEntry provides a mock function with given fields: _a0
func (_m *MockPanoramaClient) GetDeviceGroupEntry(_a0 string) (dg.Entry, error) {
	ret := _m.Called(_a0)

	var r0 dg.Entry
	if rf, ok := ret.Get(0).(func(string) dg.Entry); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dg.Entry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceGroups provides a mock function with given fields:
func (_m *MockPanoramaClient) GetDeviceGroups() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostRulePolicies provides a mock function with given fields: _a0
func (_m *MockPanoramaClient) GetPostRulePolicies(_a0 string) ([]security.Entry, error) {
	ret := _m.Called(_a0)

	var r0 []security.Entry
	if rf, ok := ret.Get(0).(func(string) []security.Entry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]security.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreRulePolicies provides a mock function with given fields: _a0
func (_m *MockPanoramaClient) GetPreRulePolicies(_a0 string) ([]security.Entry, error) {
	ret := _m.Called(_a0)

	var r0 []security.Entry
	if rf, ok := ret.Get(0).(func(string) []security.Entry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]security.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceEntries provides a mock function with given fields: _a0
func (_m *MockPanoramaClient) GetServiceEntries(_a0 string) ([]srvc.Entry, error) {
	ret := _m.Called(_a0)

	var r0 []srvc.Entry
	if rf, ok := ret.Get(0).(func(string) []srvc.Entry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]srvc.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPanoramaClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPanoramaClient creates a new instance of MockPanoramaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPanoramaClient(t mockConstructorTestingTNewMockPanoramaClient) *MockPanoramaClient {
	mock := &MockPanoramaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
