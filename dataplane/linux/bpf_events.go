// Copyright (c) 2020-2021 Tigera, Inc. All rights reserved.

package intdataplane

import (
	"errors"
	"fmt"

	"github.com/prometheus/client_golang/prometheus"
	log "github.com/sirupsen/logrus"

	"github.com/projectcalico/felix/bpf/events"
)

type bpfEventHandler func(e events.Event)

type bpfEventSink struct {
	handlers []bpfEventHandler
	counter  prometheus.Counter
}

type bpfEventPoller struct {
	events events.Events
	sinks  map[events.Type]bpfEventSink

	prometheusLostCounter   prometheus.Counter
	prometheusNoSinkCounter prometheus.Counter
}

func newBpfEventPoller(e events.Events) *bpfEventPoller {
	p := &bpfEventPoller{
		events: e,
		sinks:  make(map[events.Type]bpfEventSink),

		prometheusLostCounter: prometheus.NewCounter(prometheus.CounterOpts{
			Name: "felix_bpf_events_lost",
			Help: "Number of events generated by BPF dataplane, " +
				"but lost due to a slow consumer",
		}),
		prometheusNoSinkCounter: prometheus.NewCounter(prometheus.CounterOpts{
			Name: "felix_bpf_events_no_sink",
			Help: "Number of events generated by BPF dataplane, " +
				"but not handled by any consumer",
		}),
	}

	prometheus.MustRegister(p.prometheusLostCounter)
	prometheus.MustRegister(p.prometheusNoSinkCounter)

	return p
}

func (p *bpfEventPoller) Register(t events.Type, handler bpfEventHandler) {
	sink, ok := p.sinks[t]
	if !ok {
		sink.counter = prometheus.NewCounter(prometheus.CounterOpts{
			Name: fmt.Sprintf("felix_bpf_events_type_%d", t),
			Help: fmt.Sprintf("Number of BPF events received of type %d", t),
		})
		prometheus.MustRegister(sink.counter)
	}
	sink.handlers = append(sink.handlers, handler)
	p.sinks[t] = sink
}

func (p *bpfEventPoller) Start() error {
	if len(p.sinks) == 0 {
		return errors.New("no event sinks registered")
	}

	go p.run()
	return nil
}

func (p *bpfEventPoller) run() {
	for {
		event, err := p.events.Next()
		if err != nil {
			if lost, ok := err.(events.ErrLostEvents); ok {
				p.prometheusLostCounter.Add(float64(lost))
			}
			log.WithError(err).Warn("Failed to get next event")
			continue
		}

		sink, ok := p.sinks[event.Type()]
		if !ok {
			log.Warnf("Event type %d without a sink", event.Type())
			p.prometheusNoSinkCounter.Inc()
			continue
		}

		for _, handler := range sink.handlers {
			handler(event)
		}
		sink.counter.Inc()
	}
}
