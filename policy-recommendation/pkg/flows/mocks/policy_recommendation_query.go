// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	api "github.com/projectcalico/calico/lma/pkg/api"
	flows "github.com/projectcalico/calico/policy-recommendation/pkg/flows"
)

// PolicyRecommendationQuery is an autogenerated mock type for the PolicyRecommendationQuery type
type PolicyRecommendationQuery struct {
	mock.Mock
}

// QueryFlows provides a mock function with given fields: params
func (_m *PolicyRecommendationQuery) QueryFlows(params *flows.RecommendationFlowLogQueryParams) ([]*api.Flow, error) {
	ret := _m.Called(params)

	var r0 []*api.Flow
	var r1 error
	if rf, ok := ret.Get(0).(func(*flows.RecommendationFlowLogQueryParams) ([]*api.Flow, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*flows.RecommendationFlowLogQueryParams) []*api.Flow); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Flow)
		}
	}

	if rf, ok := ret.Get(1).(func(*flows.RecommendationFlowLogQueryParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPolicyRecommendationQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewPolicyRecommendationQuery creates a new instance of PolicyRecommendationQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPolicyRecommendationQuery(t mockConstructorTestingTNewPolicyRecommendationQuery) *PolicyRecommendationQuery {
	mock := &PolicyRecommendationQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
