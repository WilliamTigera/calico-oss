// Code generated by mockery v2.3.0. DO NOT EDIT.

package node

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v3 "github.com/tigera/api/pkg/apis/projectcalico/v3"

	options "github.com/projectcalico/calico/libcalico-go/lib/options"
	watch "github.com/projectcalico/calico/libcalico-go/lib/watch"
)

// MockPacketCaptureInterface is an autogenerated mock type for the PacketCaptureInterface type
type MockPacketCaptureInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, res, opts
func (_m *MockPacketCaptureInterface) Create(ctx context.Context, res *v3.PacketCapture, opts options.SetOptions) (*v3.PacketCapture, error) {
	ret := _m.Called(ctx, res, opts)

	var r0 *v3.PacketCapture
	if rf, ok := ret.Get(0).(func(context.Context, *v3.PacketCapture, options.SetOptions) *v3.PacketCapture); ok {
		r0 = rf(ctx, res, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v3.PacketCapture)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v3.PacketCapture, options.SetOptions) error); ok {
		r1 = rf(ctx, res, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, namespace, name, opts
func (_m *MockPacketCaptureInterface) Delete(ctx context.Context, namespace string, name string, opts options.DeleteOptions) (*v3.PacketCapture, error) {
	ret := _m.Called(ctx, namespace, name, opts)

	var r0 *v3.PacketCapture
	if rf, ok := ret.Get(0).(func(context.Context, string, string, options.DeleteOptions) *v3.PacketCapture); ok {
		r0 = rf(ctx, namespace, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v3.PacketCapture)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, options.DeleteOptions) error); ok {
		r1 = rf(ctx, namespace, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, namespace, name, opts
func (_m *MockPacketCaptureInterface) Get(ctx context.Context, namespace string, name string, opts options.GetOptions) (*v3.PacketCapture, error) {
	ret := _m.Called(ctx, namespace, name, opts)

	var r0 *v3.PacketCapture
	if rf, ok := ret.Get(0).(func(context.Context, string, string, options.GetOptions) *v3.PacketCapture); ok {
		r0 = rf(ctx, namespace, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v3.PacketCapture)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, options.GetOptions) error); ok {
		r1 = rf(ctx, namespace, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opts
func (_m *MockPacketCaptureInterface) List(ctx context.Context, opts options.ListOptions) (*v3.PacketCaptureList, error) {
	ret := _m.Called(ctx, opts)

	var r0 *v3.PacketCaptureList
	if rf, ok := ret.Get(0).(func(context.Context, options.ListOptions) *v3.PacketCaptureList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v3.PacketCaptureList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, options.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, res, opts
func (_m *MockPacketCaptureInterface) Update(ctx context.Context, res *v3.PacketCapture, opts options.SetOptions) (*v3.PacketCapture, error) {
	ret := _m.Called(ctx, res, opts)

	var r0 *v3.PacketCapture
	if rf, ok := ret.Get(0).(func(context.Context, *v3.PacketCapture, options.SetOptions) *v3.PacketCapture); ok {
		r0 = rf(ctx, res, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v3.PacketCapture)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v3.PacketCapture, options.SetOptions) error); ok {
		r1 = rf(ctx, res, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *MockPacketCaptureInterface) Watch(ctx context.Context, opts options.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(context.Context, options.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, options.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
