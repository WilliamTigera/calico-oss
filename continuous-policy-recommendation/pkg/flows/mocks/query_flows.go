// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	api "github.com/projectcalico/calico/lma/pkg/api"

	flows "github.com/projectcalico/calico/continuous-policy-recommendation/pkg/flows"
)

// QueryFlows is an autogenerated mock type for the QueryFlows type
type QueryFlows struct {
	mock.Mock
}

// QueryElasticsearchFlows provides a mock function with given fields: ca, params
func (_m *QueryFlows) QueryElasticsearchFlows(ca flows.CompositeAggregator, params *flows.PolicyRecommendationParams) ([]*api.Flow, error) {
	ret := _m.Called(ca, params)

	var r0 []*api.Flow
	if rf, ok := ret.Get(0).(func(flows.CompositeAggregator, *flows.PolicyRecommendationParams) []*api.Flow); ok {
		r0 = rf(ca, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flows.CompositeAggregator, *flows.PolicyRecommendationParams) error); ok {
		r1 = rf(ca, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueryFlows interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryFlows creates a new instance of QueryFlows. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryFlows(t mockConstructorTestingTNewQueryFlows) *QueryFlows {
	mock := &QueryFlows{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
