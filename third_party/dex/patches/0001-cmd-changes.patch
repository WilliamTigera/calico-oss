From 5bf4e19c390672c97e94c2d6318099869f6580b0 Mon Sep 17 00:00:00 2001
From: Vara <vara@tigera.io>
Date: Tue, 9 Apr 2024 13:01:38 -0700
Subject: [PATCH] Remove code from dex that is unused and requires code
 generation. Add FIPS support to tls configs.

---
 third_party/dex/cmd/dex/config.go | 11 ------
 third_party/dex/cmd/dex/serve.go  | 58 +++++--------------------------
 2 files changed, 8 insertions(+), 61 deletions(-)

diff --git a/third_party/dex/cmd/dex/config.go b/third_party/dex/cmd/dex/config.go
index 33c0db4782..8f74e49f31 100644
--- a/third_party/dex/cmd/dex/config.go
+++ b/third_party/dex/cmd/dex/config.go
@@ -14,11 +14,9 @@ import (
 	"github.com/dexidp/dex/pkg/log"
 	"github.com/dexidp/dex/server"
 	"github.com/dexidp/dex/storage"
-	"github.com/dexidp/dex/storage/ent"
 	"github.com/dexidp/dex/storage/etcd"
 	"github.com/dexidp/dex/storage/kubernetes"
 	"github.com/dexidp/dex/storage/memory"
-	"github.com/dexidp/dex/storage/sql"
 )
 
 // Config is the config format for the main application.
@@ -243,12 +241,6 @@ var (
 	_ StorageConfig = (*etcd.Etcd)(nil)
 	_ StorageConfig = (*kubernetes.Config)(nil)
 	_ StorageConfig = (*memory.Config)(nil)
-	_ StorageConfig = (*sql.SQLite3)(nil)
-	_ StorageConfig = (*sql.Postgres)(nil)
-	_ StorageConfig = (*sql.MySQL)(nil)
-	_ StorageConfig = (*ent.SQLite3)(nil)
-	_ StorageConfig = (*ent.Postgres)(nil)
-	_ StorageConfig = (*ent.MySQL)(nil)
 )
 
 func getORMBasedSQLStorage(normal, entBased StorageConfig) func() StorageConfig {
@@ -264,9 +256,6 @@ var storages = map[string]func() StorageConfig{
 	"etcd":       func() StorageConfig { return new(etcd.Etcd) },
 	"kubernetes": func() StorageConfig { return new(kubernetes.Config) },
 	"memory":     func() StorageConfig { return new(memory.Config) },
-	"sqlite3":    getORMBasedSQLStorage(&sql.SQLite3{}, &ent.SQLite3{}),
-	"postgres":   getORMBasedSQLStorage(&sql.Postgres{}, &ent.Postgres{}),
-	"mysql":      getORMBasedSQLStorage(&sql.MySQL{}, &ent.MySQL{}),
 }
 
 // UnmarshalJSON allows Storage to implement the unmarshaler interface to
diff --git a/third_party/dex/cmd/dex/serve.go b/third_party/dex/cmd/dex/serve.go
index 9461a6220a..fe47721072 100644
--- a/third_party/dex/cmd/dex/serve.go
+++ b/third_party/dex/cmd/dex/serve.go
@@ -38,6 +38,8 @@ import (
 	"github.com/dexidp/dex/pkg/log"
 	"github.com/dexidp/dex/server"
 	"github.com/dexidp/dex/storage"
+
+	tls2 "github.com/projectcalico/calico/crypto/pkg/tls"
 )
 
 type serveOptions struct {
@@ -134,37 +136,8 @@ func runServe(options serveOptions) error {
 
 	var grpcOptions []grpc.ServerOption
 
-	allowedTLSCiphers := []uint16{
-		tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
-		tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
-		tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
-		tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
-		tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
-		tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
-		tls.TLS_RSA_WITH_AES_128_GCM_SHA256,
-		tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
-	}
-
-	allowedTLSVersions := map[string]int{
-		"1.2": tls.VersionTLS12,
-		"1.3": tls.VersionTLS13,
-	}
-
 	if c.GRPC.TLSCert != "" {
-		tlsMinVersion := tls.VersionTLS12
-		if c.GRPC.TLSMinVersion != "" {
-			tlsMinVersion = allowedTLSVersions[c.GRPC.TLSMinVersion]
-		}
-		tlsMaxVersion := 0 // default for max is whatever Go defaults to
-		if c.GRPC.TLSMaxVersion != "" {
-			tlsMaxVersion = allowedTLSVersions[c.GRPC.TLSMaxVersion]
-		}
-		baseTLSConfig := &tls.Config{
-			MinVersion:               uint16(tlsMinVersion),
-			MaxVersion:               uint16(tlsMaxVersion),
-			CipherSuites:             allowedTLSCiphers,
-			PreferServerCipherSuites: true,
-		}
+		baseTLSConfig := tls2.NewTLSConfig()
 
 		tlsConfig, err := newTLSReloader(logger, c.GRPC.TLSCert, c.GRPC.TLSKey, c.GRPC.TLSClientCA, baseTLSConfig)
 		if err != nil {
@@ -436,23 +409,7 @@ func runServe(options serveOptions) error {
 		if err != nil {
 			return fmt.Errorf("listening (%s) on %s: %v", name, c.Web.HTTPS, err)
 		}
-
-		tlsMinVersion := tls.VersionTLS12
-		if c.Web.TLSMinVersion != "" {
-			tlsMinVersion = allowedTLSVersions[c.Web.TLSMinVersion]
-		}
-		tlsMaxVersion := 0 // default for max is whatever Go defaults to
-		if c.Web.TLSMaxVersion != "" {
-			tlsMaxVersion = allowedTLSVersions[c.Web.TLSMaxVersion]
-		}
-
-		baseTLSConfig := &tls.Config{
-			MinVersion:               uint16(tlsMinVersion),
-			MaxVersion:               uint16(tlsMaxVersion),
-			CipherSuites:             allowedTLSCiphers,
-			PreferServerCipherSuites: true,
-		}
-
+		baseTLSConfig := tls2.NewTLSConfig()
 		tlsConfig, err := newTLSReloader(logger, c.Web.TLSCert, c.Web.TLSKey, "", baseTLSConfig)
 		if err != nil {
 			return fmt.Errorf("invalid config: get HTTP TLS: %v", err)
@@ -672,16 +629,17 @@ func newTLSReloader(logger log.Logger, certFile, keyFile, caFile string, baseCon
 		}
 	}()
 
+	conf := tls2.NewTLSConfig()
 	// https://pkg.go.dev/crypto/tls#baseConfig
 	// Server configurations must set one of Certificates, GetCertificate or GetConfigForClient.
 	if caFile != "" {
 		// grpc will use this via tls.Server for mTLS
-		initialConfig.GetConfigForClient = func(chi *tls.ClientHelloInfo) (*tls.Config, error) { return ptr.Load(), nil }
+		conf.GetConfigForClient = func(chi *tls.ClientHelloInfo) (*tls.Config, error) { return ptr.Load(), nil }
 	} else {
 		// net/http only uses Certificates or GetCertificate
-		initialConfig.GetCertificate = func(chi *tls.ClientHelloInfo) (*tls.Certificate, error) { return &ptr.Load().Certificates[0], nil }
+		conf.GetCertificate = func(chi *tls.ClientHelloInfo) (*tls.Certificate, error) { return &ptr.Load().Certificates[0], nil }
 	}
-	return initialConfig, nil
+	return conf, nil
 }
 
 // loadTLSConfig loads the given file paths into a [tls.Config]
-- 
2.25.1

