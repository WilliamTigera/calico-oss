From 27fcda55c1c339a075378cadbe85ce857019bfb7 Mon Sep 17 00:00:00 2001
From: Vara <vara@tigera.io>
Date: Thu, 14 Nov 2024 14:36:10 -0800
Subject: [PATCH] google tag manager plugin changes

---
 plugins/google_tag_manager/.gitignore        |  2 +
 plugins/google_tag_manager/README.md         | 22 ++++++++++
 plugins/google_tag_manager/common/index.ts   | 11 +++++
 plugins/google_tag_manager/kibana.json       | 14 ++++++
 plugins/google_tag_manager/package.json      | 14 ++++++
 plugins/google_tag_manager/public/index.scss |  0
 plugins/google_tag_manager/public/index.ts   | 12 +++++
 plugins/google_tag_manager/public/plugin.ts  | 46 ++++++++++++++++++++
 plugins/google_tag_manager/server/index.ts   | 17 ++++++++
 plugins/google_tag_manager/server/plugin.ts  | 29 ++++++++++++
 plugins/google_tag_manager/tsconfig.json     | 15 +++++++
 11 files changed, 182 insertions(+)
 create mode 100644 plugins/google_tag_manager/.gitignore
 create mode 100755 plugins/google_tag_manager/README.md
 create mode 100644 plugins/google_tag_manager/common/index.ts
 create mode 100644 plugins/google_tag_manager/kibana.json
 create mode 100644 plugins/google_tag_manager/package.json
 create mode 100644 plugins/google_tag_manager/public/index.scss
 create mode 100644 plugins/google_tag_manager/public/index.ts
 create mode 100644 plugins/google_tag_manager/public/plugin.ts
 create mode 100644 plugins/google_tag_manager/server/index.ts
 create mode 100644 plugins/google_tag_manager/server/plugin.ts
 create mode 100644 plugins/google_tag_manager/tsconfig.json

diff --git a/plugins/google_tag_manager/.gitignore b/plugins/google_tag_manager/.gitignore
new file mode 100644
index 000000000..c3dca1b96
--- /dev/null
+++ b/plugins/google_tag_manager/.gitignore
@@ -0,0 +1,2 @@
+/build
+/target
diff --git a/plugins/google_tag_manager/README.md b/plugins/google_tag_manager/README.md
new file mode 100755
index 000000000..c0328269b
--- /dev/null
+++ b/plugins/google_tag_manager/README.md
@@ -0,0 +1,22 @@
+# googleTagManager
+
+A Kibana plugin
+
+---
+
+## Development
+
+See the [kibana contributing guide](https://github.com/elastic/kibana/blob/main/CONTRIBUTING.md) for instructions setting up your development environment.
+
+## Scripts
+
+<dl>
+  <dt><code>yarn kbn bootstrap</code></dt>
+  <dd>Execute this to install node_modules and setup the dependencies in your plugin and in Kibana</dd>
+
+  <dt><code>yarn plugin-helpers build</code></dt>
+  <dd>Execute this to create a distributable version of this plugin that can be installed in Kibana</dd>
+
+  <dt><code>yarn plugin-helpers dev --watch</code></dt>
+    <dd>Execute this to build your plugin ui browser side so Kibana could pick up when started in development</dd>
+</dl>
diff --git a/plugins/google_tag_manager/common/index.ts b/plugins/google_tag_manager/common/index.ts
new file mode 100644
index 000000000..773ae4207
--- /dev/null
+++ b/plugins/google_tag_manager/common/index.ts
@@ -0,0 +1,11 @@
+export const PLUGIN_ID = 'googleTagManager';
+export const PLUGIN_NAME = 'googleTagManager';
+
+import { schema, TypeOf } from '@kbn/config-schema';
+
+export const configSchema = schema.object({
+  container: schema.string(),
+  enabled: schema.boolean({ defaultValue: true }),
+});
+
+export type ConfigSchema = TypeOf<typeof configSchema>;
diff --git a/plugins/google_tag_manager/kibana.json b/plugins/google_tag_manager/kibana.json
new file mode 100644
index 000000000..701ada523
--- /dev/null
+++ b/plugins/google_tag_manager/kibana.json
@@ -0,0 +1,14 @@
+{
+  "id": "googleTagManager",
+  "version": "1.0.0",
+  "kibanaVersion": "kibana",
+  "owner": {
+    "name": "google",
+    "githubTeam": ""
+  },
+  "description": "google tag manager",
+  "server": true,
+  "ui": true,
+  "requiredPlugins": [],
+  "optionalPlugins": []
+}
diff --git a/plugins/google_tag_manager/package.json b/plugins/google_tag_manager/package.json
new file mode 100644
index 000000000..5feaa4fe3
--- /dev/null
+++ b/plugins/google_tag_manager/package.json
@@ -0,0 +1,14 @@
+{
+  "name": "googleTagManager",
+  "version": "0.0.0",
+  "private": true,
+  "scripts": {
+    "bootstrap": "yarn kbn bootstrap && yarn install",
+    "build": "yarn plugin-helpers build",
+    "dev": "yarn plugin-helpers dev",
+    "plugin-helpers": "node ../../scripts/plugin_helpers",
+    "kbn": "node ../../scripts/kbn"
+  },
+  "dependencies": {
+  }
+}
diff --git a/plugins/google_tag_manager/public/index.scss b/plugins/google_tag_manager/public/index.scss
new file mode 100644
index 000000000..e69de29bb
diff --git a/plugins/google_tag_manager/public/index.ts b/plugins/google_tag_manager/public/index.ts
new file mode 100644
index 000000000..776a5184e
--- /dev/null
+++ b/plugins/google_tag_manager/public/index.ts
@@ -0,0 +1,12 @@
+import './index.scss';
+
+import { PluginInitializerContext } from '@kbn/core/public';
+import { GoogleTagManagerPlugin } from './plugin';
+import { ConfigSchema} from '../common';
+
+// This exports static code and TypeScript types,
+// as well as, Kibana Platform `plugin()` initializer.
+export function plugin(initializerContext: PluginInitializerContext<ConfigSchema>) {
+  return new GoogleTagManagerPlugin(initializerContext);
+}
+
diff --git a/plugins/google_tag_manager/public/plugin.ts b/plugins/google_tag_manager/public/plugin.ts
new file mode 100644
index 000000000..dc9e708c9
--- /dev/null
+++ b/plugins/google_tag_manager/public/plugin.ts
@@ -0,0 +1,46 @@
+import { PluginInitializerContext, CoreSetup, CoreStart, Plugin } from '@kbn/core/public';
+import { ConfigSchema } from '../common';
+
+export class GoogleTagManagerPlugin implements Plugin {
+  private config: ConfigSchema;
+  private logger: any;
+
+  constructor(private readonly initializerContext: PluginInitializerContext<ConfigSchema>) {
+    this.config = initializerContext.config.get();
+    this.logger = initializerContext.logger.get();
+  }
+
+  public setup(core: CoreSetup) {
+    const googleTagId = this.config.container;
+
+    if (!googleTagId) {
+      this.logger.info('Google Tag Manager ID is not defined');
+      return;
+    }
+
+    this.initGoogleTagManager(googleTagId);
+
+    return {};
+  }
+
+  public start(core: CoreStart) {
+    // Implement any start logic if needed
+  }
+
+  public stop() {
+    // Cleanup if necessary
+  }
+
+  private initGoogleTagManager(containerId: string) {
+    (function (w: any, d: any, s, l, i) {
+      w[l] = w[l] || [];
+      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });
+      const f = d.getElementsByTagName(s)[0];
+      const j = d.createElement(s);
+      const dl = l !== 'dataLayer' ? '&l=' + l : '';
+      j.async = true;
+      j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
+      f.parentNode.insertBefore(j, f);
+    })(window, document, 'script', 'dataLayer', containerId);
+  }
+}
diff --git a/plugins/google_tag_manager/server/index.ts b/plugins/google_tag_manager/server/index.ts
new file mode 100644
index 000000000..6f6209f09
--- /dev/null
+++ b/plugins/google_tag_manager/server/index.ts
@@ -0,0 +1,17 @@
+import { PluginConfigDescriptor, PluginInitializerContext } from '@kbn/core/server';
+import { configSchema, ConfigSchema } from '../common';
+import { GoogleTagManagerPlugin } from './plugin';
+
+//  This exports static code and TypeScript types,
+//  as well as, Kibana Platform `plugin()` initializer.
+
+export function plugin(initializerContext: PluginInitializerContext<ConfigSchema>) {
+  return new GoogleTagManagerPlugin(initializerContext);
+}
+
+export const config: PluginConfigDescriptor<ConfigSchema> = {
+  schema: configSchema,
+  exposeToBrowser: {
+    container: true,
+  },
+};
diff --git a/plugins/google_tag_manager/server/plugin.ts b/plugins/google_tag_manager/server/plugin.ts
new file mode 100644
index 000000000..09d2b8c3c
--- /dev/null
+++ b/plugins/google_tag_manager/server/plugin.ts
@@ -0,0 +1,29 @@
+import {
+  PluginInitializerContext,
+  CoreSetup,
+  CoreStart,
+  Plugin,
+  Logger
+} from '../../../src/core/server';
+import { schema } from '@kbn/config-schema';
+import { ConfigSchema } from '../common';
+
+export class GoogleTagManagerPlugin implements Plugin {
+  private readonly logger: Logger;
+
+  constructor(initializerContext: PluginInitializerContext) {
+    this.logger = initializerContext.logger.get();
+  }
+
+  public setup(core: CoreSetup) {
+    this.logger.info('googleTagManager: Setup');
+    return {};
+  }
+
+  public start(core: CoreStart) {
+    this.logger.debug('googleTagManager: Started');
+    return {};
+  }
+
+  public stop() {}
+}
diff --git a/plugins/google_tag_manager/tsconfig.json b/plugins/google_tag_manager/tsconfig.json
new file mode 100644
index 000000000..f3bbe6ef0
--- /dev/null
+++ b/plugins/google_tag_manager/tsconfig.json
@@ -0,0 +1,15 @@
+{
+  "extends": "../../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "./target/types"
+  },
+  "include": [
+    "index.ts",
+    "common/**/*.ts",
+    "public/**/*.ts",
+    "public/**/*.tsx",
+    "server/**/*.ts",
+    "../../typings/**/*"
+  ],
+  "exclude": []
+}
-- 
2.25.1

