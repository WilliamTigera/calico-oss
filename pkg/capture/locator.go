// Copyright (c) 2021 Tigera, Inc. All rights reserved.

package capture

import (
	"context"
	"fmt"

	"github.com/tigera/packetcapture-api/pkg/cache"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v3 "github.com/projectcalico/apiserver/pkg/apis/projectcalico/v3"
)

const tigeraFluentdNs = "tigera-fluentd"

// Locator determines how to access the files the files generated by a packet capture
type Locator interface {
	// GetEntryPod return the namespace and name of the entry pod or an error otherwise
	GetEntryPod(clusterID, node string) (string, string, error)
	// GetPacketCapture returns the packet capture or an error otherwise
	GetPacketCapture(clusterID, name, namespace string) (*v3.PacketCapture, error)
}

type locator struct {
	cache cache.ClientCache
}

func (l *locator) GetPacketCapture(clusterID, name, namespace string) (*v3.PacketCapture, error) {
	var cs, _, err = l.cache.GetClientAndConfig(clusterID)
	if err != nil {
		return nil, err
	}

	packetCapture, err := cs.ProjectcalicoV3().PacketCaptures(namespace).Get(context.Background(), name, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return packetCapture, nil
}

// NewLocator uses the fluentd pods in order to execute a remote copy command for the files
// generated by a packet capture
func NewLocator(cache cache.ClientCache) Locator {
	return &locator{cache: cache}
}

func (l *locator) GetEntryPod(clusterID, node string) (string, string, error) {
	var cs, _, err = l.cache.GetClientAndConfig(clusterID)
	if err != nil {
		return "", "", err
	}

	pods, err := cs.CoreV1().Pods(tigeraFluentdNs).List(context.Background(), metav1.ListOptions{
		FieldSelector: fmt.Sprintf("spec.nodeName=%s,status.phase=Running", node),
	})
	if err != nil {
		return "", "", err
	}
	if len(pods.Items) != 1 {
		return "", "", fmt.Errorf("failed to locate a valid entry point")
	}

	return pods.Items[0].Namespace, pods.Items[0].Name, nil
}
