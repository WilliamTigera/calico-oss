// Copyright (c) 2021 Tigera, Inc. All rights reserved.

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	projectcalico "github.com/tigera/apiserver/pkg/apis/projectcalico"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuthorizationReviewLister helps list AuthorizationReviews.
// All objects returned here must be treated as read-only.
type AuthorizationReviewLister interface {
	// List lists all AuthorizationReviews in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*projectcalico.AuthorizationReview, err error)
	// Get retrieves the AuthorizationReview from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*projectcalico.AuthorizationReview, error)
	AuthorizationReviewListerExpansion
}

// authorizationReviewLister implements the AuthorizationReviewLister interface.
type authorizationReviewLister struct {
	indexer cache.Indexer
}

// NewAuthorizationReviewLister returns a new AuthorizationReviewLister.
func NewAuthorizationReviewLister(indexer cache.Indexer) AuthorizationReviewLister {
	return &authorizationReviewLister{indexer: indexer}
}

// List lists all AuthorizationReviews in the indexer.
func (s *authorizationReviewLister) List(selector labels.Selector) (ret []*projectcalico.AuthorizationReview, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*projectcalico.AuthorizationReview))
	})
	return ret, err
}

// Get retrieves the AuthorizationReview from the index for a given name.
func (s *authorizationReviewLister) Get(name string) (*projectcalico.AuthorizationReview, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(projectcalico.Resource("authorizationreview"), name)
	}
	return obj.(*projectcalico.AuthorizationReview), nil
}
