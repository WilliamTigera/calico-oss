// Copyright (c) 2019 Tigera, Inc. All rights reserved.

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	projectcalico "github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlobalThreatFeedLister helps list GlobalThreatFeeds.
type GlobalThreatFeedLister interface {
	// List lists all GlobalThreatFeeds in the indexer.
	List(selector labels.Selector) (ret []*projectcalico.GlobalThreatFeed, err error)
	// Get retrieves the GlobalThreatFeed from the index for a given name.
	Get(name string) (*projectcalico.GlobalThreatFeed, error)
	GlobalThreatFeedListerExpansion
}

// globalThreatFeedLister implements the GlobalThreatFeedLister interface.
type globalThreatFeedLister struct {
	indexer cache.Indexer
}

// NewGlobalThreatFeedLister returns a new GlobalThreatFeedLister.
func NewGlobalThreatFeedLister(indexer cache.Indexer) GlobalThreatFeedLister {
	return &globalThreatFeedLister{indexer: indexer}
}

// List lists all GlobalThreatFeeds in the indexer.
func (s *globalThreatFeedLister) List(selector labels.Selector) (ret []*projectcalico.GlobalThreatFeed, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*projectcalico.GlobalThreatFeed))
	})
	return ret, err
}

// Get retrieves the GlobalThreatFeed from the index for a given name.
func (s *globalThreatFeedLister) Get(name string) (*projectcalico.GlobalThreatFeed, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(projectcalico.Resource("globalthreatfeed"), name)
	}
	return obj.(*projectcalico.GlobalThreatFeed), nil
}
