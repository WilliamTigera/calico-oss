// Copyright (c) 2020 Tigera, Inc. All rights reserved.

// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	"time"

	projectcalico "github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico"
	scheme "github.com/tigera/calico-k8sapiserver/pkg/client/clientset_generated/internalclientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NetworkSetsGetter has a method to return a NetworkSetInterface.
// A group's client should implement this interface.
type NetworkSetsGetter interface {
	NetworkSets() NetworkSetInterface
}

// NetworkSetInterface has methods to work with NetworkSet resources.
type NetworkSetInterface interface {
	Create(*projectcalico.NetworkSet) (*projectcalico.NetworkSet, error)
	Update(*projectcalico.NetworkSet) (*projectcalico.NetworkSet, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*projectcalico.NetworkSet, error)
	List(opts v1.ListOptions) (*projectcalico.NetworkSetList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *projectcalico.NetworkSet, err error)
	NetworkSetExpansion
}

// networkSets implements NetworkSetInterface
type networkSets struct {
	client rest.Interface
}

// newNetworkSets returns a NetworkSets
func newNetworkSets(c *ProjectcalicoClient) *networkSets {
	return &networkSets{
		client: c.RESTClient(),
	}
}

// Get takes name of the networkSet, and returns the corresponding networkSet object, and an error if there is any.
func (c *networkSets) Get(name string, options v1.GetOptions) (result *projectcalico.NetworkSet, err error) {
	result = &projectcalico.NetworkSet{}
	err = c.client.Get().
		Resource("networksets").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NetworkSets that match those selectors.
func (c *networkSets) List(opts v1.ListOptions) (result *projectcalico.NetworkSetList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &projectcalico.NetworkSetList{}
	err = c.client.Get().
		Resource("networksets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested networkSets.
func (c *networkSets) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("networksets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a networkSet and creates it.  Returns the server's representation of the networkSet, and an error, if there is any.
func (c *networkSets) Create(networkSet *projectcalico.NetworkSet) (result *projectcalico.NetworkSet, err error) {
	result = &projectcalico.NetworkSet{}
	err = c.client.Post().
		Resource("networksets").
		Body(networkSet).
		Do().
		Into(result)
	return
}

// Update takes the representation of a networkSet and updates it. Returns the server's representation of the networkSet, and an error, if there is any.
func (c *networkSets) Update(networkSet *projectcalico.NetworkSet) (result *projectcalico.NetworkSet, err error) {
	result = &projectcalico.NetworkSet{}
	err = c.client.Put().
		Resource("networksets").
		Name(networkSet.Name).
		Body(networkSet).
		Do().
		Into(result)
	return
}

// Delete takes name of the networkSet and deletes it. Returns an error if one occurs.
func (c *networkSets) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("networksets").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *networkSets) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("networksets").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched networkSet.
func (c *networkSets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *projectcalico.NetworkSet, err error) {
	result = &projectcalico.NetworkSet{}
	err = c.client.Patch(pt).
		Resource("networksets").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
