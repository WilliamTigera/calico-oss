// Copyright (c) 2019 Tigera, Inc. All rights reserved.

// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	projectcalico "github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico"
	scheme "github.com/tigera/calico-k8sapiserver/pkg/client/clientset_generated/internalclientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ClusterInformationsGetter has a method to return a ClusterInformationInterface.
// A group's client should implement this interface.
type ClusterInformationsGetter interface {
	ClusterInformations() ClusterInformationInterface
}

// ClusterInformationInterface has methods to work with ClusterInformation resources.
type ClusterInformationInterface interface {
	Create(*projectcalico.ClusterInformation) (*projectcalico.ClusterInformation, error)
	Update(*projectcalico.ClusterInformation) (*projectcalico.ClusterInformation, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*projectcalico.ClusterInformation, error)
	List(opts v1.ListOptions) (*projectcalico.ClusterInformationList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *projectcalico.ClusterInformation, err error)
	ClusterInformationExpansion
}

// clusterInformations implements ClusterInformationInterface
type clusterInformations struct {
	client rest.Interface
}

// newClusterInformations returns a ClusterInformations
func newClusterInformations(c *ProjectcalicoClient) *clusterInformations {
	return &clusterInformations{
		client: c.RESTClient(),
	}
}

// Get takes name of the clusterInformation, and returns the corresponding clusterInformation object, and an error if there is any.
func (c *clusterInformations) Get(name string, options v1.GetOptions) (result *projectcalico.ClusterInformation, err error) {
	result = &projectcalico.ClusterInformation{}
	err = c.client.Get().
		Resource("clusterinformations").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ClusterInformations that match those selectors.
func (c *clusterInformations) List(opts v1.ListOptions) (result *projectcalico.ClusterInformationList, err error) {
	result = &projectcalico.ClusterInformationList{}
	err = c.client.Get().
		Resource("clusterinformations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested clusterInformations.
func (c *clusterInformations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("clusterinformations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a clusterInformation and creates it.  Returns the server's representation of the clusterInformation, and an error, if there is any.
func (c *clusterInformations) Create(clusterInformation *projectcalico.ClusterInformation) (result *projectcalico.ClusterInformation, err error) {
	result = &projectcalico.ClusterInformation{}
	err = c.client.Post().
		Resource("clusterinformations").
		Body(clusterInformation).
		Do().
		Into(result)
	return
}

// Update takes the representation of a clusterInformation and updates it. Returns the server's representation of the clusterInformation, and an error, if there is any.
func (c *clusterInformations) Update(clusterInformation *projectcalico.ClusterInformation) (result *projectcalico.ClusterInformation, err error) {
	result = &projectcalico.ClusterInformation{}
	err = c.client.Put().
		Resource("clusterinformations").
		Name(clusterInformation.Name).
		Body(clusterInformation).
		Do().
		Into(result)
	return
}

// Delete takes name of the clusterInformation and deletes it. Returns an error if one occurs.
func (c *clusterInformations) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("clusterinformations").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *clusterInformations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("clusterinformations").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched clusterInformation.
func (c *clusterInformations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *projectcalico.ClusterInformation, err error) {
	result = &projectcalico.ClusterInformation{}
	err = c.client.Patch(pt).
		Resource("clusterinformations").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
