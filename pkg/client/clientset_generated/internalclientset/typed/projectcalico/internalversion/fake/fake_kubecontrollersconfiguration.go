// Copyright (c) 2020 Tigera, Inc. All rights reserved.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	projectcalico "github.com/tigera/apiserver/pkg/apis/projectcalico"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKubeControllersConfigurations implements KubeControllersConfigurationInterface
type FakeKubeControllersConfigurations struct {
	Fake *FakeProjectcalico
}

var kubecontrollersconfigurationsResource = schema.GroupVersionResource{Group: "projectcalico.org", Version: "", Resource: "kubecontrollersconfigurations"}

var kubecontrollersconfigurationsKind = schema.GroupVersionKind{Group: "projectcalico.org", Version: "", Kind: "KubeControllersConfiguration"}

// Get takes name of the kubeControllersConfiguration, and returns the corresponding kubeControllersConfiguration object, and an error if there is any.
func (c *FakeKubeControllersConfigurations) Get(name string, options v1.GetOptions) (result *projectcalico.KubeControllersConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kubecontrollersconfigurationsResource, name), &projectcalico.KubeControllersConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*projectcalico.KubeControllersConfiguration), err
}

// List takes label and field selectors, and returns the list of KubeControllersConfigurations that match those selectors.
func (c *FakeKubeControllersConfigurations) List(opts v1.ListOptions) (result *projectcalico.KubeControllersConfigurationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kubecontrollersconfigurationsResource, kubecontrollersconfigurationsKind, opts), &projectcalico.KubeControllersConfigurationList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &projectcalico.KubeControllersConfigurationList{ListMeta: obj.(*projectcalico.KubeControllersConfigurationList).ListMeta}
	for _, item := range obj.(*projectcalico.KubeControllersConfigurationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kubeControllersConfigurations.
func (c *FakeKubeControllersConfigurations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kubecontrollersconfigurationsResource, opts))
}

// Create takes the representation of a kubeControllersConfiguration and creates it.  Returns the server's representation of the kubeControllersConfiguration, and an error, if there is any.
func (c *FakeKubeControllersConfigurations) Create(kubeControllersConfiguration *projectcalico.KubeControllersConfiguration) (result *projectcalico.KubeControllersConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kubecontrollersconfigurationsResource, kubeControllersConfiguration), &projectcalico.KubeControllersConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*projectcalico.KubeControllersConfiguration), err
}

// Update takes the representation of a kubeControllersConfiguration and updates it. Returns the server's representation of the kubeControllersConfiguration, and an error, if there is any.
func (c *FakeKubeControllersConfigurations) Update(kubeControllersConfiguration *projectcalico.KubeControllersConfiguration) (result *projectcalico.KubeControllersConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kubecontrollersconfigurationsResource, kubeControllersConfiguration), &projectcalico.KubeControllersConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*projectcalico.KubeControllersConfiguration), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKubeControllersConfigurations) UpdateStatus(kubeControllersConfiguration *projectcalico.KubeControllersConfiguration) (*projectcalico.KubeControllersConfiguration, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kubecontrollersconfigurationsResource, "status", kubeControllersConfiguration), &projectcalico.KubeControllersConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*projectcalico.KubeControllersConfiguration), err
}

// Delete takes name of the kubeControllersConfiguration and deletes it. Returns an error if one occurs.
func (c *FakeKubeControllersConfigurations) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(kubecontrollersconfigurationsResource, name), &projectcalico.KubeControllersConfiguration{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKubeControllersConfigurations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kubecontrollersconfigurationsResource, listOptions)

	_, err := c.Fake.Invokes(action, &projectcalico.KubeControllersConfigurationList{})
	return err
}

// Patch applies the patch and returns the patched kubeControllersConfiguration.
func (c *FakeKubeControllersConfigurations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *projectcalico.KubeControllersConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kubecontrollersconfigurationsResource, name, pt, data, subresources...), &projectcalico.KubeControllersConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*projectcalico.KubeControllersConfiguration), err
}
