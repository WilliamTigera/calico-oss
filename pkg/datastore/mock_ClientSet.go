// Code generated by mockery v2.3.0. DO NOT EDIT.

package datastore

import (
	apiserverinternalv1alpha1 "k8s.io/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
	appsv1 "k8s.io/client-go/kubernetes/typed/apps/v1"

	appsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"

	authenticationv1 "k8s.io/client-go/kubernetes/typed/authentication/v1"

	authenticationv1beta1 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"

	authorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1"

	authorizationv1beta1 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"

	autoscalingv1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"

	batchv1 "k8s.io/client-go/kubernetes/typed/batch/v1"

	batchv1beta1 "k8s.io/client-go/kubernetes/typed/batch/v1beta1"

	certificatesv1 "k8s.io/client-go/kubernetes/typed/certificates/v1"

	certificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"

	coordinationv1 "k8s.io/client-go/kubernetes/typed/coordination/v1"

	coordinationv1beta1 "k8s.io/client-go/kubernetes/typed/coordination/v1beta1"

	corev1 "k8s.io/client-go/kubernetes/typed/core/v1"

	discovery "k8s.io/client-go/discovery"

	discoveryv1 "k8s.io/client-go/kubernetes/typed/discovery/v1"

	discoveryv1beta1 "k8s.io/client-go/kubernetes/typed/discovery/v1beta1"

	eventsv1 "k8s.io/client-go/kubernetes/typed/events/v1"

	eventsv1beta1 "k8s.io/client-go/kubernetes/typed/events/v1beta1"

	extensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"

	flowcontrolv1beta1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta1"

	list "github.com/tigera/lma/pkg/list"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	networkingv1 "k8s.io/client-go/kubernetes/typed/networking/v1"

	networkingv1beta1 "k8s.io/client-go/kubernetes/typed/networking/v1beta1"

	nodev1 "k8s.io/client-go/kubernetes/typed/node/v1"

	nodev1alpha1 "k8s.io/client-go/kubernetes/typed/node/v1alpha1"

	nodev1beta1 "k8s.io/client-go/kubernetes/typed/node/v1beta1"

	policyv1 "k8s.io/client-go/kubernetes/typed/policy/v1"

	policyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"

	rbacv1 "k8s.io/client-go/kubernetes/typed/rbac/v1"

	rbacv1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"

	rbacv1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"

	rest "k8s.io/client-go/rest"

	schedulingv1 "k8s.io/client-go/kubernetes/typed/scheduling/v1"

	schedulingv1alpha1 "k8s.io/client-go/kubernetes/typed/scheduling/v1alpha1"

	schedulingv1beta1 "k8s.io/client-go/kubernetes/typed/scheduling/v1beta1"

	storagev1 "k8s.io/client-go/kubernetes/typed/storage/v1"

	storagev1alpha1 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"

	storagev1beta1 "k8s.io/client-go/kubernetes/typed/storage/v1beta1"

	v1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"

	v1alpha1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1alpha1"

	v1beta1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1beta1"

	v1beta2 "k8s.io/client-go/kubernetes/typed/apps/v1beta2"

	v2beta1 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta1"

	v2beta2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta2"

	v3 "github.com/tigera/api/pkg/client/clientset_generated/clientset/typed/projectcalico/v3"
)

// MockClientSet is an autogenerated mock type for the ClientSet type
type MockClientSet struct {
	mock.Mock
}

// AdmissionregistrationV1 provides a mock function with given fields:
func (_m *MockClientSet) AdmissionregistrationV1() v1.AdmissionregistrationV1Interface {
	ret := _m.Called()

	var r0 v1.AdmissionregistrationV1Interface
	if rf, ok := ret.Get(0).(func() v1.AdmissionregistrationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.AdmissionregistrationV1Interface)
		}
	}

	return r0
}

// AdmissionregistrationV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) AdmissionregistrationV1beta1() v1beta1.AdmissionregistrationV1beta1Interface {
	ret := _m.Called()

	var r0 v1beta1.AdmissionregistrationV1beta1Interface
	if rf, ok := ret.Get(0).(func() v1beta1.AdmissionregistrationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.AdmissionregistrationV1beta1Interface)
		}
	}

	return r0
}

// AppsV1 provides a mock function with given fields:
func (_m *MockClientSet) AppsV1() appsv1.AppsV1Interface {
	ret := _m.Called()

	var r0 appsv1.AppsV1Interface
	if rf, ok := ret.Get(0).(func() appsv1.AppsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appsv1.AppsV1Interface)
		}
	}

	return r0
}

// AppsV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) AppsV1beta1() appsv1beta1.AppsV1beta1Interface {
	ret := _m.Called()

	var r0 appsv1beta1.AppsV1beta1Interface
	if rf, ok := ret.Get(0).(func() appsv1beta1.AppsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appsv1beta1.AppsV1beta1Interface)
		}
	}

	return r0
}

// AppsV1beta2 provides a mock function with given fields:
func (_m *MockClientSet) AppsV1beta2() v1beta2.AppsV1beta2Interface {
	ret := _m.Called()

	var r0 v1beta2.AppsV1beta2Interface
	if rf, ok := ret.Get(0).(func() v1beta2.AppsV1beta2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.AppsV1beta2Interface)
		}
	}

	return r0
}

// AuthenticationReviews provides a mock function with given fields:
func (_m *MockClientSet) AuthenticationReviews() v3.AuthenticationReviewInterface {
	ret := _m.Called()

	var r0 v3.AuthenticationReviewInterface
	if rf, ok := ret.Get(0).(func() v3.AuthenticationReviewInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.AuthenticationReviewInterface)
		}
	}

	return r0
}

// AuthenticationV1 provides a mock function with given fields:
func (_m *MockClientSet) AuthenticationV1() authenticationv1.AuthenticationV1Interface {
	ret := _m.Called()

	var r0 authenticationv1.AuthenticationV1Interface
	if rf, ok := ret.Get(0).(func() authenticationv1.AuthenticationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationv1.AuthenticationV1Interface)
		}
	}

	return r0
}

// AuthenticationV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) AuthenticationV1beta1() authenticationv1beta1.AuthenticationV1beta1Interface {
	ret := _m.Called()

	var r0 authenticationv1beta1.AuthenticationV1beta1Interface
	if rf, ok := ret.Get(0).(func() authenticationv1beta1.AuthenticationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationv1beta1.AuthenticationV1beta1Interface)
		}
	}

	return r0
}

// AuthorizationReviews provides a mock function with given fields:
func (_m *MockClientSet) AuthorizationReviews() v3.AuthorizationReviewInterface {
	ret := _m.Called()

	var r0 v3.AuthorizationReviewInterface
	if rf, ok := ret.Get(0).(func() v3.AuthorizationReviewInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.AuthorizationReviewInterface)
		}
	}

	return r0
}

// AuthorizationV1 provides a mock function with given fields:
func (_m *MockClientSet) AuthorizationV1() authorizationv1.AuthorizationV1Interface {
	ret := _m.Called()

	var r0 authorizationv1.AuthorizationV1Interface
	if rf, ok := ret.Get(0).(func() authorizationv1.AuthorizationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authorizationv1.AuthorizationV1Interface)
		}
	}

	return r0
}

// AuthorizationV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) AuthorizationV1beta1() authorizationv1beta1.AuthorizationV1beta1Interface {
	ret := _m.Called()

	var r0 authorizationv1beta1.AuthorizationV1beta1Interface
	if rf, ok := ret.Get(0).(func() authorizationv1beta1.AuthorizationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authorizationv1beta1.AuthorizationV1beta1Interface)
		}
	}

	return r0
}

// AutoscalingV1 provides a mock function with given fields:
func (_m *MockClientSet) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
	ret := _m.Called()

	var r0 autoscalingv1.AutoscalingV1Interface
	if rf, ok := ret.Get(0).(func() autoscalingv1.AutoscalingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(autoscalingv1.AutoscalingV1Interface)
		}
	}

	return r0
}

// AutoscalingV2beta1 provides a mock function with given fields:
func (_m *MockClientSet) AutoscalingV2beta1() v2beta1.AutoscalingV2beta1Interface {
	ret := _m.Called()

	var r0 v2beta1.AutoscalingV2beta1Interface
	if rf, ok := ret.Get(0).(func() v2beta1.AutoscalingV2beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2beta1.AutoscalingV2beta1Interface)
		}
	}

	return r0
}

// AutoscalingV2beta2 provides a mock function with given fields:
func (_m *MockClientSet) AutoscalingV2beta2() v2beta2.AutoscalingV2beta2Interface {
	ret := _m.Called()

	var r0 v2beta2.AutoscalingV2beta2Interface
	if rf, ok := ret.Get(0).(func() v2beta2.AutoscalingV2beta2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2beta2.AutoscalingV2beta2Interface)
		}
	}

	return r0
}

// BGPConfigurations provides a mock function with given fields:
func (_m *MockClientSet) BGPConfigurations() v3.BGPConfigurationInterface {
	ret := _m.Called()

	var r0 v3.BGPConfigurationInterface
	if rf, ok := ret.Get(0).(func() v3.BGPConfigurationInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.BGPConfigurationInterface)
		}
	}

	return r0
}

// BGPPeers provides a mock function with given fields:
func (_m *MockClientSet) BGPPeers() v3.BGPPeerInterface {
	ret := _m.Called()

	var r0 v3.BGPPeerInterface
	if rf, ok := ret.Get(0).(func() v3.BGPPeerInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.BGPPeerInterface)
		}
	}

	return r0
}

// BatchV1 provides a mock function with given fields:
func (_m *MockClientSet) BatchV1() batchv1.BatchV1Interface {
	ret := _m.Called()

	var r0 batchv1.BatchV1Interface
	if rf, ok := ret.Get(0).(func() batchv1.BatchV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(batchv1.BatchV1Interface)
		}
	}

	return r0
}

// BatchV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) BatchV1beta1() batchv1beta1.BatchV1beta1Interface {
	ret := _m.Called()

	var r0 batchv1beta1.BatchV1beta1Interface
	if rf, ok := ret.Get(0).(func() batchv1beta1.BatchV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(batchv1beta1.BatchV1beta1Interface)
		}
	}

	return r0
}

// CertificatesV1 provides a mock function with given fields:
func (_m *MockClientSet) CertificatesV1() certificatesv1.CertificatesV1Interface {
	ret := _m.Called()

	var r0 certificatesv1.CertificatesV1Interface
	if rf, ok := ret.Get(0).(func() certificatesv1.CertificatesV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificatesv1.CertificatesV1Interface)
		}
	}

	return r0
}

// CertificatesV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) CertificatesV1beta1() certificatesv1beta1.CertificatesV1beta1Interface {
	ret := _m.Called()

	var r0 certificatesv1beta1.CertificatesV1beta1Interface
	if rf, ok := ret.Get(0).(func() certificatesv1beta1.CertificatesV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificatesv1beta1.CertificatesV1beta1Interface)
		}
	}

	return r0
}

// ClusterInformations provides a mock function with given fields:
func (_m *MockClientSet) ClusterInformations() v3.ClusterInformationInterface {
	ret := _m.Called()

	var r0 v3.ClusterInformationInterface
	if rf, ok := ret.Get(0).(func() v3.ClusterInformationInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.ClusterInformationInterface)
		}
	}

	return r0
}

// CoordinationV1 provides a mock function with given fields:
func (_m *MockClientSet) CoordinationV1() coordinationv1.CoordinationV1Interface {
	ret := _m.Called()

	var r0 coordinationv1.CoordinationV1Interface
	if rf, ok := ret.Get(0).(func() coordinationv1.CoordinationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coordinationv1.CoordinationV1Interface)
		}
	}

	return r0
}

// CoordinationV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) CoordinationV1beta1() coordinationv1beta1.CoordinationV1beta1Interface {
	ret := _m.Called()

	var r0 coordinationv1beta1.CoordinationV1beta1Interface
	if rf, ok := ret.Get(0).(func() coordinationv1beta1.CoordinationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coordinationv1beta1.CoordinationV1beta1Interface)
		}
	}

	return r0
}

// CoreV1 provides a mock function with given fields:
func (_m *MockClientSet) CoreV1() corev1.CoreV1Interface {
	ret := _m.Called()

	var r0 corev1.CoreV1Interface
	if rf, ok := ret.Get(0).(func() corev1.CoreV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.CoreV1Interface)
		}
	}

	return r0
}

// Discovery provides a mock function with given fields:
func (_m *MockClientSet) Discovery() discovery.DiscoveryInterface {
	ret := _m.Called()

	var r0 discovery.DiscoveryInterface
	if rf, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}

	return r0
}

// DiscoveryV1 provides a mock function with given fields:
func (_m *MockClientSet) DiscoveryV1() discoveryv1.DiscoveryV1Interface {
	ret := _m.Called()

	var r0 discoveryv1.DiscoveryV1Interface
	if rf, ok := ret.Get(0).(func() discoveryv1.DiscoveryV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discoveryv1.DiscoveryV1Interface)
		}
	}

	return r0
}

// DiscoveryV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) DiscoveryV1beta1() discoveryv1beta1.DiscoveryV1beta1Interface {
	ret := _m.Called()

	var r0 discoveryv1beta1.DiscoveryV1beta1Interface
	if rf, ok := ret.Get(0).(func() discoveryv1beta1.DiscoveryV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discoveryv1beta1.DiscoveryV1beta1Interface)
		}
	}

	return r0
}

// EventsV1 provides a mock function with given fields:
func (_m *MockClientSet) EventsV1() eventsv1.EventsV1Interface {
	ret := _m.Called()

	var r0 eventsv1.EventsV1Interface
	if rf, ok := ret.Get(0).(func() eventsv1.EventsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventsv1.EventsV1Interface)
		}
	}

	return r0
}

// EventsV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) EventsV1beta1() eventsv1beta1.EventsV1beta1Interface {
	ret := _m.Called()

	var r0 eventsv1beta1.EventsV1beta1Interface
	if rf, ok := ret.Get(0).(func() eventsv1beta1.EventsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventsv1beta1.EventsV1beta1Interface)
		}
	}

	return r0
}

// ExtensionsV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
	ret := _m.Called()

	var r0 extensionsv1beta1.ExtensionsV1beta1Interface
	if rf, ok := ret.Get(0).(func() extensionsv1beta1.ExtensionsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(extensionsv1beta1.ExtensionsV1beta1Interface)
		}
	}

	return r0
}

// FelixConfigurations provides a mock function with given fields:
func (_m *MockClientSet) FelixConfigurations() v3.FelixConfigurationInterface {
	ret := _m.Called()

	var r0 v3.FelixConfigurationInterface
	if rf, ok := ret.Get(0).(func() v3.FelixConfigurationInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.FelixConfigurationInterface)
		}
	}

	return r0
}

// FlowcontrolV1alpha1 provides a mock function with given fields:
func (_m *MockClientSet) FlowcontrolV1alpha1() v1alpha1.FlowcontrolV1alpha1Interface {
	ret := _m.Called()

	var r0 v1alpha1.FlowcontrolV1alpha1Interface
	if rf, ok := ret.Get(0).(func() v1alpha1.FlowcontrolV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.FlowcontrolV1alpha1Interface)
		}
	}

	return r0
}

// FlowcontrolV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) FlowcontrolV1beta1() flowcontrolv1beta1.FlowcontrolV1beta1Interface {
	ret := _m.Called()

	var r0 flowcontrolv1beta1.FlowcontrolV1beta1Interface
	if rf, ok := ret.Get(0).(func() flowcontrolv1beta1.FlowcontrolV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrolv1beta1.FlowcontrolV1beta1Interface)
		}
	}

	return r0
}

// GlobalAlertTemplates provides a mock function with given fields:
func (_m *MockClientSet) GlobalAlertTemplates() v3.GlobalAlertTemplateInterface {
	ret := _m.Called()

	var r0 v3.GlobalAlertTemplateInterface
	if rf, ok := ret.Get(0).(func() v3.GlobalAlertTemplateInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.GlobalAlertTemplateInterface)
		}
	}

	return r0
}

// GlobalAlerts provides a mock function with given fields:
func (_m *MockClientSet) GlobalAlerts() v3.GlobalAlertInterface {
	ret := _m.Called()

	var r0 v3.GlobalAlertInterface
	if rf, ok := ret.Get(0).(func() v3.GlobalAlertInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.GlobalAlertInterface)
		}
	}

	return r0
}

// GlobalNetworkPolicies provides a mock function with given fields:
func (_m *MockClientSet) GlobalNetworkPolicies() v3.GlobalNetworkPolicyInterface {
	ret := _m.Called()

	var r0 v3.GlobalNetworkPolicyInterface
	if rf, ok := ret.Get(0).(func() v3.GlobalNetworkPolicyInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.GlobalNetworkPolicyInterface)
		}
	}

	return r0
}

// GlobalNetworkSets provides a mock function with given fields:
func (_m *MockClientSet) GlobalNetworkSets() v3.GlobalNetworkSetInterface {
	ret := _m.Called()

	var r0 v3.GlobalNetworkSetInterface
	if rf, ok := ret.Get(0).(func() v3.GlobalNetworkSetInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.GlobalNetworkSetInterface)
		}
	}

	return r0
}

// GlobalReportTypes provides a mock function with given fields:
func (_m *MockClientSet) GlobalReportTypes() v3.GlobalReportTypeInterface {
	ret := _m.Called()

	var r0 v3.GlobalReportTypeInterface
	if rf, ok := ret.Get(0).(func() v3.GlobalReportTypeInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.GlobalReportTypeInterface)
		}
	}

	return r0
}

// GlobalReports provides a mock function with given fields:
func (_m *MockClientSet) GlobalReports() v3.GlobalReportInterface {
	ret := _m.Called()

	var r0 v3.GlobalReportInterface
	if rf, ok := ret.Get(0).(func() v3.GlobalReportInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.GlobalReportInterface)
		}
	}

	return r0
}

// GlobalThreatFeeds provides a mock function with given fields:
func (_m *MockClientSet) GlobalThreatFeeds() v3.GlobalThreatFeedInterface {
	ret := _m.Called()

	var r0 v3.GlobalThreatFeedInterface
	if rf, ok := ret.Get(0).(func() v3.GlobalThreatFeedInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.GlobalThreatFeedInterface)
		}
	}

	return r0
}

// HostEndpoints provides a mock function with given fields:
func (_m *MockClientSet) HostEndpoints() v3.HostEndpointInterface {
	ret := _m.Called()

	var r0 v3.HostEndpointInterface
	if rf, ok := ret.Get(0).(func() v3.HostEndpointInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.HostEndpointInterface)
		}
	}

	return r0
}

// IPPools provides a mock function with given fields:
func (_m *MockClientSet) IPPools() v3.IPPoolInterface {
	ret := _m.Called()

	var r0 v3.IPPoolInterface
	if rf, ok := ret.Get(0).(func() v3.IPPoolInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.IPPoolInterface)
		}
	}

	return r0
}

// InternalV1alpha1 provides a mock function with given fields:
func (_m *MockClientSet) InternalV1alpha1() apiserverinternalv1alpha1.InternalV1alpha1Interface {
	ret := _m.Called()

	var r0 apiserverinternalv1alpha1.InternalV1alpha1Interface
	if rf, ok := ret.Get(0).(func() apiserverinternalv1alpha1.InternalV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiserverinternalv1alpha1.InternalV1alpha1Interface)
		}
	}

	return r0
}

// KubeControllersConfigurations provides a mock function with given fields:
func (_m *MockClientSet) KubeControllersConfigurations() v3.KubeControllersConfigurationInterface {
	ret := _m.Called()

	var r0 v3.KubeControllersConfigurationInterface
	if rf, ok := ret.Get(0).(func() v3.KubeControllersConfigurationInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.KubeControllersConfigurationInterface)
		}
	}

	return r0
}

// LicenseKeys provides a mock function with given fields:
func (_m *MockClientSet) LicenseKeys() v3.LicenseKeyInterface {
	ret := _m.Called()

	var r0 v3.LicenseKeyInterface
	if rf, ok := ret.Get(0).(func() v3.LicenseKeyInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.LicenseKeyInterface)
		}
	}

	return r0
}

// ManagedClusters provides a mock function with given fields:
func (_m *MockClientSet) ManagedClusters() v3.ManagedClusterInterface {
	ret := _m.Called()

	var r0 v3.ManagedClusterInterface
	if rf, ok := ret.Get(0).(func() v3.ManagedClusterInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.ManagedClusterInterface)
		}
	}

	return r0
}

// NetworkPolicies provides a mock function with given fields: namespace
func (_m *MockClientSet) NetworkPolicies(namespace string) v3.NetworkPolicyInterface {
	ret := _m.Called(namespace)

	var r0 v3.NetworkPolicyInterface
	if rf, ok := ret.Get(0).(func(string) v3.NetworkPolicyInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.NetworkPolicyInterface)
		}
	}

	return r0
}

// NetworkSets provides a mock function with given fields: namespace
func (_m *MockClientSet) NetworkSets(namespace string) v3.NetworkSetInterface {
	ret := _m.Called(namespace)

	var r0 v3.NetworkSetInterface
	if rf, ok := ret.Get(0).(func(string) v3.NetworkSetInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.NetworkSetInterface)
		}
	}

	return r0
}

// NetworkingV1 provides a mock function with given fields:
func (_m *MockClientSet) NetworkingV1() networkingv1.NetworkingV1Interface {
	ret := _m.Called()

	var r0 networkingv1.NetworkingV1Interface
	if rf, ok := ret.Get(0).(func() networkingv1.NetworkingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1.NetworkingV1Interface)
		}
	}

	return r0
}

// NetworkingV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface {
	ret := _m.Called()

	var r0 networkingv1beta1.NetworkingV1beta1Interface
	if rf, ok := ret.Get(0).(func() networkingv1beta1.NetworkingV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1beta1.NetworkingV1beta1Interface)
		}
	}

	return r0
}

// NodeV1 provides a mock function with given fields:
func (_m *MockClientSet) NodeV1() nodev1.NodeV1Interface {
	ret := _m.Called()

	var r0 nodev1.NodeV1Interface
	if rf, ok := ret.Get(0).(func() nodev1.NodeV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1.NodeV1Interface)
		}
	}

	return r0
}

// NodeV1alpha1 provides a mock function with given fields:
func (_m *MockClientSet) NodeV1alpha1() nodev1alpha1.NodeV1alpha1Interface {
	ret := _m.Called()

	var r0 nodev1alpha1.NodeV1alpha1Interface
	if rf, ok := ret.Get(0).(func() nodev1alpha1.NodeV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1alpha1.NodeV1alpha1Interface)
		}
	}

	return r0
}

// NodeV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) NodeV1beta1() nodev1beta1.NodeV1beta1Interface {
	ret := _m.Called()

	var r0 nodev1beta1.NodeV1beta1Interface
	if rf, ok := ret.Get(0).(func() nodev1beta1.NodeV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1beta1.NodeV1beta1Interface)
		}
	}

	return r0
}

// PacketCaptures provides a mock function with given fields: namespace
func (_m *MockClientSet) PacketCaptures(namespace string) v3.PacketCaptureInterface {
	ret := _m.Called(namespace)

	var r0 v3.PacketCaptureInterface
	if rf, ok := ret.Get(0).(func(string) v3.PacketCaptureInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.PacketCaptureInterface)
		}
	}

	return r0
}

// PolicyV1 provides a mock function with given fields:
func (_m *MockClientSet) PolicyV1() policyv1.PolicyV1Interface {
	ret := _m.Called()

	var r0 policyv1.PolicyV1Interface
	if rf, ok := ret.Get(0).(func() policyv1.PolicyV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policyv1.PolicyV1Interface)
		}
	}

	return r0
}

// PolicyV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) PolicyV1beta1() policyv1beta1.PolicyV1beta1Interface {
	ret := _m.Called()

	var r0 policyv1beta1.PolicyV1beta1Interface
	if rf, ok := ret.Get(0).(func() policyv1beta1.PolicyV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policyv1beta1.PolicyV1beta1Interface)
		}
	}

	return r0
}

// Profiles provides a mock function with given fields:
func (_m *MockClientSet) Profiles() v3.ProfileInterface {
	ret := _m.Called()

	var r0 v3.ProfileInterface
	if rf, ok := ret.Get(0).(func() v3.ProfileInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.ProfileInterface)
		}
	}

	return r0
}

// RESTClient provides a mock function with given fields:
func (_m *MockClientSet) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// RbacV1 provides a mock function with given fields:
func (_m *MockClientSet) RbacV1() rbacv1.RbacV1Interface {
	ret := _m.Called()

	var r0 rbacv1.RbacV1Interface
	if rf, ok := ret.Get(0).(func() rbacv1.RbacV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1.RbacV1Interface)
		}
	}

	return r0
}

// RbacV1alpha1 provides a mock function with given fields:
func (_m *MockClientSet) RbacV1alpha1() rbacv1alpha1.RbacV1alpha1Interface {
	ret := _m.Called()

	var r0 rbacv1alpha1.RbacV1alpha1Interface
	if rf, ok := ret.Get(0).(func() rbacv1alpha1.RbacV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1alpha1.RbacV1alpha1Interface)
		}
	}

	return r0
}

// RbacV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) RbacV1beta1() rbacv1beta1.RbacV1beta1Interface {
	ret := _m.Called()

	var r0 rbacv1beta1.RbacV1beta1Interface
	if rf, ok := ret.Get(0).(func() rbacv1beta1.RbacV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1beta1.RbacV1beta1Interface)
		}
	}

	return r0
}

// RemoteClusterConfigurations provides a mock function with given fields:
func (_m *MockClientSet) RemoteClusterConfigurations() v3.RemoteClusterConfigurationInterface {
	ret := _m.Called()

	var r0 v3.RemoteClusterConfigurationInterface
	if rf, ok := ret.Get(0).(func() v3.RemoteClusterConfigurationInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.RemoteClusterConfigurationInterface)
		}
	}

	return r0
}

// RetrieveList provides a mock function with given fields: kind
func (_m *MockClientSet) RetrieveList(kind metav1.TypeMeta) (*list.TimestampedResourceList, error) {
	ret := _m.Called(kind)

	var r0 *list.TimestampedResourceList
	if rf, ok := ret.Get(0).(func(metav1.TypeMeta) *list.TimestampedResourceList); ok {
		r0 = rf(kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*list.TimestampedResourceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metav1.TypeMeta) error); ok {
		r1 = rf(kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchedulingV1 provides a mock function with given fields:
func (_m *MockClientSet) SchedulingV1() schedulingv1.SchedulingV1Interface {
	ret := _m.Called()

	var r0 schedulingv1.SchedulingV1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1.SchedulingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1.SchedulingV1Interface)
		}
	}

	return r0
}

// SchedulingV1alpha1 provides a mock function with given fields:
func (_m *MockClientSet) SchedulingV1alpha1() schedulingv1alpha1.SchedulingV1alpha1Interface {
	ret := _m.Called()

	var r0 schedulingv1alpha1.SchedulingV1alpha1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1alpha1.SchedulingV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1alpha1.SchedulingV1alpha1Interface)
		}
	}

	return r0
}

// SchedulingV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) SchedulingV1beta1() schedulingv1beta1.SchedulingV1beta1Interface {
	ret := _m.Called()

	var r0 schedulingv1beta1.SchedulingV1beta1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1beta1.SchedulingV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1beta1.SchedulingV1beta1Interface)
		}
	}

	return r0
}

// StagedGlobalNetworkPolicies provides a mock function with given fields:
func (_m *MockClientSet) StagedGlobalNetworkPolicies() v3.StagedGlobalNetworkPolicyInterface {
	ret := _m.Called()

	var r0 v3.StagedGlobalNetworkPolicyInterface
	if rf, ok := ret.Get(0).(func() v3.StagedGlobalNetworkPolicyInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.StagedGlobalNetworkPolicyInterface)
		}
	}

	return r0
}

// StagedKubernetesNetworkPolicies provides a mock function with given fields: namespace
func (_m *MockClientSet) StagedKubernetesNetworkPolicies(namespace string) v3.StagedKubernetesNetworkPolicyInterface {
	ret := _m.Called(namespace)

	var r0 v3.StagedKubernetesNetworkPolicyInterface
	if rf, ok := ret.Get(0).(func(string) v3.StagedKubernetesNetworkPolicyInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.StagedKubernetesNetworkPolicyInterface)
		}
	}

	return r0
}

// StagedNetworkPolicies provides a mock function with given fields: namespace
func (_m *MockClientSet) StagedNetworkPolicies(namespace string) v3.StagedNetworkPolicyInterface {
	ret := _m.Called(namespace)

	var r0 v3.StagedNetworkPolicyInterface
	if rf, ok := ret.Get(0).(func(string) v3.StagedNetworkPolicyInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.StagedNetworkPolicyInterface)
		}
	}

	return r0
}

// StorageV1 provides a mock function with given fields:
func (_m *MockClientSet) StorageV1() storagev1.StorageV1Interface {
	ret := _m.Called()

	var r0 storagev1.StorageV1Interface
	if rf, ok := ret.Get(0).(func() storagev1.StorageV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1.StorageV1Interface)
		}
	}

	return r0
}

// StorageV1alpha1 provides a mock function with given fields:
func (_m *MockClientSet) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	ret := _m.Called()

	var r0 storagev1alpha1.StorageV1alpha1Interface
	if rf, ok := ret.Get(0).(func() storagev1alpha1.StorageV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1alpha1.StorageV1alpha1Interface)
		}
	}

	return r0
}

// StorageV1beta1 provides a mock function with given fields:
func (_m *MockClientSet) StorageV1beta1() storagev1beta1.StorageV1beta1Interface {
	ret := _m.Called()

	var r0 storagev1beta1.StorageV1beta1Interface
	if rf, ok := ret.Get(0).(func() storagev1beta1.StorageV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1beta1.StorageV1beta1Interface)
		}
	}

	return r0
}

// Tiers provides a mock function with given fields:
func (_m *MockClientSet) Tiers() v3.TierInterface {
	ret := _m.Called()

	var r0 v3.TierInterface
	if rf, ok := ret.Get(0).(func() v3.TierInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v3.TierInterface)
		}
	}

	return r0
}
