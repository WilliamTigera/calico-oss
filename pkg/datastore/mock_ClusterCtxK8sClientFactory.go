// Code generated by mockery v2.3.0. DO NOT EDIT.

package datastore

import (
	mock "github.com/stretchr/testify/mock"
	auth "github.com/tigera/lma/pkg/auth"

	rest "k8s.io/client-go/rest"
)

// MockClusterCtxK8sClientFactory is an autogenerated mock type for the ClusterCtxK8sClientFactory type
type MockClusterCtxK8sClientFactory struct {
	mock.Mock
}

// ClientSetForCluster provides a mock function with given fields: clusterID
func (_m *MockClusterCtxK8sClientFactory) ClientSetForCluster(clusterID string) (ClientSet, error) {
	ret := _m.Called(clusterID)

	var r0 ClientSet
	if rf, ok := ret.Get(0).(func(string) ClientSet); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClientSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RBACAuthorizerForCluster provides a mock function with given fields: clusterId
func (_m *MockClusterCtxK8sClientFactory) RBACAuthorizerForCluster(clusterId string) (auth.RBACAuthorizer, error) {
	ret := _m.Called(clusterId)

	var r0 auth.RBACAuthorizer
	if rf, ok := ret.Get(0).(func(string) auth.RBACAuthorizer); ok {
		r0 = rf(clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.RBACAuthorizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestConfigForCluster provides a mock function with given fields: clusterID
func (_m *MockClusterCtxK8sClientFactory) RestConfigForCluster(clusterID string) *rest.Config {
	ret := _m.Called(clusterID)

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func(string) *rest.Config); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}
