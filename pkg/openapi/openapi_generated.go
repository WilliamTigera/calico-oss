// +build !ignore_autogenerated

// Copyright (c) 2019 Tigera, Inc. All rights reserved.

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	numorstring "github.com/projectcalico/libcalico-go/lib/numorstring"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeer": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPPeer contains information about a BGP peer resource that is a peer of a Calico compute node.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Metadata for a BGPPeer.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification for a BGPPeer.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerSpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPPeerList contains a list of BGP Peer resources.  List types are returned from List() enumerations in the client interface.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeer"),
										},
									},
								},
							},
						},
					},
					Required: []string{"TypeMetadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeer", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPPeerMetadata contains the metadata for a BGPPeer resource.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
						"scope": {
							SchemaProps: spec.SchemaProps{
								Description: "The scope of the peer.  This may be global or node.  A global peer is a BGP device that peers with all Calico nodes.  A node peer is a BGP device that peers with the specified Calico node (specified by the node hostname).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"node": {
							SchemaProps: spec.SchemaProps{
								Description: "The node name identifying the Calico node instance that is peering with this peer. When modifying a BGP peer, the node must be specified when the scope is `node`, and must be omitted when the scope is `global`.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"peerIP": {
							SchemaProps: spec.SchemaProps{
								Description: "The IP address of the peer.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
							},
						},
					},
					Required: []string{"ObjectMetadata", "scope", "peerIP"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata", "github.com/projectcalico/libcalico-go/lib/net.IP"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPPeerSpec contains the specification for a BGPPeer resource.",
					Properties: map[string]spec.Schema{
						"asNumber": {
							SchemaProps: spec.SchemaProps{
								Description: "The AS Number of the peer.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
					Required: []string{"asNumber"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CalicoAPIConfig contains the connection information for a Calico CalicoAPIConfig resource",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigSpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CalicoAPIConfigMetadata contains the metadata for a Calico CalicoAPIConfig resource.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
					},
					Required: []string{"ObjectMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CalicoAPIConfigSpec contains the specification for a Calico CalicoAPIConfig resource.",
					Properties: map[string]spec.Schema{
						"datastoreType": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"EtcdConfig": {
							SchemaProps: spec.SchemaProps{
								Description: "Inline the ectd config fields",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EtcdConfig"),
							},
						},
						"KubeConfig": {
							SchemaProps: spec.SchemaProps{
								Description: "Inline the k8s config fields.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.KubeConfig"),
							},
						},
					},
					Required: []string{"datastoreType", "EtcdConfig", "KubeConfig"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.EtcdConfig", "github.com/projectcalico/libcalico-go/lib/apis/v1.KubeConfig"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"protocol": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"name", "protocol", "port"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.EntityRule": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "An EntityRule is a sub-component of a Rule comprising the match criteria specific to a particular entity (that is either the source or destination).\n\nA source EntityRule matches the source endpoint and originating traffic. A destination EntityRule matches the destination endpoint and terminating traffic.",
					Properties: map[string]spec.Schema{
						"tag": {
							SchemaProps: spec.SchemaProps{
								Description: "Tag is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) endpoints that have profiles with the given tag in them.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"net": {
							SchemaProps: spec.SchemaProps{
								Description: "Net is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in the given subnet. Deprecated: superseded by the Nets field.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
							},
						},
						"nets": {
							SchemaProps: spec.SchemaProps{
								Description: "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label “my_label”.\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label “my_label”.\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ports": {
							SchemaProps: spec.SchemaProps{
								Description: "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"tcp\" or \"udp\".",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
										},
									},
								},
							},
						},
						"notTag": {
							SchemaProps: spec.SchemaProps{
								Description: "NotTag is the negated version of the Tag field.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"notNet": {
							SchemaProps: spec.SchemaProps{
								Description: "NotNet is an optional field that restricts the rule to only apply to traffic that does not originate from (or terminate at) an IP address in the given subnet. Deprecated: superseded by NotNets.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
							},
						},
						"notNets": {
							SchemaProps: spec.SchemaProps{
								Description: "NotNets is an optional field that restricts the rule to only apply to traffic that does not originate from (or terminate at) an IP address in any of the given subnets.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
										},
									},
								},
							},
						},
						"notSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"notPorts": {
							SchemaProps: spec.SchemaProps{
								Description: "NotPorts is the negated version of the Ports field.\n\nSince only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"tcp\" or \"udp\".",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/net.IPNet", "github.com/projectcalico/libcalico-go/lib/numorstring.Port"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.EtcdConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"etcdScheme": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdAuthority": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdEndpoints": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdDiscoverySrv": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdUsername": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdPassword": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdKeyFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdCertFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdCACertFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"etcdScheme", "etcdAuthority", "etcdEndpoints", "etcdDiscoverySrv", "etcdUsername", "etcdPassword", "etcdKeyFile", "etcdCertFile", "etcdCACertFile"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpoint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostEndpoint contains information about a “bare-metal” interfaces attached to the host that is running Calico’s agent, Felix. By default, Calico doesn’t apply any policy to such interfaces.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointSpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostEndpointList contains a list of Host Endpoint resources.  List types are returned from List() enumerations in the client interface.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpoint"),
										},
									},
								},
							},
						},
					},
					Required: []string{"TypeMetadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpoint", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostEndpointMetadata contains the Metadata for a HostEndpoint resource.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the endpoint.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"node": {
							SchemaProps: spec.SchemaProps{
								Description: "The node name identifying the Calico node instance.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"labels": {
							SchemaProps: spec.SchemaProps{
								Description: "The labels applied to the host endpoint.  It is expected that many endpoints share the same labels. For example, they could be used to label all “production” workloads with “deployment=prod” so that security policy can be applied to production workloads.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"ObjectMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostEndpointSpec contains the specification for a HostEndpoint resource.",
					Properties: map[string]spec.Schema{
						"interfaceName": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the linux interface to apply policy to; for example “eth0”. If \"InterfaceName\" is not present then at least one expected IP must be specified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"expectedIPs": {
							SchemaProps: spec.SchemaProps{
								Description: "The expected IP addresses (IPv4 and IPv6) of the endpoint. If \"InterfaceName\" is not present, Calico will look for an interface matching any of the IPs in the list and apply policy to that.\n\nNote:\n\tWhen using the selector|tag match criteria in an ingress or egress security Policy\n\tor Profile, Calico converts the selector into a set of IP addresses. For host\n\tendpoints, the ExpectedIPs field is used for that purpose. (If only the interface\n\tname is specified, Calico does not learn the IPs of the interface for use in match\n\tcriteria.)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
										},
									},
								},
							},
						},
						"profiles": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of identifiers of security Profile objects that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"ports": {
							SchemaProps: spec.SchemaProps{
								Description: "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort", "github.com/projectcalico/libcalico-go/lib/net.IP"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.ICMPFields": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ICMPFields defines structure for ICMP and NotICMP sub-struct for ICMP code and type",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"code": {
							SchemaProps: spec.SchemaProps{
								Description: "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel’s iptables firewall, which Calico uses to enforce the rule.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "When enabled is true, ipip tunneling will be used to deliver packets to destinations within this pool.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"mode": {
							SchemaProps: spec.SchemaProps{
								Description: "The IPIP mode.  This can be one of \"always\" or \"cross-subnet\".  A mode of \"always\" will also use IPIP tunneling for routing to destination IP addresses within this pool.  A mode of \"cross-subnet\" will only use IPIP tunneling when the destination node is on a different subnet to the originating node.  The default value (if not specified) is \"always\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPNAT": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPNat contains a single NAT mapping for a WorkloadEndpoint resource.",
					Properties: map[string]spec.Schema{
						"internalIP": {
							SchemaProps: spec.SchemaProps{
								Description: "The internal IP address which must be associated with the owning endpoint via the configured IPNetworks for the endpoint.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
							},
						},
						"externalIP": {
							SchemaProps: spec.SchemaProps{
								Description: "The external IP address.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
							},
						},
					},
					Required: []string{"internalIP", "externalIP"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/net.IP"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPool": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPPool contains the details of a Calico IP pool resource. A pool resource is used by Calico in two ways:\n\t- to provide a set of IP addresses from which Calico IPAM assigns addresses\n\t  for workloads.\n\t- to provide configuration specific to IP address range, such as configuration\n\t  for the BGP daemon (e.g. when to use a GRE tunnel to encapsulate packets\n\t  between compute hosts).",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolSpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPPoolList contains a list of IP pool resources.  List types are returned from List() enumerations in the client interface.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPPool"),
										},
									},
								},
							},
						},
					},
					Required: []string{"TypeMetadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPool", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPPoolMetadata contains the metadata for an IP pool resource.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
						"cidr": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
							},
						},
					},
					Required: []string{"ObjectMetadata", "cidr"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata", "github.com/projectcalico/libcalico-go/lib/net.IPNet"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPPoolSpec contains the specification for an IP pool resource.",
					Properties: map[string]spec.Schema{
						"ipip": {
							SchemaProps: spec.SchemaProps{
								Description: "Contains configuration for ipip tunneling for this pool. If not specified, then ipip tunneling is disabled for this pool.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration"),
							},
						},
						"nat-outgoing": {
							SchemaProps: spec.SchemaProps{
								Description: "When nat-outgoing is true, packets sent from Calico networked containers in this pool to destinations outside of this pool will be masqueraded.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"disabled": {
							SchemaProps: spec.SchemaProps{
								Description: "When disabled is true, Calico IPAM will not assign addresses from this pool.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.KubeConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kubeconfig": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"k8sAPIEndpoint": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"k8sKeyFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"k8sCertFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"k8sCAFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"k8sAPIToken": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"k8sInsecureSkipTLSVerify": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"k8sDisableNodePoll": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
					Required: []string{"kubeconfig", "k8sAPIEndpoint", "k8sKeyFile", "k8sCertFile", "k8sCAFile", "k8sAPIToken", "k8sInsecureSkipTLSVerify", "k8sDisableNodePoll"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Node": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Node contains the details of a node resource which contains the configuration for a Calico node instance running on a compute host.\n\nIn addition to creating a Node resource through calicoctl or the Calico API, the Calico node instance must also be running on the specific host and should be provided the same Name as that configured on the Node resource.  Note that, by default, the Calico node instance uses the hostname of the compute host when it is not explicitly specified - in this case, the equivalent Node resource should be created using the same hostname as the Name of the Node resource.\n\nOperations on the Node resources is expected to be required when adding a new host into a Calico network, and when removing a host from a Calico network, and occasionally to modify certain configuration.  Care should be taken when operating on Node resources: deleting a Node resource will remove all Node specific data.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.NodeMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.NodeSpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.NodeSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeBGPSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeSpec contains the specification for a Calico Node resource.",
					Properties: map[string]spec.Schema{
						"asNumber": {
							SchemaProps: spec.SchemaProps{
								Description: "The AS Number of the node.  If this is not specified, the global default value will be used.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"ipv4Address": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv4Address is the IPv4 address and network of this node.  At least one of the IPv4 and IPv6 addresses should be specified.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
							},
						},
						"ipv6Address": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv6Address is the IPv6 address and network of this node.  At least one of the IPv4 and IPv6 addresses should be specified.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/net.IPNet"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A NodeList contains a list of Node resources.  List types are returned from List() enumerations on the client interface.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Node"),
										},
									},
								},
							},
						},
					},
					Required: []string{"TypeMetadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.Node", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeMetadata contains the metadata for a Calico Node resource.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"ObjectMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeSpec contains the specification for a Calico Node resource.",
					Properties: map[string]spec.Schema{
						"bgp": {
							SchemaProps: spec.SchemaProps{
								Description: "BGP configuration for this node.  If this omitted, the Calico node will be run in policy-only mode.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.NodeBGPSpec"),
							},
						},
						"orchRefs": {
							SchemaProps: spec.SchemaProps{
								Description: "OrchRefs for this node.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.OrchRef"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeBGPSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1.OrchRef"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.OrchRef": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "OrchRef is used to correlate a Calico node to its corresponding representation in a given orchestrator",
					Properties: map[string]spec.Schema{
						"nodeName": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeName represents the name for this node according to the orchestrator.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"orchestrator": {
							SchemaProps: spec.SchemaProps{
								Description: "Orchestrator represents the orchestrator using this node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"orchestrator"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Policy": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Policy contains information about a tiered security Policy resource.  This contains a set of security rules to apply.  Security policies allow a selector-based security model which can override the security profiles directly referenced by an endpoint.\n\nEach policy must do one of the following:\n\n \t- Match the packet and apply a “next-tier” action; this skips the rest of the tier, deferring\n       to the next tier (or the explicit profiles if this is the last tier.\n \t- Match the packet and apply an “allow” action; this immediately accepts the packet, skipping\n       all further tiers and profiles. This is not recommended in general, because it prevents\n       further policy from being executed.\n\t- Match the packet and apply a “deny” action; this drops the packet immediately, skipping all\n       further tiers and profiles.\n\t- Fail to match the packet; in which case the packet proceeds to the next policy in the tier.\n       If there are no more policies in the tier then the packet is dropped.\n\nNote:\n\tIf no policies in a tier match an endpoint then the packet skips the tier completely. The\n\t“default deny” behavior described above only applies if some of the policies in a tier match\n\tthe endpoint.\n\nCalico implements the security policy for each endpoint individually and only the policies that have matching selectors are implemented. This ensures that the number of rules that actually need to be inserted into the kernel is proportional to the number of local endpoints rather than the total amount of policy. If no policies in a tier match a given endpoint then that tier is skipped.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.PolicyMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.PolicySpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.PolicyMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.PolicySpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.PolicyList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PolicyList contains a list of selector-based security Policy resources.  List types are returned from List() enumerations on the client interface.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Policy"),
										},
									},
								},
							},
						},
					},
					Required: []string{"TypeMetadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.Policy", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.PolicyMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PolicyMetadata contains the metadata for a selector-based security Policy resource.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the selector-based security policy.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tier": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the tier that this policy belongs to.  If this is omitted, the default tier (name is \"default\") is assumed.  The specified tier must exist in order to create security policies within the tier, the \"default\" tier is created automatically if it does not exist, this means for deployments requiring only a single Tier, the tier name may be omitted on all policy management requests.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"annotations": {
							SchemaProps: spec.SchemaProps{
								Description: "Arbitrary key-value information to be used by clients.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"ObjectMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.PolicySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PolicySpec contains the specification for a selector-based security Policy resource.",
					Properties: map[string]spec.Schema{
						"order": {
							SchemaProps: spec.SchemaProps{
								Description: "Order is an optional field that specifies the order in which the policy is applied within a given tier.  Policies with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order and within the same Tier will be applied in alphanumerical order based on the Policy \"Name\".",
								Type:        []string{"number"},
								Format:      "double",
							},
						},
						"ingress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"),
										},
									},
								},
							},
						},
						"egress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"),
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "The selector is an expression used to pick pick out the endpoints that the policy should be applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   ->  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -> True if that label is present\n\t! expr -> negation of expr\n\texpr && expr  -> Short-circuit and\n\texpr || expr  -> Short-circuit or\n\t( expr ) -> parens for grouping\n\tall() or the empty selector -> matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" && deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"doNotTrack": {
							SchemaProps: spec.SchemaProps{
								Description: "DoNotTrack indicates whether packets matched by the rules in this policy should go through the data plane's connection tracking, such as Linux conntrack.  If True, the rules in this policy are applied before any data plane connection tracking, and packets allowed by this policy are marked as not to be tracked.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"preDNAT": {
							SchemaProps: spec.SchemaProps{
								Description: "PreDNAT indicates to apply the rules in this policy before any DNAT.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"types": {
							SchemaProps: spec.SchemaProps{
								Description: "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what IngressRules and EgressRules are present in the policy.  The default is:\n\n- [ PolicyTypeIngress ], if there are no EgressRules (including the case where there are\n  also no IngressRules)\n\n- [ PolicyTypeEgress ], if there are EgressRules but no IngressRules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both IngressRules and EgressRules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty or nil.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"selector"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Profile": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Profile contains the details a security profile resource.  A profile is set of security rules to apply on an endpoint.  An endpoint (either a host endpoint or an endpoint on a workload) can reference zero or more profiles.  The profile rules are applied directly to the endpoint *after* the selector-based security policy has been applied, and in the order the profiles are declared on the endpoint.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileSpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A ProfileList contains a list of security Profile resources.  List types are returned from List() enumerations on the client interface.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Profile"),
										},
									},
								},
							},
						},
					},
					Required: []string{"TypeMetadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.Profile", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ProfileMetadata contains the metadata for a security Profile resource.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the endpoint.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tags": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of tags that are applied to each endpoint that references this profile.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"labels": {
							SchemaProps: spec.SchemaProps{
								Description: "The labels to apply to each endpoint that references this profile.  It is expected that many endpoints share the same labels. For example, they could be used to label all “production” workloads with “deployment=prod” so that security policy can be applied to production workloads.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"ObjectMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ProfileSpec contains the specification for a security Profile resource.",
					Properties: map[string]spec.Schema{
						"ingress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"),
										},
									},
								},
							},
						},
						"egress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Rule": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching.\n\nEach positive match criteria has a negated version, prefixed with ”Not”. All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.",
					Properties: map[string]spec.Schema{
						"action": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"ipVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "IPVersion is an optional field that restricts the rule to only match a specific IP version.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"protocol": {
							SchemaProps: spec.SchemaProps{
								Description: "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols).\n\nMust be one of these string values: \"tcp\", \"udp\", \"icmp\", \"icmpv6\", \"sctp\", \"udplite\" or an integer in the range 1-255.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
							},
						},
						"icmp": {
							SchemaProps: spec.SchemaProps{
								Description: "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"icmp\" or \"icmpv6\".",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.ICMPFields"),
							},
						},
						"notProtocol": {
							SchemaProps: spec.SchemaProps{
								Description: "NotProtocol is the negated version of the Protocol field.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
							},
						},
						"notICMP": {
							SchemaProps: spec.SchemaProps{
								Description: "NotICMP is the negated version of the ICMP field.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.ICMPFields"),
							},
						},
						"source": {
							SchemaProps: spec.SchemaProps{
								Description: "Source contains the match criteria that apply to source entity.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EntityRule"),
							},
						},
						"destination": {
							SchemaProps: spec.SchemaProps{
								Description: "Destination contains the match criteria that apply to destination entity.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EntityRule"),
							},
						},
					},
					Required: []string{"action"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.EntityRule", "github.com/projectcalico/libcalico-go/lib/apis/v1.ICMPFields", "github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Tier": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Tier contains the details of a security policy tier resource.  A tier contains a set of policies that are applied to packets. Multiple tiers may be created and each tier is applied in the order specified in the tier specification.\n\nSee Policy for more information.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.TierMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.TierSpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.TierMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.TierSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.TierList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A TierList contains a list of tier resources.  List types are returned from List() enumerations in the client interface.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Tier"),
										},
									},
								},
							},
						},
					},
					Required: []string{"TypeMetadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.Tier", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.TierMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TierMetadata contains the metadata for a security policy Tier.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"ObjectMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.TierSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TierSpec contains the specification for a security policy Tier.",
					Properties: map[string]spec.Schema{
						"order": {
							SchemaProps: spec.SchemaProps{
								Description: "Order is an optional field that specifies the order in which the tier is applied. Tiers with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the tier will be applied last.  Tiers with identical order will be applied in alphanumerical order based on the Tier \"Name\".",
								Type:        []string{"number"},
								Format:      "double",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpoint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointMetadata"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointSpec"),
							},
						},
					},
					Required: []string{"TypeMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "WorkloadEndpointList contains a list of Workload Endpoint resources.  List types are returned from List() enumerations in the client interface.",
					Properties: map[string]spec.Schema{
						"TypeMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpoint"),
										},
									},
								},
							},
						},
					},
					Required: []string{"TypeMetadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpoint", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointMetadata": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "WorkloadEndpointMetadata contains the Metadata for a WorkloadEndpoint resource.",
					Properties: map[string]spec.Schema{
						"ObjectMetadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the endpoint.  This may be omitted on a create, in which case an endpoint ID will be automatically created, and the endpoint ID will be included in the response.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"workload": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the workload.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"orchestrator": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the orchestrator.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"node": {
							SchemaProps: spec.SchemaProps{
								Description: "The node name identifying the Calico node instance.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"activeInstanceID": {
							SchemaProps: spec.SchemaProps{
								Description: "ActiveInstanceID is an optional field that orchestrators may use to store additional information about the endpoint. The primary use case is to store a unique identifier for the active instance of a container. For example, with Calico CNI, a re-spawned container may use the same endpoint indexing (Node, Orchestrator, Workload, Endpoint) for the new container as for the old - the ActiveInstanceID is used to store an additional unique ID which the CNI plugin uses to determine whether the DEL operation needs to delete the Calico WorkloadEndpoint. This field is not an index field of the WorkloadEndpoint resource.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"labels": {
							SchemaProps: spec.SchemaProps{
								Description: "The labels applied to the workload endpoint.  It is expected that many endpoints share the same labels. For example, they could be used to label all “production” workloads with “deployment=prod” so that security policy can be applied to production workloads.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"ObjectMetadata"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "WorkloadEndpointMetadata contains the specification for a WorkloadEndpoint resource.",
					Properties: map[string]spec.Schema{
						"ipNetworks": {
							SchemaProps: spec.SchemaProps{
								Description: "IPNetworks is a list of subnets allocated to this endpoint. IP packets will only be allowed to leave this interface if they come from an address in one of these subnets.\n\nCurrently only /32 for IPv4 and /128 for IPv6 networks are supported.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
										},
									},
								},
							},
						},
						"ipNATs": {
							SchemaProps: spec.SchemaProps{
								Description: "IPNATs is a list of 1:1 NAT mappings to apply to the endpoint. Inbound connections to the external IP will be forwarded to the internal IP. Connections initiated from the internal IP will not have their source address changed, except when an endpoint attempts to connect one of its own external IPs. Each internal IP must be associated with the same endpoint via the configured IPNetworks.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPNAT"),
										},
									},
								},
							},
						},
						"ipv4Gateway": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv4Gateway is the gateway IPv4 address for traffic from the workload.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
							},
						},
						"ipv6Gateway": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv6Gateway is the gateway IPv6 address for traffic from the workload.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
							},
						},
						"profiles": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of security Profile resources that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"interfaceName": {
							SchemaProps: spec.SchemaProps{
								Description: "InterfaceName the name of the Linux interface on the host: for example, tap80.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"mac": {
							SchemaProps: spec.SchemaProps{
								Description: "MAC is the MAC address of the endpoint interface.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.MAC"),
							},
						},
						"ports": {
							SchemaProps: spec.SchemaProps{
								Description: "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort", "github.com/projectcalico/libcalico-go/lib/apis/v1.IPNAT", "github.com/projectcalico/libcalico-go/lib/net.IP", "github.com/projectcalico/libcalico-go/lib/net.IPNet", "github.com/projectcalico/libcalico-go/lib/net.MAC"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.AllocationAttribute": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"handle_id": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"secondary": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"handle_id", "secondary"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.AuditEventsSelection": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "AuditEventsSelection defines which set of resources should be audited.",
					Properties: map[string]spec.Schema{
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Resources lists the resources that will be included in the audit logs in the ReportData.  Blank fields in the listed ResourceID structs are treated as wildcards.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.AuditResource"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.AuditResource"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.AuditResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "AuditResource is used to filter Audit events in the Report configuration.\n\nAn empty field value indicates a wildcard. For example, if Resource is set to \"networkpolicies\" and all other fields are blank then this filter would include all NetworkPolicy resources across all namespaces, and would include both Calico and Kubernetes resource types.",
					Properties: map[string]spec.Schema{
						"resource": {
							SchemaProps: spec.SchemaProps{
								Description: "The resource type. The format is the lowercase plural as used in audit event selection and RBAC configuration.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiGroup": {
							SchemaProps: spec.SchemaProps{
								Description: "APIGroup is the name of the API group that contains the referred object (e.g. projectcalico.org).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion is the version of the API group that contains the referred object (e.g. v3).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The resource name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Description: "The resource namespace.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.AuditSummary": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"numTotal": {
							SchemaProps: spec.SchemaProps{
								Description: "The total number of in-scope audit logs.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numCreate": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of in-scope audit log create events.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numModify": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of in-scope audit log patch or replace events.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numDelete": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of in-scope audit log delete events.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPConfiguration contains the configuration for any BGP routing.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the BGPConfiguration.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPConfigurationList contains a list of BGPConfiguration resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfiguration"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfiguration", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPConfigurationSpec contains the values of the BGP configuration.",
					Properties: map[string]spec.Schema{
						"logSeverityScreen": {
							SchemaProps: spec.SchemaProps{
								Description: "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: INFO]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodeToNodeMeshEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeToNodeMeshEnabled sets whether full node to node BGP mesh is enabled. [Default: true]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"asNumber": {
							SchemaProps: spec.SchemaProps{
								Description: "ASNumber is the default AS number used by a node. [Default: 64512]",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"extensions": {
							SchemaProps: spec.SchemaProps{
								Description: "Extensions is a mapping of keys to values that can be used in custom BGP templates",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeer": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPPeer contains information about a BGPPeer resource that is a peer of a Calico compute node.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the BGPPeer.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPPeerList contains a list of BGPPeer resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeer"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeer", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPPeerSpec contains the specification for a BGPPeer resource.",
					Properties: map[string]spec.Schema{
						"node": {
							SchemaProps: spec.SchemaProps{
								Description: "The node name identifying the Calico node instance that is peering with this peer. If this is not set, this represents a global peer, i.e. a peer that peers with every node in the deployment.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"peerIP": {
							SchemaProps: spec.SchemaProps{
								Description: "The IP address of the peer.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"asNumber": {
							SchemaProps: spec.SchemaProps{
								Description: "The AS Number of the peer.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"extensions": {
							SchemaProps: spec.SchemaProps{
								Description: "Extensions is a mapping of keys to values that can be used in custom BGP templates",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector for the nodes that should have this peering.  When this is set, the Node field must be empty.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"peerSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector for the remote nodes to peer with.  When this is set, the PeerIP and ASNumber fields must be empty.  For each peering between the local node and selected remote nodes, we configure an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified, and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address specified.  The remote AS number comes from the remote node’s NodeBGPSpec.ASNumber, or the global default if that is not set.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"peerIP", "asNumber"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinity": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BlockAffinity maintains a block affinity's state",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the BlockAffinity.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinitySpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinitySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinityList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BlockAffinityList contains a list of BlockAffinity resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinity"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinity", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinitySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BlockAffinitySpec contains the specification for a BlockAffinity resource.",
					Properties: map[string]spec.Schema{
						"state": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"node": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"cidr": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"deleted": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"state", "node", "cidr", "deleted"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkFilter": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkFilter provides filters for a set of benchmarks that match particular selection criteria.",
					Properties: map[string]spec.Schema{
						"benchmarkSelection": {
							SchemaProps: spec.SchemaProps{
								Description: "BenchmarkSelection specifies which benchmarks this filter applies to. If not specified, applies to all.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSelection"),
							},
						},
						"exclude": {
							SchemaProps: spec.SchemaProps{
								Description: "Exclude is an array of test indices to exclude from the report.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"include": {
							SchemaProps: spec.SchemaProps{
								Description: "Include is an array of test indices to show in the report. Is additive if IncludeUnscoredTests is true. Takes precedence over Exclude.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"exclude", "include"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSelection"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkNode": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkNode describes a CIS benchmarking result on a single node.",
					Properties: map[string]spec.Schema{
						"nodeName": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeName is the name of the node the this set of benchmark results is from.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubernetesVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "KubernetesVersion is the version of the kubelet running on this node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"benchmarksVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "BenchmarksVersion is the version of the benchmarks that ran on this node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"summary": {
							SchemaProps: spec.SchemaProps{
								Description: "Summary is a set of summary stats for this set of node-specific benchmarks.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkNodeSummary"),
							},
						},
						"results": {
							SchemaProps: spec.SchemaProps{
								Description: "Results is the detailed set of results for this set of node-specific benchmarks.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSectionResult"),
										},
									},
								},
							},
						},
					},
					Required: []string{"nodeName", "kubernetesVersion", "benchmarksVersion", "summary", "results"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkNodeSummary", "github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSectionResult"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkNodeSummary": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkNodeSummary keeps count of tests passed, failed, and marked as info on a single node. Also has a status field to describe whether it is in HIGH, MED, or LOW status (based on [high|med]Threshold).",
					Properties: map[string]spec.Schema{
						"status": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"totalPass": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"totalFail": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"totalInfo": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"total": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"status", "totalPass", "totalFail", "totalInfo", "total"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkParams": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkParams contains the parameters for configuring a CIS benchmark report.",
					Properties: map[string]spec.Schema{
						"includeUnscoredTests": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies if the report should also show results for scored/not-scored tests.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"numFailedTests": {
							SchemaProps: spec.SchemaProps{
								Description: "Configure the number of top failed tests to show up on the report.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"resultsFilters": {
							SchemaProps: spec.SchemaProps{
								Description: "Benchmark results filters. The first matching set of filters is applied to each set of benchmark results. If there are no matching filters, the full set of benchmark results will be included in the report.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkFilter"),
										},
									},
								},
							},
						},
						"highThreshold": {
							SchemaProps: spec.SchemaProps{
								Description: "Interpretted as a percentage to indicate at what levels of passing tests a node should be considered HIGH, MED, and LOW. - If >= HighThreshold flag as high - Otherwise, if > MedThreshold flag as med - Otherwise flag as low.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"medThreshold": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"includeUnscoredTests", "numFailedTests", "resultsFilters", "highThreshold", "medThreshold"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkFilter"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkResult": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkResult describes the result of a single CIS benchmark check.",
					Properties: map[string]spec.Schema{
						"testNumber": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"testDesc": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"testInfo": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"scored": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
					Required: []string{"testNumber", "testDesc", "testInfo", "status", "scored"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkResultCount": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkResultCount keeps track of how many nodes had a certain test result.",
					Properties: map[string]spec.Schema{
						"CISBenchmarkResult": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkResult"),
							},
						},
						"count": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"CISBenchmarkResult", "count"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkResult"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSectionResult": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkSectionResult describes the result of running the CIS benchmark on a single component.",
					Properties: map[string]spec.Schema{
						"status": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"section": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"desc": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"pass": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"fail": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"info": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"results": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkResult"),
										},
									},
								},
							},
						},
					},
					Required: []string{"status", "section", "desc", "pass", "fail", "info", "results"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkResult"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSelection": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkSelection selects a particular set of benchmarks.",
					Properties: map[string]spec.Schema{
						"kubernetesVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "KubernetesVersion is used select nodes that are running a specific version of kubelet. The full version need not be fully specified down to the patch level, in which case the significant parts of the version are matched. e.g. \"1.0\" will match versions \"1.0.1\" and \"1.0.2\" If not specified, matches all versions.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSummary": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CISBenchmarkSummary describes a CIS benchmarking result across an entire cluster.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"highCount": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"medCount": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"lowCount": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"type", "highCount", "medCount", "lowCount"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformation": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClusterInformation contains the cluster specific information.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the ClusterInformation.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformationSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformationList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClusterInformationList contains a list of ClusterInformation resources (even though there should only be one).",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformation"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformation", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClusterInformationSpec contains the values of describing the cluster.",
					Properties: map[string]spec.Schema{
						"clusterGUID": {
							SchemaProps: spec.SchemaProps{
								Description: "ClusterGUID is the GUID of the cluster",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterType": {
							SchemaProps: spec.SchemaProps{
								Description: "ClusterType describes the type of the cluster",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"calicoVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "CalicoVersion is the version of Calico that the cluster is running",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cnxVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "CNXVersion is the version of CNX that the cluster is running",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"datastoreReady": {
							SchemaProps: spec.SchemaProps{
								Description: "DatastoreReady is used during significant datastore migrations to signal to components such as Felix that it should wait before accessing the datastore.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"datastoreReady"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.CompletedReportJob": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CompletedReportJob augments the ReportJob with completion details.",
					Properties: map[string]spec.Schema{
						"start": {
							SchemaProps: spec.SchemaProps{
								Description: "The start time of the report.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"end": {
							SchemaProps: spec.SchemaProps{
								Description: "The end time of the report.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"job": {
							SchemaProps: spec.SchemaProps{
								Description: "A reference to the report creation job if known.",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
						"jobCompletionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "The time the report job completed.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"start", "end", "job"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"protocol": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"name", "protocol", "port"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportEndpoint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"endpoint": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID"),
							},
						},
						"ingressProtected": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic to this endpoint was always protected during the reporting interval.\n\nIngress protection is defined as denying ingress traffic unless explicitly whitelisted. This is translated as the endpoint having some explicit ingress policy applied to it.\n\nSource: Calculated from the set of ingress policies that apply to each endpoint.\n\nSet to: - false if there are no ingress policies applied to the endpoint at any point during the reporting interval. - true otherwise.\n\nNote: Policy is not inspected for protection bypass: for example match-all-and-allow rules which would effectively\n      short-circuit the default tier-drop behavior, in this case the match-all-and-allow would be considered to be\n      an explicit whitelist of all traffic. We could include simplistic all-match rules and check that they\n      don't result in an allow. To check for more circuitous match-all allows is much trickier (e.g. you have one\n      rule that allows for src!=1.2.3.0/24 and another rule that allows for src==1.2.3.0/24, which combined\n      is essentially an allow-all).",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"egressProtected": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether egress traffic to this endpoint was always protected during the reporting interval.\n\nEgress protection is defined as denying egress traffic unless explicitly whitelisted. This is translated as the endpoint having some explicit egress policy applied to it.\n\nSource: Calculated from the set of egress policies that apply to each endpoint.\n\nSet to: - false if there are no egress policies applied to the endpoint at any point during the reporting interval. - true otherwise.\n\nNote: Policy is not inspected for protection bypass: for example match-all-and-allow rules which would effectively\n      short-circuit the default tier-drop behavior, in this case the match-all-and-allow would be considered to be\n      an explicit whitelist of all traffic. We could include simplistic all-match rules and check that they\n      don't result in an allow. To check for more circuitous match-all allows is much trickier (e.g. you have one\n      rule that allows for src!=1.2.3.0/24 and another rule that allows for src==1.2.3.0/24, which combined\n      is essentially an allow-all). Similarly, policy that only contains pass rules would still count as being\n      protected.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"ingressFromInternet": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether the matching policy has any ingress allow rules from a public IP address (as defined by the complement of the private addresses; private addresses default to those defined in RFC 1918, but may also be configured separately).\n\nSource: Calculated from the policies applied to the endpoint. The ingress allow rules in each policy are checked\n        to determine if any CIDR specified in the rule, either directly or through a matching network set, is an\n        internet address. Endpoint addresses are not included - therefore ingress from a pod that has a public\n        IP address will not be considered as “from internet”.\n\nNote: This is a simplification since it does not examine the policies to determine if it's actually possible to\n      hit one of these allow rules (e.g. a previous rule may be a match-all-deny).",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"egressToInternet": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether the matching policy has any egress allow rules to a public IP address (as defined by the complement of the private addresses; private addresses default to those defined in RFC 1918, but may also be configured separately).\n\nSource: Calculated from the policies applied to the endpoint. The egress allow rules in each policy are checked\n        to determine if any CIDR specified in the rule, either directly or through a matching network set, is an\n        internet address. Endpoint addresses are not included - therefore egress to a pod that has a public\n        IP address will not be considered as “to internet”.\n\nNote 1: This is a simplification since it does not examine the policies to determine if it's actually possible to\n        hit one of these allow rules (e.g. a previous rule may be a match-all-deny).",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"ingressFromOtherNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether the matching policy has any ingress allow rules from another namespace.\n\nSource: Calculated from the policies applied to the endpoint.\n\nSet to true if: - this is a pod (i.e. namespaced) with an applied GlobalNetworkPolicy with an ingress allow rule with no CIDR match. - this is a pod with an applied NetworkPolicy with an ingress allow rule with a non-empty NamespaceSelector.\n\nNote: This is a simplification since it does not examine the policies to determine if it's actually possible to\n      hit one of these allow rules (e.g. a previous rule may be a match-all-deny, or endpoint selector may not\n      match any endpoints within the namespace).",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"egressToOtherNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether the matching policy has any egress allow rules to another namespace.\n\nSource: Calculated from the policies applied to the endpoint.\n\nSet to true if: - this is a pod endpoint (i.e. namespaced) matches a GlobalNetworkPolicy with an egress allow rule with no CIDR match. - this is a pod endpoint which matches a NetworkPolicy with an egress allow rule with a non-empty NamespaceSelector.\n\nNote: This is a simplification since it does not examine the policies to determine if it's actually possible to\n      hit one of these allow rules (e.g. a previous rule may be a match-all-deny, or endpoint selector may not\n      match any endpoints within the namespace).",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"envoyEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether this pod is envoy-enabled. This is simply an indicator of whether an Envoy container is running within the pod. Provided Istio is configured appropriately, this can provide a simplistic determination of whether the pod is mTLS enabled.\n\nSource: Pod spec.\n\nSet to: - true if envoy is running within the pod - false if envoy is not running within the pod",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"appliedPolicies": {
							SchemaProps: spec.SchemaProps{
								Description: "The set of policies that apply to an endpoint may change within the reporting interval, this is the superset of all policies that applied to the endpoint during that interval.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID"),
										},
									},
								},
							},
						},
						"services": {
							SchemaProps: spec.SchemaProps{
								Description: "The list of services that exposed this endpoint at any moment during the reporting interval.\n\nSource: Determined from the Kubernetes endpoints resource associated with the service.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID"),
										},
									},
								},
							},
						},
						"serviceAccount": {
							SchemaProps: spec.SchemaProps{
								Description: "The ServiceAccount configured on this endpoint.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"flowLogAggregationName": {
							SchemaProps: spec.SchemaProps{
								Description: "The flow log aggregation name. This is used to locate flow logs associated with this endpoint when flow log aggregation is turned on.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportFlow": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"source": {
							SchemaProps: spec.SchemaProps{
								Description: "The source of the flow log.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.FlowEndpoint"),
							},
						},
						"destination": {
							SchemaProps: spec.SchemaProps{
								Description: "The destination of the flow log.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.FlowEndpoint"),
							},
						},
					},
					Required: []string{"source", "destination"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.FlowEndpoint"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportNamespace": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID"),
							},
						},
						"ingressProtected": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic was protected for all endpoints within this namespace within the reporting interval. This is a summary of information contained in the endpoints data.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"egressProtected": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether egress traffic was protected for all endpoints within this namespace within the reporting interval. This is a summary of information contained in the endpoints data.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"ingressFromInternet": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic was allowed from the internet for any endpoint within this namespace within the reporting interval.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"egressToInternet": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic was allowed from the internet for any endpoint within this namespace within the reporting interval.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"ingressFromOtherNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic was allowed from another namespace for any endpoint within this namespace within the reporting interval.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"egressToOtherNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic was allowed from another namespace for any endpoint within this namespace within the reporting interval.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"envoyEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether envoy was enabled for all endpoints within this namespace within the reporting interval. This is a summary of information contained in the endpoints data.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportService": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"service": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID"),
							},
						},
						"ingressProtected": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic was protected for all endpoints within this namespace within the reporting interval. This is a summary of information contained in the endpoints data.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"ingressFromInternet": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic was allowed from the internet for any endpoint exposed by this service within the reporting interval.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"ingressFromOtherNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether ingress traffic was allowed from another namespace for any endpoint exposed by this service within the reporting interval.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"envoyEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether envoy was enabled for all endpoints that were exposed by this service within the reporting interval. This is a summary of information contained in the endpoints data.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsSelection": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EndpointsSelection is a set of selectors used to select the endpoints that are considered to be in-scope for the report. An empty selector is equivalent to all(). All three selectors are ANDed together.",
					Properties: map[string]spec.Schema{
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector, selects endpoints by endpoint labels. If omitted, all endpoints are included in the report data.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespaces": {
							SchemaProps: spec.SchemaProps{
								Description: "Namespace match restricts endpoint selection to those in the selected namespaces.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NamesAndLabelsMatch"),
							},
						},
						"serviceAccounts": {
							SchemaProps: spec.SchemaProps{
								Description: "ServiceAccount match restricts endpoint selection to those in the selected service accounts.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NamesAndLabelsMatch"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.NamesAndLabelsMatch"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsSummary": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "This tracks different statistics for Endpoints, Summary and Services.",
					Properties: map[string]spec.Schema{
						"numTotal": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the total number of in-scope endpoints.\n   Namespaces: the total number of namespaces containing in-scope endpoints.\n     Services: the total number of services containing in-scope endpoints.\n\nSource: Calculated from pod/wep, hep, namespace and service account labels.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numServiceAccounts": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the total number of service accounts for in-scope endpoints.\n   Namespaces: n/a.\n     Services: n/a.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numIngressProtected": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the number of in-scope endpoints that were ingress protected during the reporting interval.\n   Namespaces: the number of namespaces whose in-scope endpoints were ingress protected during\n               the reporting interval.\n     Services: the number of services whose in-scope endpoints were ingress protected during the reporting\n               interval.\n\nSee below for defn of ingress-protected.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numEgressProtected": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the number of in-scope endpoints that were egress protected during the reporting interval.\n   Namespaces: the number of namespaces whose in-scope endpoints were egress protected during the reporting\n               interval.\n\nSee below for defn of egress-protected.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numIngressFromInternet": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the number of in-scope endpoints whose policy would allow ingress traffic from the Internet\n               for *any* period within the reporting interval.\n               (See below for how this is calculated for an endpoint.)\n   Namespaces: the number of namespaces that contained in-scope endpoints that would allow ingress traffic\n               from the Internet for *any* period within the reporting interval.\n     Services: the number of services that contained in-scope endpoints that would allow ingress traffic\n               from the Internet for *any* period within the reporting interval.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numEgressToInternet": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the number of in-scope endpoints whose policy would allow egress traffic to the Internet\n               for *any* period within the reporting interval.\n               (See below for how this is calculated for an endpoint.)\n   Namespaces: the number of namespaces that contained in-scope endpoints that would allow egress traffic\n               to the Internet for *any* period within the reporting interval.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numIngressFromOtherNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the number of in-scope endpoints whose policy would allow ingress traffic from a\n               different namespace for *any* period within the reporting interval.\n               (See below for how this is calculated for an endpoint.)\n   Namespaces: the number of namespaces that contained in-scope endpoints that would allow ingress\n               traffic from another namespace for *any* period within the reporting interval.\n     Services: the number of services that contained in-scope endpoints that would allow ingress\n               traffic from another namespace for *any* period within the reporting interval.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numEgressToOtherNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the number of in-scope endpoints whose policy would allow ingress traffic from\n               a different namespace for *any* period within the reporting interval.\n               (See below for how this is calculated for an endpoint.)\n   Namespaces: the number of namespaces that contained in-scope endpoints that would allow egress\n               traffic to another namespace for *any* period within the reporting interval.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numEnvoyEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "For endpoints: the number of in-scope endpoints that were envoy-enabled within the reporting interval.\n   Namespaces: the number of namespaces whose in-scope endpoints were always Envoy-enabled\n     Services: the number of services whose in-scope endpoints were always Envoy-enabled\n\nSee below for defn of envoy-enabled",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EntityRule": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "An EntityRule is a sub-component of a Rule comprising the match criteria specific to a particular entity (that is either the source or destination).\n\nA source EntityRule matches the source endpoint and originating traffic. A destination EntityRule matches the destination endpoint and terminating traffic.",
					Properties: map[string]spec.Schema{
						"nets": {
							SchemaProps: spec.SchemaProps{
								Description: "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label “my_label”.\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label “my_label”.\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespaceSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and Selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule.\n\nFor NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy.\n\nFor GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ports": {
							SchemaProps: spec.SchemaProps{
								Description: "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
										},
									},
								},
							},
						},
						"domains": {
							SchemaProps: spec.SchemaProps{
								Description: "Domains is an optional field, valid for egress Allow rules only, that restricts the rule to apply only to traffic to one of the specified domains.  If this field is specified, Action must be Allow, and Nets and Selector must both be left empty.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"notNets": {
							SchemaProps: spec.SchemaProps{
								Description: "NotNets is the negated version of the Nets field.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"notSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"notPorts": {
							SchemaProps: spec.SchemaProps{
								Description: "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
										},
									},
								},
							},
						},
						"serviceAccounts": {
							SchemaProps: spec.SchemaProps{
								Description: "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountMatch"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountMatch", "github.com/projectcalico/libcalico-go/lib/numorstring.Port"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ErrorCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"type", "message"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EtcdConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"etcdEndpoints": {
							SchemaProps: spec.SchemaProps{
								Description: "A comma separated list of etcd endpoints. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdUsername": {
							SchemaProps: spec.SchemaProps{
								Description: "User name for RBAC. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdPassword": {
							SchemaProps: spec.SchemaProps{
								Description: "Password for the given user name. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdKeyFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Path to the etcd key file. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdCertFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Path to the etcd client certificate. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdCACertFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Path to the etcd Certificate Authority file. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Felix Configuration contains the configuration for Felix.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the FelixConfiguration.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfigurationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfigurationSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfigurationList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "FelixConfigurationList contains a list of FelixConfiguration resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfiguration"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfiguration", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfigurationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "FelixConfigurationSpec contains the values of the Felix configuration.",
					Properties: map[string]spec.Schema{
						"useInternalDataplaneDriver": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"dataplaneDriver": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"ipv6Support": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"ignoreLooseRPF": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"routeRefreshInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "RouterefreshInterval is the period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico’s rules. Set to 0 to disable route refresh. [Default: 90s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"iptablesRefreshInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "IptablesRefreshInterval is the period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico’s rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage. [Default: 10s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"iptablesPostWriteCheckInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "IptablesPostWriteCheckInterval is the period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn’t respect the iptables lock. [Default: 1s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"iptablesLockFilePath": {
							SchemaProps: spec.SchemaProps{
								Description: "IptablesLockFilePath is the location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix’s container at a different path). [Default: /run/xtables.lock]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"iptablesLockTimeout": {
							SchemaProps: spec.SchemaProps{
								Description: "IptablesLockTimeout is the time that Felix will wait for the iptables lock, or 0, to disable. To use this feature, Felix must share the iptables lock file with all other processes that also take the lock. When running Felix inside a container, this requires the /run directory of the host to be mounted into the calico/node or calico/felix container. [Default: 0s disabled]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"iptablesLockProbeInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "IptablesLockProbeInterval is the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU. [Default: 50ms]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"ipsetsRefreshInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "IpsetsRefreshInterval is the period at which Felix re-checks all iptables state to ensure that no other process has accidentally broken Calico’s rules. Set to 0 to disable iptables refresh. [Default: 90s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"maxIpsetSize": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"XDPRefreshInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "XDPRefreshInterval is the period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh. [Default: 90s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"netlinkTimeout": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"metadataAddr": {
							SchemaProps: spec.SchemaProps{
								Description: "MetadataAddr is the IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case insensitive) means that Felix should not set up any NAT rule for the metadata path. [Default: 127.0.0.1]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadataPort": {
							SchemaProps: spec.SchemaProps{
								Description: "MetadataPort is the port of the metadata server. This, combined with global.MetadataAddr (if not ‘None’), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed [Default: 8775].",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"openstackRegion": {
							SchemaProps: spec.SchemaProps{
								Description: "OpenstackRegion is the name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node. [Default: Empty]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"interfacePrefix": {
							SchemaProps: spec.SchemaProps{
								Description: "InterfacePrefix is the interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the ‘cali’ value, and our OpenStack integration sets the ‘tap’ value. [Default: cali]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"interfaceExclude": {
							SchemaProps: spec.SchemaProps{
								Description: "InterfaceExclude is a comma-separated list of interfaces that Felix should exclude when monitoring for host endpoints. The default value ensures that Felix ignores Kubernetes' IPVS dummy interface, which is used internally by kube-proxy. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with '/'. For example having values '/^kube/,veth1' will exclude all interfaces that begin with 'kube' and also the interface 'veth1'. [Default: kube-ipvs0]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"chainInsertMode": {
							SchemaProps: spec.SchemaProps{
								Description: "ChainInsertMode controls whether Felix hooks the kernel’s top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico’s rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed. [Default: insert]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"defaultEndpointToHostAction": {
							SchemaProps: spec.SchemaProps{
								Description: "DefaultEndpointToHostAction controls what happens to traffic that goes from a workload endpoint to the host itself (after the traffic hits the endpoint egress policy). By default Calico blocks traffic from workload endpoints to the host itself with an iptables “DROP” action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables “INPUT” chain; Calico will insert its rules at the top of that chain, then “RETURN” packets to the “INPUT” chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy. [Default: Drop]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"iptablesFilterAllowAction": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"iptablesMangleAllowAction": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logPrefix": {
							SchemaProps: spec.SchemaProps{
								Description: "LogPrefix is the log prefix that Felix uses when rendering LOG rules. [Default: calico-packet]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"logDropActionOverride": {
							SchemaProps: spec.SchemaProps{
								Description: "LogDropActionOverride specifies whether or not to include the DropActionOverride in the logs when it is triggered.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"logFilePath": {
							SchemaProps: spec.SchemaProps{
								Description: "LogFilePath is the full path to the Felix log. Set to none to disable file logging. [Default: /var/log/calico/felix.log]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"logSeverityFile": {
							SchemaProps: spec.SchemaProps{
								Description: "LogSeverityFile is the log severity above which logs are sent to the log file. [Default: Info]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"logSeverityScreen": {
							SchemaProps: spec.SchemaProps{
								Description: "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"logSeveritySys": {
							SchemaProps: spec.SchemaProps{
								Description: "LogSeveritySys is the log severity above which logs are sent to the syslog. Set to None for no logging to syslog. [Default: Info]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipipEnabled": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"ipipMTU": {
							SchemaProps: spec.SchemaProps{
								Description: "IPIPMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"vxlanEnabled": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"vxlanMTU": {
							SchemaProps: spec.SchemaProps{
								Description: "VXLANMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"vxlanPort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"vxlanVNI": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"reportingInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "ReportingInterval is the interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments. [Default: 30s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"reportingTTL": {
							SchemaProps: spec.SchemaProps{
								Description: "ReportingTTL is the time-to-live setting for process-wide status reports. [Default: 90s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"endpointReportingEnabled": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"endpointReportingDelay": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"iptablesMarkMask": {
							SchemaProps: spec.SchemaProps{
								Description: "IptablesMarkMask is the mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system. [Default: 0xff000000]",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"disableConntrackInvalidCheck": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"healthEnabled": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"healthHost": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"healthPort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"prometheusMetricsEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "PrometheusMetricsEnabled enables the experimental Prometheus metrics server in Felix if set to true. [Default: false]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"prometheusMetricsPort": {
							SchemaProps: spec.SchemaProps{
								Description: "PrometheusMetricsPort is the TCP port that the experimental Prometheus metrics server should bind to. [Default:9091]",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"prometheusGoMetricsEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "PrometheusGoMetricsEnabled disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"prometheusProcessMetricsEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "PrometheusProcessMetricsEnabled disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"prometheusMetricsCertFile": {
							SchemaProps: spec.SchemaProps{
								Description: "TLS credentials for this port.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"prometheusMetricsKeyFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prometheusMetricsCAFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"failsafeInboundHostPorts": {
							SchemaProps: spec.SchemaProps{
								Description: "FailsafeInboundHostPorts is a comma-delimited list of UDP/TCP ports that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidently cutting off a host with incorrect configuration. Each port should be specified as tcp:<port-number> or udp:<port-number>. For back-compatibility, if the protocol is not specified, it defaults to “tcp”. To disable all inbound host ports, use the value none. The default value allows ssh access and DHCP. [Default: tcp:22, udp:68]",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ProtoPort"),
										},
									},
								},
							},
						},
						"failsafeOutboundHostPorts": {
							SchemaProps: spec.SchemaProps{
								Description: "FailsafeOutboundHostPorts is a comma-delimited list of UDP/TCP ports that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidently cutting off a host with incorrect configuration. Each port should be specified as tcp:<port-number> or udp:<port-number>. For back-compatibility, if the protocol is not specified, it defaults to “tcp”. To disable all outbound host ports, use the value none. The default value opens etcd’s standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP and DNS. [Default: tcp:2379, tcp:2380, tcp:4001, tcp:7001, udp:53, udp:67]",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ProtoPort"),
										},
									},
								},
							},
						},
						"kubeNodePortRanges": {
							SchemaProps: spec.SchemaProps{
								Description: "KubeNodePortRanges holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. [Default: 30000:32767].",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
										},
									},
								},
							},
						},
						"policySyncPathPrefix": {
							SchemaProps: spec.SchemaProps{
								Description: "PolicySyncPathPrefix is used to by Felix to communicate policy changes to external services, like Application layer policy. [Default: Empty]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"usageReportingEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "UsageReportingEnabled reports anonymous Calico version number and cluster size to projectcalico.org. Logs warnings returned by the usage server. For example, if a significant security vulnerability has been discovered in the version of Calico being used. [Default: true]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"usageReportingInitialDelay": {
							SchemaProps: spec.SchemaProps{
								Description: "UsageReportingInitialDelay controls the minimum delay before Felix makes a report. [Default: 300s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"usageReportingInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "UsageReportingInterval controls the interval at which Felix makes reports. [Default: 86400s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"natPortRange": {
							SchemaProps: spec.SchemaProps{
								Description: "NATPortRange specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
							},
						},
						"natOutgoingAddress": {
							SchemaProps: spec.SchemaProps{
								Description: "NATOutgoingAddress specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (ie it uses the iptables MASQUERADE target)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"externalNodesList": {
							SchemaProps: spec.SchemaProps{
								Description: "ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes which may source tunnel traffic and have the tunneled traffic be accepted at calico nodes.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"nfNetlinkBufSize": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"statsDumpFilePath": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prometheusReporterEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "Felix Denied Packet Metrics configuration parameters.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"prometheusReporterPort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"prometheusReporterCertFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prometheusReporterKeyFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prometheusReporterCAFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"deletedMetricsRetentionSecs": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"dropActionOverride": {
							SchemaProps: spec.SchemaProps{
								Description: "DropActionOverride overrides the Drop action in Felix, optionally changing the behavior to Accept, and optionally adding Log. Possible values are Drop, LogAndDrop, Accept, LogAndAccept. [Default: Drop]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"debugMemoryProfilePath": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"debugDisableLogDropping": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"debugSimulateCalcGraphHangAfter": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"debugSimulateDataplaneHangAfter": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"iptablesNATOutgoingInterfaceFilter": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"sidecarAccelerationEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "SidecarAccelerationEnabled enables experimental sidecar acceleration [Default: false]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"xdpEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "XDPEnabled enables XDP acceleration for suitable untracked incoming deny rules. [Default: true]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"genericXDPEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "GenericXDPEnabled enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables. [Default: false]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"syslogReporterNetwork": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"syslogReporterAddress": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"ipsecMode": {
							SchemaProps: spec.SchemaProps{
								Description: "IPSecMode controls which mode IPSec is operating on. Default value means IPSec is not enabled. [Default: \"\"]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipsecAllowUnsecuredTraffic": {
							SchemaProps: spec.SchemaProps{
								Description: "IPSecAllowUnsecuredTraffic controls whether non-IPsec traffic is allowed in addition to IPsec traffic. Enabling this negates the anti-spoofing protections of IPsec but it is useful when migrating to/from IPsec. [Default: false]",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"ipsecIKEAlgorithm": {
							SchemaProps: spec.SchemaProps{
								Description: "IPSecIKEAlgorithm sets IPSec IKE algorithm. Default is NIST suite B recommendation. [Default: aes128gcm16-prfsha256-ecp256]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipsecESPAlgorithm": {
							SchemaProps: spec.SchemaProps{
								Description: "IPSecESAlgorithm sets IPSec ESP algorithm. Default is NIST suite B recommendation. [Default: aes128gcm16-ecp256]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipsecLogLevel": {
							SchemaProps: spec.SchemaProps{
								Description: "IPSecLogLevel controls log level for IPSec components. Set to None for no logging. A generic log level terminology is used [None, Notice, Info, Debug, Verbose]. [Default: Info]",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipsecPolicyRefreshInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "IPSecPolicyRefreshInterval is the interval at which Felix will check the kernel's IPsec policy tables and repair any inconsistencies. [Default: 600s]",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"flowLogsFlushInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFlushInterval configures the interval at which Felix exports flow logs.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"flowLogsEnableHostEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsEnableHostEndpoint enables Flow logs reporting for HostEndpoints.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"flowLogsEnableNetworkSets": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsEnableNetworkSets enables Flow logs reporting for GlobalNetworkSets.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchLogsReporterEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "Enable Flow logs reporting to AWS CloudWatch.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchLogsFlushInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated: Use FlowLogsFlushInterval instead.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"cloudWatchLogsLogGroupName": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchLogsLogGroupName configures the Log group to use for exporting flow logs. Defaults to \"tigera-flowlogs-<cluster-guid>\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cloudWatchLogsLogStreamName": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchLogsLogStreamName configures the Log stream to use for exporting flow logs. Defaults to \"<felix-hostname>_Flowlogs\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cloudWatchLogsIncludeLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchLogsIncludeLabels is used to configure if endpoint labels are included in a Flow log entry.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchLogsIncludePolicies": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchLogsIncludePolicies is used to configure if policy information are included in a Flow log entry.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchLogsAggregationKindForAllowed": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchLogsAggregationKindForAllowed is used to choose the type of aggregation for flow log entries created for allowed connections. [Default: 2 - pod prefix name based aggregation]. Accepted values are 0, 1 and 2. 0 - No aggregation 1 - Source port based aggregation 2 - Pod prefix name based aggreagation.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"cloudWatchLogsAggregationKindForDenied": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchLogsAggregationKindForDenied is used to choose the type of aggregation for flow log entries created for denied connections. [Default: 1 - source port based aggregation]. Accepted values are 0, 1 and 2. 0 - No aggregation 1 - Source port based aggregation 2 - Pod prefix name based aggreagation.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"cloudWatchLogsRetentionDays": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of days for which to retain logs. See https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html for allowed values.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"cloudWatchLogsEnableHostEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated: Use FlowLogsEnableHostEndpoint.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchLogsEnabledForAllowed": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchLogsEnabledForAllowed is used to enable/disable flow logs entries created for allowed connections. Default is true. This parameter only takes effect when CloudWatchLogsReporterEnabled is set to true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchLogsEnabledForDenied": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchLogsEnabledForDenied is used to enable/disable flow logs entries created for denied flows. Default is true. This parameter only takes effect when CloudWatchLogsReporterEnabled is set to true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchMetricsReporterEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "Enable reporting metrics to CloudWatch.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchMetricsPushIntervalSecs": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchMetricsPushInterval configures the interval at which Felix exports metrics to CloudWatch.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"cloudWatchNodeHealthStatusEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchNodeHealthStatusEnabled enables pushing node health data to CloudWatch.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cloudWatchNodeHealthPushIntervalSecs": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudWatchNodeHealthPushIntervalSecs configures the frequency of pushing the node health metrics to CloudWatch.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"flowLogsFileEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileEnabled when set to true, enables logging flow logs to a file. If false no flow logging to file will occur.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"flowLogsFileMaxFiles": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileMaxFiles sets the number of log files to keep.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"flowLogsFileMaxFileSizeMB": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileMaxFileSizeMB sets the max size in MB of flow logs files before rotation.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"flowLogsFileDirectory": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileDirectory sets the directory where flow logs files are stored.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"flowLogsFileIncludeLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileIncludeLabels is used to configure if endpoint labels are included in a Flow log entry written to file.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"flowLogsFileIncludePolicies": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileIncludePolicies is used to configure if policy information are included in a Flow log entry written to file.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"flowLogsFileAggregationKindForAllowed": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileAggregationKindForAllowed is used to choose the type of aggregation for flow log entries created for allowed connections. [Default: 2 - pod prefix name based aggregation]. Accepted values are 0, 1 and 2. 0 - No aggregation 1 - Source port based aggregation 2 - Pod prefix name based aggreagation.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"flowLogsFileAggregationKindForDenied": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileAggregationKindForDenied is used to choose the type of aggregation for flow log entries created for denied connections. [Default: 1 - source port based aggregation]. Accepted values are 0, 1 and 2. 0 - No aggregation 1 - Source port based aggregation 2 - Pod prefix name based aggreagation.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"flowLogsFileEnabledForAllowed": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileEnabledForAllowed is used to enable/disable flow logs entries created for allowed connections. Default is true. This parameter only takes effect when FlowLogsFileReporterEnabled is set to true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"flowLogsFileEnabledForDenied": {
							SchemaProps: spec.SchemaProps{
								Description: "FlowLogsFileEnabledForDenied is used to enable/disable flow logs entries created for denied flows. Default is true. This parameter only takes effect when FlowLogsFileReporterEnabled is set to true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"dnsTrustedServers": {
							SchemaProps: spec.SchemaProps{
								Description: "The DNS servers that Felix should trust. Each entry here must be an IP, or \"k8s-service:<name>\", where <name> is the name of a Kubernetes Service in the \"kube-system\" namespace. [Default: \"k8s-service:kube-dns\"].",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"dnsCacheFile": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the file that Felix uses to preserve learnt DNS information when restarting. [Default: \"/var/run/calico/felix-dns-cache.txt\"].",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"dnsCacheSaveInterval": {
							SchemaProps: spec.SchemaProps{
								Description: "The periodic interval at which Felix saves learnt DNS information to the cache file. [Default: 60s].",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"windowsNetworkName": {
							SchemaProps: spec.SchemaProps{
								Description: "WindowsNetworkName specifies which Windows HNS networks Felix should operate on.  The default is to match networks that start with \"calico\".  Supports regular expression syntax.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"XDPRefreshInterval"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ProtoPort", "github.com/projectcalico/libcalico-go/lib/numorstring.Port", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.FlowEndpoint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "The endpoint type, indicating whether this is a Pod, HostEndpoint, NetworkSet, or internet.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the endpoint. Note that this name may actually be a name prefix if flow logs have been aggregated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nameIsAggregationPrefix": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether the name is an aggregation prefix rather than the actual name.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Description: "The namespace of the endpoint.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"kind", "name"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicy": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalNetworkPolicy contains information about a security Policy resource.  This contains a set of security rules to apply.  Security policies allow a selector-based security model which can override the security profiles directly referenced by an endpoint.\n\nEach policy must do one of the following:\n\n \t- Match the packet and apply an “allow” action; this immediately accepts the packet, skipping\n       all further policies and profiles. This is not recommended in general, because it prevents\n       further policy from being executed.\n\t- Match the packet and apply a “deny” action; this drops the packet immediately, skipping all\n       further policy and profiles.\n\t- Fail to match the packet; in which case the packet proceeds to the next policy. If there\n\t  are no more policies then the packet is dropped.\n\nCalico implements the security policy for each endpoint individually and only the policies that have matching selectors are implemented. This ensures that the number of rules that actually need to be inserted into the kernel is proportional to the number of local endpoints rather than the total amount of policy.\n\nGlobalNetworkPolicy is globally-scoped (i.e. not Namespaced).",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the Policy.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicySpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicyList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalNetworkPolicyList contains a list of GlobalNetworkPolicy resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicy"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicy", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"tier": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the tier that this policy belongs to.  If this is omitted, the default tier (name is \"default\") is assumed.  The specified tier must exist in order to create security policies within the tier, the \"default\" tier is created automatically if it does not exist, this means for deployments requiring only a single Tier, the tier name may be omitted on all policy management requests.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"order": {
							SchemaProps: spec.SchemaProps{
								Description: "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order within the same tier.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\" within the tier.",
								Type:        []string{"number"},
								Format:      "double",
							},
						},
						"ingress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
										},
									},
								},
							},
						},
						"egress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "The selector is an expression used to pick pick out the endpoints that the policy should be applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   ->  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -> True if that label is present\n\t! expr -> negation of expr\n\texpr && expr  -> Short-circuit and\n\texpr || expr  -> Short-circuit or\n\t( expr ) -> parens for grouping\n\tall() or the empty selector -> matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" && deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"types": {
							SchemaProps: spec.SchemaProps{
								Description: "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress rules are present in the policy.  The default is:\n\n- [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are\n  also no Ingress rules)\n\n- [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty or nil.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"doNotTrack": {
							SchemaProps: spec.SchemaProps{
								Description: "DoNotTrack indicates whether packets matched by the rules in this policy should go through the data plane's connection tracking, such as Linux conntrack.  If True, the rules in this policy are applied before any data plane connection tracking, and packets allowed by this policy are marked as not to be tracked.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"preDNAT": {
							SchemaProps: spec.SchemaProps{
								Description: "PreDNAT indicates to apply the rules in this policy before any DNAT.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"applyOnForward": {
							SchemaProps: spec.SchemaProps{
								Description: "ApplyOnForward indicates to apply the rules in this policy on forward traffic.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"selector"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSet": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalNetworkSet contains a set of arbitrary IP sub-networks/CIDRs and domain names that share labels to allow rules to refer to them via selectors.  The labels of GlobalNetworkSet are not namespaced.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the NetworkSet.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalNetworkSetList contains a list of NetworkSet resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSet"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSet", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalNetworkSetSpec contains the specification for a NetworkSet resource.",
					Properties: map[string]spec.Schema{
						"nets": {
							SchemaProps: spec.SchemaProps{
								Description: "The list of IP networks that belong to this set.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"allowedEgressDomains": {
							SchemaProps: spec.SchemaProps{
								Description: "The list of domain names that belong to this set and are honored in egress allow rules only.  Domain names specified here only work to allow egress traffic from the cluster to external destinations.  They don't work to _deny_ traffic to destinations specified by domain name, or to allow ingress traffic from _sources_ specified by domain name.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSync": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"labels": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalReport": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalReport contains the configuration for a non-namespaced Report.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the GlobalReport.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.ReportStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalReportList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalReportList contains a list of GlobalReport resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalReport"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalReport", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalReportType": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalReportType contains the configuration for a non-namespaced report type.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the GlobalReport.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTypeSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTypeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalReportTypeList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalReportTypeList contains a list of GlobalReportType resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalReportType"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalReportType", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeed": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalThreatFeed is a source of intel for possible threats to the cluster. This object configures how Tigera components communicate with the feed and update detection jobs or policy based on the intel.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the NetworkSet.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalThreatFeedList contains a list of NetworkSet resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeed"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeed", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalThreatFeedSpec contains the specification of a GlobalThreatFeed resource.",
					Properties: map[string]spec.Schema{
						"content": {
							SchemaProps: spec.SchemaProps{
								Description: "Content describes the kind of data the data feed provides.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"globalNetworkSet": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSync"),
							},
						},
						"pull": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Pull"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSync", "github.com/projectcalico/libcalico-go/lib/apis/v3.Pull"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"lastSuccessfulSync": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastSuccessfulSearch": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"errorConditions": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ErrorCondition"),
										},
									},
								},
							},
						},
					},
					Required: []string{"lastSuccessfulSync", "lastSuccessfulSearch", "errorConditions"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ErrorCondition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPHeader": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"valueFrom": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPHeaderSource"),
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPHeaderSource"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPHeaderSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"configMapKeyRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Selects a key of a ConfigMap.",
								Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
							},
						},
						"secretKeyRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Selects a key of a secret in the pod's namespace",
								Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ConfigMapKeySelector", "k8s.io/api/core/v1.SecretKeySelector"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPMatch": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HTTPMatch is an optional field that apply only to HTTP requests The Methods and Path fields are joined with AND",
					Properties: map[string]spec.Schema{
						"methods": {
							SchemaProps: spec.SchemaProps{
								Description: "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"paths": {
							SchemaProps: spec.SchemaProps{
								Description: "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPath"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPath"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPath": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HTTPPath specifies an HTTP path to match. It may be either of the form: exact: <path>: which matches the path exactly or prefix: <path-prefix>: which matches the path prefix",
					Properties: map[string]spec.Schema{
						"exact": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPull": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"format": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"url": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"headers": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPHeader"),
										},
									},
								},
							},
						},
					},
					Required: []string{"url"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPHeader"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpoint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostEndpoint contains information about a HostEndpoint resource that represents a “bare-metal” interface attached to the host that is running Calico’s agent, Felix. By default, Calico doesn’t apply any policy to such interfaces.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the HostEndpoint.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostEndpointList contains a list of HostEndpoint resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpoint"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpoint", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostEndpointSpec contains the specification for a HostEndpoint resource.",
					Properties: map[string]spec.Schema{
						"node": {
							SchemaProps: spec.SchemaProps{
								Description: "The node name identifying the Calico node instance.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"interfaceName": {
							SchemaProps: spec.SchemaProps{
								Description: "Either \"*\", or the name of a specific Linux interface to apply policy to; or empty.  \"*\" indicates that this HostEndpoint governs all traffic to, from or through the default network namespace of the host named by the \"Node\" field; entering and leaving that namespace via any interface, including those from/to non-host-networked local workloads.\n\nIf InterfaceName is not \"*\", this HostEndpoint only governs traffic that enters or leaves the host through the specific interface named by InterfaceName, or - when InterfaceName is empty - through the specific interface that has one of the IPs in ExpectedIPs. Therefore, when InterfaceName is empty, at least one expected IP must be specified.  Only external interfaces (such as “eth0”) are supported here; it isn't possible for a HostEndpoint to protect traffic through a specific local workload interface.\n\nNote: Only some kinds of policy are implemented for \"*\" HostEndpoints; initially just pre-DNAT policy.  Please check Calico documentation for the latest position.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"expectedIPs": {
							SchemaProps: spec.SchemaProps{
								Description: "The expected IP addresses (IPv4 and IPv6) of the endpoint. If \"InterfaceName\" is not present, Calico will look for an interface matching any of the IPs in the list and apply policy to that. Note:\n\tWhen using the selector match criteria in an ingress or egress security Policy\n\tor Profile, Calico converts the selector into a set of IP addresses. For host\n\tendpoints, the ExpectedIPs field is used for that purpose. (If only the interface\n\tname is specified, Calico does not learn the IPs of the interface for use in match\n\tcriteria.)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"profiles": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of identifiers of security Profile objects that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"ports": {
							SchemaProps: spec.SchemaProps{
								Description: "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ICMPFields": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ICMPFields defines structure for ICMP and NotICMP sub-struct for ICMP code and type",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"code": {
							SchemaProps: spec.SchemaProps{
								Description: "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel’s iptables firewall, which Calico uses to enforce the rule.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlock": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMBlock contains information about a block for IP address assignment.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the IPAMBlock.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlockSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlockSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlockList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMBlockList contains a list of IPAMBlock resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlock"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlock", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlockSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMBlockSpec contains the specification for a IPAMBlock resource.",
					Properties: map[string]spec.Schema{
						"cidr": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"strictAffinity": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"allocations": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"integer"},
											Format: "int32",
										},
									},
								},
							},
						},
						"unallocated": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"integer"},
											Format: "int32",
										},
									},
								},
							},
						},
						"attributes": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.AllocationAttribute"),
										},
									},
								},
							},
						},
						"Deleted": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
					Required: []string{"cidr", "affinity", "strictAffinity", "allocations", "unallocated", "attributes", "Deleted"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.AllocationAttribute"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMConfig contains information about a block for IP address assignment.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the IPAMConfig.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfigSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfigSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfigList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMConfigList contains a list of IPAMConfig resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfig"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfig", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfigSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMConfigSpec contains the specification for a IPAMConfig resource.",
					Properties: map[string]spec.Schema{
						"strictAffinity": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"autoAllocateBlocks": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
					Required: []string{"strictAffinity", "autoAllocateBlocks"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandle": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMHandle contains information about a IPAMHandle resource.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the IPAMHandle.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandleSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandleSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandleList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMHandleList contains a list of IPAMHandle resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandle"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandle", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandleSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPAMHandleSpec contains the specification for a IPAMHandle resource.",
					Properties: map[string]spec.Schema{
						"handleID": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"block": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"integer"},
											Format: "int32",
										},
									},
								},
							},
						},
					},
					Required: []string{"handleID", "block"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPNAT": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPNat contains a single NAT mapping for a WorkloadEndpoint resource.",
					Properties: map[string]spec.Schema{
						"internalIP": {
							SchemaProps: spec.SchemaProps{
								Description: "The internal IP address which must be associated with the owning endpoint via the configured IPNetworks for the endpoint.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"externalIP": {
							SchemaProps: spec.SchemaProps{
								Description: "The external IP address.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"internalIP", "externalIP"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPool": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPPool contains information about a IPPool resource.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the IPPool.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPPoolList contains a list of IPPool resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPPool"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPool", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPPoolSpec contains the specification for an IPPool resource.",
					Properties: map[string]spec.Schema{
						"cidr": {
							SchemaProps: spec.SchemaProps{
								Description: "The pool CIDR.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"vxlanMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Contains configuration for VXLAN tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. VXLAN tunelling is disabled).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipipMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Contains configuration for IPIP tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. IPIP tunelling is disabled).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"natOutgoing": {
							SchemaProps: spec.SchemaProps{
								Description: "When nat-outgoing is true, packets sent from Calico networked containers in this pool to destinations outside of this pool will be masqueraded.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"disabled": {
							SchemaProps: spec.SchemaProps{
								Description: "When disabled is true, Calico IPAM will not assign addresses from this pool.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"blockSize": {
							SchemaProps: spec.SchemaProps{
								Description: "The block size to use for IP address assignments from this pool. Defaults to 26 for IPv4 and 112 for IPv6.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "Allows IPPool to allocate for a specific node by label selector.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipip": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration"),
							},
						},
						"nat-outgoing": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"cidr"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.KubeConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kubeconfig": {
							SchemaProps: spec.SchemaProps{
								Description: "When using the Kubernetes datastore, the location of a kubeconfig file. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sAPIEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "Location of the Kubernetes API. Not required if using kubeconfig. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sKeyFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Location of a client key for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sCertFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Location of a client certificate for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sCAFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Location of a CA for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sAPIToken": {
							SchemaProps: spec.SchemaProps{
								Description: "Token to be used for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sInsecureSkipTLSVerify": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKey": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LicenseKey contains the Tigera CNX license key for the cluster.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.  This resource is a singleton, always named \"default\".",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the LicenseKey.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKeySpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKeySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKeyList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LicenseKeyList contains a list of LicenseKey resources (even though there should only be one).",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKey"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKey", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKeySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LicenseKeySpec contains the license key itself.",
					Properties: map[string]spec.Schema{
						"token": {
							SchemaProps: spec.SchemaProps{
								Description: "Token is the JWT containing the license claims",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"certificate": {
							SchemaProps: spec.SchemaProps{
								Description: "Certificate is used to validate the token.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"token"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NamesAndLabelsMatch": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NamesAndLabelsMatch is used to specify resource matches using both label and name selection.",
					Properties: map[string]spec.Schema{
						"names": {
							SchemaProps: spec.SchemaProps{
								Description: "Names is an optional field that specifies a set of resources by name.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector is an optional field that selects a set of resources by label. If both Names and Selector are specified then they are AND'ed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicy": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NetworkPolicy is the Namespaced-equivalent of the GlobalNetworkPolicy.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the Policy.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicySpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicyList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NetworkPolicyList contains a list of NetworkPolicy resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicy"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicy", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"tier": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the tier that this policy belongs to.  If this is omitted, the default tier (name is \"default\") is assumed.  The specified tier must exist in order to create security policies within the tier, the \"default\" tier is created automatically if it does not exist, this means for deployments requiring only a single Tier, the tier name may be omitted on all policy management requests.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"order": {
							SchemaProps: spec.SchemaProps{
								Description: "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order within the same tier.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\" within the tier.",
								Type:        []string{"number"},
								Format:      "double",
							},
						},
						"ingress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
										},
									},
								},
							},
						},
						"egress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "The selector is an expression used to pick pick out the endpoints that the policy should be applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   ->  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -> True if that label is present\n\t! expr -> negation of expr\n\texpr && expr  -> Short-circuit and\n\texpr || expr  -> Short-circuit or\n\t( expr ) -> parens for grouping\n\tall() or the empty selector -> matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" && deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"types": {
							SchemaProps: spec.SchemaProps{
								Description: "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress are present in the policy.  The default is:\n\n- [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are\n  also no Ingress rules)\n\n- [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty or nil.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"selector"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSet": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NetworkSet is the Namespaced-equivalent of the GlobalNetworkSet.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the NetworkSet.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSetSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSetSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSetList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NetworkSetList contains a list of NetworkSet resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSet"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSet", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSetSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NetworkSetSpec contains the specification for a NetworkSet resource.",
					Properties: map[string]spec.Schema{
						"nets": {
							SchemaProps: spec.SchemaProps{
								Description: "The list of IP networks that belong to this set.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Node": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Node contains information about a Node resource.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the Node.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NodeSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeBGPSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeBGPSpec contains the specification for the Node BGP configuration.",
					Properties: map[string]spec.Schema{
						"asNumber": {
							SchemaProps: spec.SchemaProps{
								Description: "The AS Number of the node.  If this is not specified, the global default value will be used.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"ipv4Address": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv4Address is the IPv4 address and network of this node.  The IPv4 address should always be specified if you are using BGP.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipv6Address": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv6Address is the IPv6 address and network of this node.  Not required if you are not using BGP or you do not require IPv6 routing.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipv4IPIPTunnelAddr": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv4IPIPTunnelAddr is the IPv4 address of the IP in IP tunnel.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"routeReflectorClusterID": {
							SchemaProps: spec.SchemaProps{
								Description: "RouteReflectorClusterID enables this node as a route reflector within the given cluster.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeList contains a list of Node resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Node"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.Node", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeSpec contains the specification for a Node resource.",
					Properties: map[string]spec.Schema{
						"bgp": {
							SchemaProps: spec.SchemaProps{
								Description: "BGP configuration for this node.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NodeBGPSpec"),
							},
						},
						"ipv4VXLANTunnelAddr": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv4VXLANTunnelAddr is the IPv4 address of the VXLAN tunnel.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"vxlanTunnelMACAddr": {
							SchemaProps: spec.SchemaProps{
								Description: "VXLANTunnelMACAddr is the MAC address of the VXLAN tunnel.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"orchRefs": {
							SchemaProps: spec.SchemaProps{
								Description: "OrchRefs for this node.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.OrchRef"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeBGPSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.OrchRef"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.OrchRef": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "OrchRef is used to correlate a Calico node to its corresponding representation in a given orchestrator",
					Properties: map[string]spec.Schema{
						"nodeName": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeName represents the name for this node according to the orchestrator.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"orchestrator": {
							SchemaProps: spec.SchemaProps{
								Description: "Orchestrator represents the orchestrator using this node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"orchestrator"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Profile": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Profile contains the details a security profile resource.  A profile is set of security rules to apply on an endpoint.  An endpoint (either a host endpoint or an endpoint on a workload) can reference zero or more profiles.  The profile rules are applied directly to the endpoint *after* the selector-based security policy has been applied, and in the order the profiles are declared on the endpoint.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the Profile.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ProfileSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ProfileSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ProfileList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ProfileList contains a list of Profile resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Profile"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.Profile", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ProfileSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ProfileSpec contains the specification for a security Profile resource.",
					Properties: map[string]spec.Schema{
						"ingress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
										},
									},
								},
							},
						},
						"egress": {
							SchemaProps: spec.SchemaProps{
								Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
										},
									},
								},
							},
						},
						"labelsToApply": {
							SchemaProps: spec.SchemaProps{
								Description: "An option set of labels to apply to each endpoint (in addition to their own labels) referencing this profile.  If labels configured on the endpoint have keys matching those labels inherited from the profile, the endpoint label values take precedence.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ProtoPort": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ProtoPort is combination of protocol and port, both must be specified.",
					Properties: map[string]spec.Schema{
						"protocol": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"protocol", "port"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Pull": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"period": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"http": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPull"),
							},
						},
					},
					Required: []string{"http"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPull"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.RemoteClusterConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RemoteClusterConfiguration contains the configuration for remote clusters.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the RemoteClusterConfiguration.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.RemoteClusterConfigurationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.RemoteClusterConfigurationSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.RemoteClusterConfigurationList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RemoteClusterConfigurationList contains a list of RemoteClusterConfiguration resources",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.RemoteClusterConfiguration"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.RemoteClusterConfiguration", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.RemoteClusterConfigurationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RemoteClusterConfigurationSpec contains the values of describing the cluster.",
					Properties: map[string]spec.Schema{
						"datastoreType": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates the datastore to use. If unspecified, defaults to etcdv3",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdEndpoints": {
							SchemaProps: spec.SchemaProps{
								Description: "A comma separated list of etcd endpoints. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdUsername": {
							SchemaProps: spec.SchemaProps{
								Description: "User name for RBAC. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdPassword": {
							SchemaProps: spec.SchemaProps{
								Description: "Password for the given user name. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdKeyFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Path to the etcd key file. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdCertFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Path to the etcd client certificate. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdCACertFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Path to the etcd Certificate Authority file. Valid if DatastoreType is etcdv3.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeconfig": {
							SchemaProps: spec.SchemaProps{
								Description: "When using the Kubernetes datastore, the location of a kubeconfig file. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sAPIEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "Location of the Kubernetes API. Not required if using kubeconfig. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sKeyFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Location of a client key for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sCertFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Location of a client certificate for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sCAFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Location of a CA for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sAPIToken": {
							SchemaProps: spec.SchemaProps{
								Description: "Token to be used for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"k8sInsecureSkipTLSVerify": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
					Required: []string{"datastoreType"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportData": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReportData contains the aggregated data available for rendering in report templates. The data available is dependent on the selector/report configuration.\n\nThe data is stored directly in elastic search. To reduce nesting and simplify indexing, all summary values are contained at the top level.",
					Properties: map[string]spec.Schema{
						"reportName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reportTypeName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reportSpec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportSpec"),
							},
						},
						"reportTypeSpec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTypeSpec"),
							},
						},
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"endTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"generationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"endpoints": {
							SchemaProps: spec.SchemaProps{
								Description: "The set of in-scope endpoints.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportEndpoint"),
										},
									},
								},
							},
						},
						"endpointsSummary": {
							SchemaProps: spec.SchemaProps{
								Description: "Endpoint stats in a reporting period.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsSummary"),
							},
						},
						"namespaces": {
							SchemaProps: spec.SchemaProps{
								Description: "The set of namespaces containing in-scope endpoints.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportNamespace"),
										},
									},
								},
							},
						},
						"namespacesSummary": {
							SchemaProps: spec.SchemaProps{
								Description: "Endpoint stats for given namespaces in a reporting period.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsSummary"),
							},
						},
						"services": {
							SchemaProps: spec.SchemaProps{
								Description: "The set of services containing in-scope endpoints.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportService"),
										},
									},
								},
							},
						},
						"servicesSummary": {
							SchemaProps: spec.SchemaProps{
								Description: "Endpoint stats for services in a reporting period.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsSummary"),
							},
						},
						"auditEvents": {
							SchemaProps: spec.SchemaProps{
								Description: "The time-ordered set of in-scope audit events that occurred within the reporting interval.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apiserver/pkg/apis/audit.Event"),
										},
									},
								},
							},
						},
						"auditSummary": {
							SchemaProps: spec.SchemaProps{
								Description: "Audit log stats in a reporting period.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.AuditSummary"),
							},
						},
						"flows": {
							SchemaProps: spec.SchemaProps{
								Description: "Flows for in-scope endpoints that have been recorded within the reporting period.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportFlow"),
										},
									},
								},
							},
						},
						"cisBenchmark": {
							SchemaProps: spec.SchemaProps{
								Description: "CISBenchmark contains the per-node results of a cis benchmark scan.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkNode"),
										},
									},
								},
							},
						},
						"cisBenchmarkSummary": {
							SchemaProps: spec.SchemaProps{
								Description: "CISBenchmarkSummary high level test results.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSummary"),
							},
						},
					},
					Required: []string{"reportName", "reportTypeName", "reportSpec", "reportTypeSpec", "startTime", "endTime", "generationTime"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.AuditSummary", "github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkNode", "github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkSummary", "github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportEndpoint", "github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportFlow", "github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportNamespace", "github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsReportService", "github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsSummary", "github.com/projectcalico/libcalico-go/lib/apis/v3.ReportSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTypeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.Time", "k8s.io/apiserver/pkg/apis/audit.Event"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportJob": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReportJob contains",
					Properties: map[string]spec.Schema{
						"start": {
							SchemaProps: spec.SchemaProps{
								Description: "The start time of the report.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"end": {
							SchemaProps: spec.SchemaProps{
								Description: "The end time of the report.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"job": {
							SchemaProps: spec.SchemaProps{
								Description: "A reference to the report creation job if known.",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
					},
					Required: []string{"start", "end", "job"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReportSpec contains the values of the GlobalReport.",
					Properties: map[string]spec.Schema{
						"reportType": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the report type.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"endpoints": {
							SchemaProps: spec.SchemaProps{
								Description: "Endpoints is used to specify which endpoints are in-scope and stored in the generated report data. Only used if endpoints data and/or audit logs are gathered in the report. If omitted, treated as everything in-scope.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsSelection"),
							},
						},
						"schedule": {
							SchemaProps: spec.SchemaProps{
								Description: "The report schedule specified in cron format. This specifies both the start and end times of each report, where the end time of one report becomes the start time of the next report. Separate jobs are created to generate a report, and the job generates the report data from archived audit and traffic data. To ensure this data is actually archived, the jobs to generate each report starts at a configurable time *after* the end time of the report that is being generated. The default job start delay is 30m, but is configurable through the compliance-controller environments. The cron format has minute accuracy, but only up to two values may be configured for the minute column which means you may only have at most two reports for each hour period.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"jobNodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "The node selector used to specify which nodes the report job may be scheduled on.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"suspend": {
							SchemaProps: spec.SchemaProps{
								Description: "This flag tells the controller to suspend subsequent jobs for generating reports, it does not apply to already started jobs. If jobs are resumed then the controller will start creating jobs for any reports that were missed while the job was suspended.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cis": {
							SchemaProps: spec.SchemaProps{
								Description: "This field contain all the parameters for configuring a CIS benchmark report.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkParams"),
							},
						},
					},
					Required: []string{"reportType"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.CISBenchmarkParams", "github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointsSelection"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReportStatus contains the status of the automated report generation.",
					Properties: map[string]spec.Schema{
						"lastSuccessfulReportJobs": {
							SchemaProps: spec.SchemaProps{
								Description: "The configured report jobs that have completed successfully.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CompletedReportJob"),
										},
									},
								},
							},
						},
						"lastFailedReportJobs": {
							SchemaProps: spec.SchemaProps{
								Description: "The configured report jobs that have failed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.CompletedReportJob"),
										},
									},
								},
							},
						},
						"activeReportJobs": {
							SchemaProps: spec.SchemaProps{
								Description: "The set of active report jobs.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportJob"),
										},
									},
								},
							},
						},
						"lastScheduledReportJob": {
							SchemaProps: spec.SchemaProps{
								Description: "The last scheduled report job.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportJob"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.CompletedReportJob", "github.com/projectcalico/libcalico-go/lib/apis/v3.ReportJob"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTemplate": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReportTemplate defines a template used to render a report into downloadable or UI compatible format.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of this template. This should be unique across all template names within a ReportType. This will be used by the UI as the suffix of the downloadable file name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "A user-facing description of the template.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"template": {
							SchemaProps: spec.SchemaProps{
								Description: "The base-64 encoded go template used to render the report data.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTypeSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReportTypeSpec contains the various templates, and configuration used to render a specific type of report.",
					Properties: map[string]spec.Schema{
						"uiSummaryTemplate": {
							SchemaProps: spec.SchemaProps{
								Description: "The summary template, explicitly used by the UI to render a summary version of the report. This should render to json containing a sets of widgets that the UI can use to render the summary. The rendered data is returned on the list query of the reports.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTemplate"),
							},
						},
						"downloadTemplates": {
							SchemaProps: spec.SchemaProps{
								Description: "The set of templates used to render the report for downloads.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTemplate"),
										},
									},
								},
							},
						},
						"includeEndpointData": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether to include endpoint data in the report. The actual endpoints included may be filtered by the Report, but will otherwise contain the full set of endpoints.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"includeEndpointFlowLogData": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether to include endpoint-to-endpoint flow log data in the report.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"auditEventsSelection": {
							SchemaProps: spec.SchemaProps{
								Description: "What audit log data should be included in the report. If not specified, the report will contain no audit log data. The selection may be further filtered by the Report.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.AuditEventsSelection"),
							},
						},
						"includeCISBenchmarkData": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether to include the full cis benchmark test results in the report.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.AuditEventsSelection", "github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTemplate"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ResourceID": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ResourceID is used to identify a resource instance in the report data.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"uuid": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Rule": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching.\n\nEach positive match criteria has a negated version, prefixed with ”Not”. All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.",
					Properties: map[string]spec.Schema{
						"action": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"ipVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "IPVersion is an optional field that restricts the rule to only match a specific IP version.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"protocol": {
							SchemaProps: spec.SchemaProps{
								Description: "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols).\n\nMust be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
							},
						},
						"icmp": {
							SchemaProps: spec.SchemaProps{
								Description: "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ICMPFields"),
							},
						},
						"notProtocol": {
							SchemaProps: spec.SchemaProps{
								Description: "NotProtocol is the negated version of the Protocol field.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
							},
						},
						"notICMP": {
							SchemaProps: spec.SchemaProps{
								Description: "NotICMP is the negated version of the ICMP field.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ICMPFields"),
							},
						},
						"source": {
							SchemaProps: spec.SchemaProps{
								Description: "Source contains the match criteria that apply to source entity.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EntityRule"),
							},
						},
						"destination": {
							SchemaProps: spec.SchemaProps{
								Description: "Destination contains the match criteria that apply to destination entity.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EntityRule"),
							},
						},
						"http": {
							SchemaProps: spec.SchemaProps{
								Description: "HTTP contains match criteria that apply to HTTP requests.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPMatch"),
							},
						},
					},
					Required: []string{"action"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.EntityRule", "github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPMatch", "github.com/projectcalico/libcalico-go/lib/apis/v3.ICMPFields", "github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountMatch": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"names": {
							SchemaProps: spec.SchemaProps{
								Description: "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Tier": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Tier contains a set of policies that are applied to packets.  Multiple tiers may be created and each tier is applied in the order specified in the tier specification. Tier is globally-scoped (i.e. not Namespaced).",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the Tier.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.TierSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.TierSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.TierList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TierList contains a list of Tier resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Tier"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.Tier", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.TierSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TierSpec contains the specification for a security policy tier resource.",
					Properties: map[string]spec.Schema{
						"order": {
							SchemaProps: spec.SchemaProps{
								Description: "Order is an optional field that specifies the order in which the tier is applied. Tiers with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the tier will be applied last.  Tiers with identical order will be applied in alphanumerical order based on the Tier \"Name\".",
								Type:        []string{"number"},
								Format:      "double",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpoint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "WorkloadEndpoint contains information about a WorkloadEndpoint resource that is a peer of a Calico compute node.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the WorkloadEndpoint.",
								Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "WorkloadEndpointList contains a list of WorkloadEndpoint resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpoint"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metadata", "items"},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpoint", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "WorkloadEndpointMetadata contains the specification for a WorkloadEndpoint resource.",
					Properties: map[string]spec.Schema{
						"orchestrator": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the orchestrator.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"workload": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the workload.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"node": {
							SchemaProps: spec.SchemaProps{
								Description: "The node name identifying the Calico node instance.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"containerID": {
							SchemaProps: spec.SchemaProps{
								Description: "The container ID.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"pod": {
							SchemaProps: spec.SchemaProps{
								Description: "The Pod name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"endpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "The Endpoint name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipNetworks": {
							SchemaProps: spec.SchemaProps{
								Description: "IPNetworks is a list of subnets allocated to this endpoint. IP packets will only be allowed to leave this interface if they come from an address in one of these subnets. Currently only /32 for IPv4 and /128 for IPv6 networks are supported.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"ipNATs": {
							SchemaProps: spec.SchemaProps{
								Description: "IPNATs is a list of 1:1 NAT mappings to apply to the endpoint. Inbound connections to the external IP will be forwarded to the internal IP. Connections initiated from the internal IP will not have their source address changed, except when an endpoint attempts to connect one of its own external IPs. Each internal IP must be associated with the same endpoint via the configured IPNetworks.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPNAT"),
										},
									},
								},
							},
						},
						"ipv4Gateway": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv4Gateway is the gateway IPv4 address for traffic from the workload.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipv6Gateway": {
							SchemaProps: spec.SchemaProps{
								Description: "IPv6Gateway is the gateway IPv6 address for traffic from the workload.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"profiles": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of security Profile resources that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"interfaceName": {
							SchemaProps: spec.SchemaProps{
								Description: "InterfaceName the name of the Linux interface on the host: for example, tap80.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"mac": {
							SchemaProps: spec.SchemaProps{
								Description: "MAC is the MAC address of the endpoint interface.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ports": {
							SchemaProps: spec.SchemaProps{
								Description: "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort", "github.com/projectcalico/libcalico-go/lib/apis/v3.IPNAT"},
		},
		"github.com/projectcalico/libcalico-go/lib/numorstring.Port":          numorstring.Port{}.OpenAPIDefinition(),
		"github.com/projectcalico/libcalico-go/lib/numorstring.Protocol":      numorstring.Protocol{}.OpenAPIDefinition(),
		"github.com/projectcalico/libcalico-go/lib/numorstring.Uint8OrString": numorstring.Uint8OrString{}.OpenAPIDefinition(),
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.BGPConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.BGPConfigurationList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPConfigurationList is a list of BGPConfiguration resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.BGPConfiguration"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.BGPConfiguration", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.BGPPeer": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.BGPPeerList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BGPPeerList is a list of BGPPeer resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.BGPPeer"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.BGPPeer", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalNetworkPolicy": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicySpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalNetworkPolicyList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalNetworkPolicyList is a list of Policy objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalNetworkPolicy"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalNetworkPolicy", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalNetworkSet": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalNetworkSetList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalNetworkSetList is a list of NetworkSet objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalNetworkSet"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalNetworkSet", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalReport": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.ReportStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalReportList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalReportList is a list of GlobalReport objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalReport"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalReport", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalReportType": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTypeSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.ReportTypeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalReportTypeList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalReportTypeList is a list of GlobalReportType objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalReportType"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalReportType", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalThreatFeed": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalThreatFeedStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalThreatFeedList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GlobalThreatFeedList is a list of GlobalThreatFeed objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalThreatFeed"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.GlobalThreatFeed", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.HostEndpoint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.HostEndpointList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostEndpointList is a list of HostEndpoint objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.HostEndpoint"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.HostEndpoint", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.IPPool": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.IPPoolList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IPPoolList contains a list of IPPool resources.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.IPPool"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.IPPool", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.LicenseKey": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKeySpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.LicenseKeySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.LicenseKeyList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LicenseKeyList  is a list of license objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.LicenseKey"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.LicenseKey", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.NetworkPolicy": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicySpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.NetworkPolicyList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NetworkPolicyList is a list of Policy objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.NetworkPolicy"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.NetworkPolicy", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.Tier": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.TierSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/projectcalico/libcalico-go/lib/apis/v3.TierSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.TierList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TierList is a list of Tier objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.Tier"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/tigera/calico-k8sapiserver/pkg/apis/projectcalico/v3.Tier", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"volumeID": {
							SchemaProps: spec.SchemaProps{
								Description: "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"partition": {
							SchemaProps: spec.SchemaProps{
								Description: "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"volumeID"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.Affinity": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Affinity is a group of affinity scheduling rules.",
					Properties: map[string]spec.Schema{
						"nodeAffinity": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes node affinity scheduling rules for the pod.",
								Ref:         ref("k8s.io/api/core/v1.NodeAffinity"),
							},
						},
						"podAffinity": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
								Ref:         ref("k8s.io/api/core/v1.PodAffinity"),
							},
						},
						"podAntiAffinity": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
								Ref:         ref("k8s.io/api/core/v1.PodAntiAffinity"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NodeAffinity", "k8s.io/api/core/v1.PodAffinity", "k8s.io/api/core/v1.PodAntiAffinity"},
		},
		"k8s.io/api/core/v1.AttachedVolume": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "AttachedVolume describes a volume attached to a node",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the attached volume",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"devicePath": {
							SchemaProps: spec.SchemaProps{
								Description: "DevicePath represents the device path where the volume should be available",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name", "devicePath"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.AvoidPods": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "AvoidPods describes pods that should avoid this node. This is the value for a Node annotation with key scheduler.alpha.kubernetes.io/preferAvoidPods and will eventually become a field of NodeStatus.",
					Properties: map[string]spec.Schema{
						"preferAvoidPods": {
							SchemaProps: spec.SchemaProps{
								Description: "Bounded-sized list of signatures of pods that should avoid this node, sorted in timestamp order from oldest to newest. Size of the slice is unspecified.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PreferAvoidPodsEntry"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PreferAvoidPodsEntry"},
		},
		"k8s.io/api/core/v1.AzureDiskVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
					Properties: map[string]spec.Schema{
						"diskName": {
							SchemaProps: spec.SchemaProps{
								Description: "The Name of the data disk in the blob storage",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"diskURI": {
							SchemaProps: spec.SchemaProps{
								Description: "The URI the data disk in the blob storage",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cachingMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Host Caching mode: None, Read Only, Read Write.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"diskName", "diskURI"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.AzureFilePersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
					Properties: map[string]spec.Schema{
						"secretName": {
							SchemaProps: spec.SchemaProps{
								Description: "the name of secret that contains Azure Storage Account Name and Key",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"shareName": {
							SchemaProps: spec.SchemaProps{
								Description: "Share Name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"secretNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"secretName", "shareName"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.AzureFileVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
					Properties: map[string]spec.Schema{
						"secretName": {
							SchemaProps: spec.SchemaProps{
								Description: "the name of secret that contains Azure Storage Account Name and Key",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"shareName": {
							SchemaProps: spec.SchemaProps{
								Description: "Share Name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"secretName", "shareName"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.Binding": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"target": {
							SchemaProps: spec.SchemaProps{
								Description: "The target object that you want to bind to the standard object.",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
					},
					Required: []string{"target"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.CSIPersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents storage that is managed by an external CSI volume driver (Beta feature)",
					Properties: map[string]spec.Schema{
						"driver": {
							SchemaProps: spec.SchemaProps{
								Description: "Driver is the name of the driver to use for this volume. Required.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumeHandle": {
							SchemaProps: spec.SchemaProps{
								Description: "VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumeAttributes": {
							SchemaProps: spec.SchemaProps{
								Description: "Attributes of the volume to publish.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"controllerPublishSecretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
								Ref:         ref("k8s.io/api/core/v1.SecretReference"),
							},
						},
						"nodeStageSecretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
								Ref:         ref("k8s.io/api/core/v1.SecretReference"),
							},
						},
						"nodePublishSecretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
								Ref:         ref("k8s.io/api/core/v1.SecretReference"),
							},
						},
					},
					Required: []string{"driver", "volumeHandle"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.SecretReference"},
		},
		"k8s.io/api/core/v1.Capabilities": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Adds and removes POSIX capabilities from running containers.",
					Properties: map[string]spec.Schema{
						"add": {
							SchemaProps: spec.SchemaProps{
								Description: "Added capabilities",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"drop": {
							SchemaProps: spec.SchemaProps{
								Description: "Removed capabilities",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.CephFSPersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"monitors": {
							SchemaProps: spec.SchemaProps{
								Description: "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Ref:         ref("k8s.io/api/core/v1.SecretReference"),
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"monitors"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.SecretReference"},
		},
		"k8s.io/api/core/v1.CephFSVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"monitors": {
							SchemaProps: spec.SchemaProps{
								Description: "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretFile": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"monitors"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LocalObjectReference"},
		},
		"k8s.io/api/core/v1.CinderVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"volumeID": {
							SchemaProps: spec.SchemaProps{
								Description: "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"volumeID"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ClientIPConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClientIPConfig represents the configurations of Client IP based session affinity.",
					Properties: map[string]spec.Schema{
						"timeoutSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ComponentCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Information about the condition of a component.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of condition for a component. Valid value: \"Healthy\"",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Message about the condition for a component. For example, information about a health check.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"error": {
							SchemaProps: spec.SchemaProps{
								Description: "Condition error code for a component. For example, a health check error code.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ComponentStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ComponentStatus (and ComponentStatusList) holds the cluster validation info.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"conditions": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "type",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of component conditions observed",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ComponentCondition"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ComponentCondition", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.ComponentStatusList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Status of all the conditions for the component as a list of ComponentStatus objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of ComponentStatus objects.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ComponentStatus"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ComponentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.ConfigMap": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ConfigMap holds configuration data for pods to consume.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"data": {
							SchemaProps: spec.SchemaProps{
								Description: "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"binaryData": {
							SchemaProps: spec.SchemaProps{
								Description: "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "byte",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.ConfigMapEnvSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"optional": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify whether the ConfigMap must be defined",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ConfigMapKeySelector": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Selects a key from a ConfigMap.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "The key to select.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"optional": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify whether the ConfigMap or it's key must be defined",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"key"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ConfigMapList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ConfigMapList is a resource containing a list of ConfigMap objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is the list of ConfigMaps.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ConfigMap"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ConfigMap", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.ConfigMapProjection": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.KeyToPath"),
										},
									},
								},
							},
						},
						"optional": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify whether the ConfigMap or it's keys must be defined",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.KeyToPath"},
		},
		"k8s.io/api/core/v1.ConfigMapVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.KeyToPath"),
										},
									},
								},
							},
						},
						"defaultMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"optional": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify whether the ConfigMap or it's keys must be defined",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.KeyToPath"},
		},
		"k8s.io/api/core/v1.Container": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A single application container that you want to run within a pod.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"command": {
							SchemaProps: spec.SchemaProps{
								Description: "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"args": {
							SchemaProps: spec.SchemaProps{
								Description: "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"workingDir": {
							SchemaProps: spec.SchemaProps{
								Description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ports": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "containerPort",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ContainerPort"),
										},
									},
								},
							},
						},
						"envFrom": {
							SchemaProps: spec.SchemaProps{
								Description: "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.EnvFromSource"),
										},
									},
								},
							},
						},
						"env": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "name",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of environment variables to set in the container. Cannot be updated.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.EnvVar"),
										},
									},
								},
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"volumeMounts": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "mountPath",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.VolumeMount"),
										},
									},
								},
							},
						},
						"volumeDevices": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "devicePath",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.VolumeDevice"),
										},
									},
								},
							},
						},
						"livenessProbe": {
							SchemaProps: spec.SchemaProps{
								Description: "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
								Ref:         ref("k8s.io/api/core/v1.Probe"),
							},
						},
						"readinessProbe": {
							SchemaProps: spec.SchemaProps{
								Description: "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
								Ref:         ref("k8s.io/api/core/v1.Probe"),
							},
						},
						"lifecycle": {
							SchemaProps: spec.SchemaProps{
								Description: "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
								Ref:         ref("k8s.io/api/core/v1.Lifecycle"),
							},
						},
						"terminationMessagePath": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"terminationMessagePolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"imagePullPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"securityContext": {
							SchemaProps: spec.SchemaProps{
								Description: "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
								Ref:         ref("k8s.io/api/core/v1.SecurityContext"),
							},
						},
						"stdin": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"stdinOnce": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"tty": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ContainerPort", "k8s.io/api/core/v1.EnvFromSource", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.Lifecycle", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecurityContext", "k8s.io/api/core/v1.VolumeDevice", "k8s.io/api/core/v1.VolumeMount"},
		},
		"k8s.io/api/core/v1.ContainerImage": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Describe a container image",
					Properties: map[string]spec.Schema{
						"names": {
							SchemaProps: spec.SchemaProps{
								Description: "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"sizeBytes": {
							SchemaProps: spec.SchemaProps{
								Description: "The size of the image in bytes.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
					Required: []string{"names"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ContainerPort": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ContainerPort represents a network port in a single container.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostPort": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"containerPort": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"protocol": {
							SchemaProps: spec.SchemaProps{
								Description: "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostIP": {
							SchemaProps: spec.SchemaProps{
								Description: "What host IP to bind the external port to.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"containerPort"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ContainerState": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
					Properties: map[string]spec.Schema{
						"waiting": {
							SchemaProps: spec.SchemaProps{
								Description: "Details about a waiting container",
								Ref:         ref("k8s.io/api/core/v1.ContainerStateWaiting"),
							},
						},
						"running": {
							SchemaProps: spec.SchemaProps{
								Description: "Details about a running container",
								Ref:         ref("k8s.io/api/core/v1.ContainerStateRunning"),
							},
						},
						"terminated": {
							SchemaProps: spec.SchemaProps{
								Description: "Details about a terminated container",
								Ref:         ref("k8s.io/api/core/v1.ContainerStateTerminated"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ContainerStateRunning", "k8s.io/api/core/v1.ContainerStateTerminated", "k8s.io/api/core/v1.ContainerStateWaiting"},
		},
		"k8s.io/api/core/v1.ContainerStateRunning": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ContainerStateRunning is a running state of a container.",
					Properties: map[string]spec.Schema{
						"startedAt": {
							SchemaProps: spec.SchemaProps{
								Description: "Time at which the container was last (re-)started",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.ContainerStateTerminated": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ContainerStateTerminated is a terminated state of a container.",
					Properties: map[string]spec.Schema{
						"exitCode": {
							SchemaProps: spec.SchemaProps{
								Description: "Exit status from the last termination of the container",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"signal": {
							SchemaProps: spec.SchemaProps{
								Description: "Signal from the last termination of the container",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "(brief) reason from the last termination of the container",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Message regarding the last termination of the container",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"startedAt": {
							SchemaProps: spec.SchemaProps{
								Description: "Time at which previous execution of the container started",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"finishedAt": {
							SchemaProps: spec.SchemaProps{
								Description: "Time at which the container last terminated",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"containerID": {
							SchemaProps: spec.SchemaProps{
								Description: "Container's ID in the format 'docker://<container_id>'",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"exitCode"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.ContainerStateWaiting": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ContainerStateWaiting is a waiting state of a container.",
					Properties: map[string]spec.Schema{
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "(brief) reason the container is not yet running.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Message regarding why the container is not yet running.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ContainerStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ContainerStatus contains details for the current status of this container.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"state": {
							SchemaProps: spec.SchemaProps{
								Description: "Details about the container's current condition.",
								Ref:         ref("k8s.io/api/core/v1.ContainerState"),
							},
						},
						"lastState": {
							SchemaProps: spec.SchemaProps{
								Description: "Details about the container's last termination condition.",
								Ref:         ref("k8s.io/api/core/v1.ContainerState"),
							},
						},
						"ready": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies whether the container has passed its readiness probe.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"restartCount": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Description: "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"imageID": {
							SchemaProps: spec.SchemaProps{
								Description: "ImageID of the container's image.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"containerID": {
							SchemaProps: spec.SchemaProps{
								Description: "Container's ID in the format 'docker://<container_id>'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name", "ready", "restartCount", "image", "imageID"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ContainerState"},
		},
		"k8s.io/api/core/v1.DaemonEndpoint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DaemonEndpoint contains information about a single Daemon endpoint.",
					Properties: map[string]spec.Schema{
						"Port": {
							SchemaProps: spec.SchemaProps{
								Description: "Port number of the given endpoint.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"Port"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.DownwardAPIProjection": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
					Properties: map[string]spec.Schema{
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of DownwardAPIVolume file",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.DownwardAPIVolumeFile"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.DownwardAPIVolumeFile"},
		},
		"k8s.io/api/core/v1.DownwardAPIVolumeFile": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DownwardAPIVolumeFile represents information to create the file containing the pod field",
					Properties: map[string]spec.Schema{
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fieldRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
								Ref:         ref("k8s.io/api/core/v1.ObjectFieldSelector"),
							},
						},
						"resourceFieldRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
								Ref:         ref("k8s.io/api/core/v1.ResourceFieldSelector"),
							},
						},
						"mode": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"path"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ObjectFieldSelector", "k8s.io/api/core/v1.ResourceFieldSelector"},
		},
		"k8s.io/api/core/v1.DownwardAPIVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of downward API volume file",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.DownwardAPIVolumeFile"),
										},
									},
								},
							},
						},
						"defaultMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.DownwardAPIVolumeFile"},
		},
		"k8s.io/api/core/v1.EmptyDirVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"medium": {
							SchemaProps: spec.SchemaProps{
								Description: "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"sizeLimit": {
							SchemaProps: spec.SchemaProps{
								Description: "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
								Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.EndpointAddress": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EndpointAddress is a tuple that describes single IP address.",
					Properties: map[string]spec.Schema{
						"ip": {
							SchemaProps: spec.SchemaProps{
								Description: "The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostname": {
							SchemaProps: spec.SchemaProps{
								Description: "The Hostname of this endpoint",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodeName": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"targetRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Reference to object providing the endpoint.",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
					},
					Required: []string{"ip"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ObjectReference"},
		},
		"k8s.io/api/core/v1.EndpointPort": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EndpointPort is a tuple that describes a single port.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "The port number of the endpoint.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"protocol": {
							SchemaProps: spec.SchemaProps{
								Description: "The IP protocol for this port. Must be UDP or TCP. Default is TCP.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"port"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.EndpointSubset": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]",
					Properties: map[string]spec.Schema{
						"addresses": {
							SchemaProps: spec.SchemaProps{
								Description: "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.EndpointAddress"),
										},
									},
								},
							},
						},
						"notReadyAddresses": {
							SchemaProps: spec.SchemaProps{
								Description: "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.EndpointAddress"),
										},
									},
								},
							},
						},
						"ports": {
							SchemaProps: spec.SchemaProps{
								Description: "Port numbers available on the related IP addresses.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.EndpointPort"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.EndpointAddress", "k8s.io/api/core/v1.EndpointPort"},
		},
		"k8s.io/api/core/v1.Endpoints": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"subsets": {
							SchemaProps: spec.SchemaProps{
								Description: "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.EndpointSubset"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.EndpointSubset", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.EndpointsList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EndpointsList is a list of endpoints.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of endpoints.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Endpoints"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Endpoints", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.EnvFromSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EnvFromSource represents the source of a set of ConfigMaps",
					Properties: map[string]spec.Schema{
						"prefix": {
							SchemaProps: spec.SchemaProps{
								Description: "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"configMapRef": {
							SchemaProps: spec.SchemaProps{
								Description: "The ConfigMap to select from",
								Ref:         ref("k8s.io/api/core/v1.ConfigMapEnvSource"),
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "The Secret to select from",
								Ref:         ref("k8s.io/api/core/v1.SecretEnvSource"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ConfigMapEnvSource", "k8s.io/api/core/v1.SecretEnvSource"},
		},
		"k8s.io/api/core/v1.EnvVar": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EnvVar represents an environment variable present in a Container.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Description: "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"valueFrom": {
							SchemaProps: spec.SchemaProps{
								Description: "Source for the environment variable's value. Cannot be used if value is not empty.",
								Ref:         ref("k8s.io/api/core/v1.EnvVarSource"),
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.EnvVarSource"},
		},
		"k8s.io/api/core/v1.EnvVarSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EnvVarSource represents a source for the value of an EnvVar.",
					Properties: map[string]spec.Schema{
						"fieldRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.",
								Ref:         ref("k8s.io/api/core/v1.ObjectFieldSelector"),
							},
						},
						"resourceFieldRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
								Ref:         ref("k8s.io/api/core/v1.ResourceFieldSelector"),
							},
						},
						"configMapKeyRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Selects a key of a ConfigMap.",
								Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
							},
						},
						"secretKeyRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Selects a key of a secret in the pod's namespace",
								Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ConfigMapKeySelector", "k8s.io/api/core/v1.ObjectFieldSelector", "k8s.io/api/core/v1.ResourceFieldSelector", "k8s.io/api/core/v1.SecretKeySelector"},
		},
		"k8s.io/api/core/v1.Event": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Event is a report of an event somewhere in the cluster.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"involvedObject": {
							SchemaProps: spec.SchemaProps{
								Description: "The object that this event is about.",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human-readable description of the status of this operation.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"source": {
							SchemaProps: spec.SchemaProps{
								Description: "The component reporting this event. Should be a short machine understandable string.",
								Ref:         ref("k8s.io/api/core/v1.EventSource"),
							},
						},
						"firstTimestamp": {
							SchemaProps: spec.SchemaProps{
								Description: "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTimestamp": {
							SchemaProps: spec.SchemaProps{
								Description: "The time at which the most recent occurrence of this event was recorded.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"count": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of times this event has occurred.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of this event (Normal, Warning), new types could be added in the future",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"eventTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Time when this Event was first observed.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"),
							},
						},
						"series": {
							SchemaProps: spec.SchemaProps{
								Description: "Data about the Event series this event represents or nil if it's a singleton Event.",
								Ref:         ref("k8s.io/api/core/v1.EventSeries"),
							},
						},
						"action": {
							SchemaProps: spec.SchemaProps{
								Description: "What action was taken/failed regarding to the Regarding object.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"related": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional secondary object for more complex actions.",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
						"reportingComponent": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reportingInstance": {
							SchemaProps: spec.SchemaProps{
								Description: "ID of the controller instance, e.g. `kubelet-xyzf`.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"metadata", "involvedObject"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.EventSeries", "k8s.io/api/core/v1.EventSource", "k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.EventList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EventList is a list of events.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of events",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Event"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Event", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.EventSeries": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
					Properties: map[string]spec.Schema{
						"count": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of occurrences in this series up to the last heartbeat time",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"lastObservedTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Time of the last occurrence observed",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"),
							},
						},
						"state": {
							SchemaProps: spec.SchemaProps{
								Description: "State of this Series: Ongoing or Finished",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"},
		},
		"k8s.io/api/core/v1.EventSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "EventSource contains information for an event.",
					Properties: map[string]spec.Schema{
						"component": {
							SchemaProps: spec.SchemaProps{
								Description: "Component from which the event is generated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"host": {
							SchemaProps: spec.SchemaProps{
								Description: "Node name on which the event is generated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ExecAction": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ExecAction describes a \"run in container\" action.",
					Properties: map[string]spec.Schema{
						"command": {
							SchemaProps: spec.SchemaProps{
								Description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.FCVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"targetWWNs": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: FC target worldwide names (WWNs)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"lun": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: FC target lun number",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"wwids": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.FlexPersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
					Properties: map[string]spec.Schema{
						"driver": {
							SchemaProps: spec.SchemaProps{
								Description: "Driver is the name of the driver to use for this volume.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
								Ref:         ref("k8s.io/api/core/v1.SecretReference"),
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"options": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Extra command options if any.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"driver"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.SecretReference"},
		},
		"k8s.io/api/core/v1.FlexVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
					Properties: map[string]spec.Schema{
						"driver": {
							SchemaProps: spec.SchemaProps{
								Description: "Driver is the name of the driver to use for this volume.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
								Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"options": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Extra command options if any.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"driver"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LocalObjectReference"},
		},
		"k8s.io/api/core/v1.FlockerVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"datasetName": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"datasetUUID": {
							SchemaProps: spec.SchemaProps{
								Description: "UUID of the dataset. This is unique identifier of a Flocker dataset",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.GCEPersistentDiskVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"pdName": {
							SchemaProps: spec.SchemaProps{
								Description: "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"partition": {
							SchemaProps: spec.SchemaProps{
								Description: "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"pdName"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.GitRepoVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"repository": {
							SchemaProps: spec.SchemaProps{
								Description: "Repository URL",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"revision": {
							SchemaProps: spec.SchemaProps{
								Description: "Commit hash for the specified revision.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"directory": {
							SchemaProps: spec.SchemaProps{
								Description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"repository"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.GlusterfsVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"endpoints": {
							SchemaProps: spec.SchemaProps{
								Description: "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"endpoints", "path"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.HTTPGetAction": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HTTPGetAction describes an action based on HTTP Get requests.",
					Properties: map[string]spec.Schema{
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Path to access on the HTTP server.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"host": {
							SchemaProps: spec.SchemaProps{
								Description: "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"scheme": {
							SchemaProps: spec.SchemaProps{
								Description: "Scheme to use for connecting to the host. Defaults to HTTP.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"httpHeaders": {
							SchemaProps: spec.SchemaProps{
								Description: "Custom headers to set in the request. HTTP allows repeated headers.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.HTTPHeader"),
										},
									},
								},
							},
						},
					},
					Required: []string{"port"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.HTTPHeader", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
		},
		"k8s.io/api/core/v1.HTTPHeader": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HTTPHeader describes a custom header to be used in HTTP probes",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The header field name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Description: "The header field value",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name", "value"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.Handler": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Handler defines a specific action that should be taken",
					Properties: map[string]spec.Schema{
						"exec": {
							SchemaProps: spec.SchemaProps{
								Description: "One and only one of the following should be specified. Exec specifies the action to take.",
								Ref:         ref("k8s.io/api/core/v1.ExecAction"),
							},
						},
						"httpGet": {
							SchemaProps: spec.SchemaProps{
								Description: "HTTPGet specifies the http request to perform.",
								Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
							},
						},
						"tcpSocket": {
							SchemaProps: spec.SchemaProps{
								Description: "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
								Ref:         ref("k8s.io/api/core/v1.TCPSocketAction"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ExecAction", "k8s.io/api/core/v1.HTTPGetAction", "k8s.io/api/core/v1.TCPSocketAction"},
		},
		"k8s.io/api/core/v1.HostAlias": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
					Properties: map[string]spec.Schema{
						"ip": {
							SchemaProps: spec.SchemaProps{
								Description: "IP address of the host file entry.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostnames": {
							SchemaProps: spec.SchemaProps{
								Description: "Hostnames for the above IP address.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.HostPathVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"path"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ISCSIPersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"targetPortal": {
							SchemaProps: spec.SchemaProps{
								Description: "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"iqn": {
							SchemaProps: spec.SchemaProps{
								Description: "Target iSCSI Qualified Name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lun": {
							SchemaProps: spec.SchemaProps{
								Description: "iSCSI Target Lun number.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"iscsiInterface": {
							SchemaProps: spec.SchemaProps{
								Description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"portals": {
							SchemaProps: spec.SchemaProps{
								Description: "iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"chapAuthDiscovery": {
							SchemaProps: spec.SchemaProps{
								Description: "whether support iSCSI Discovery CHAP authentication",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"chapAuthSession": {
							SchemaProps: spec.SchemaProps{
								Description: "whether support iSCSI Session CHAP authentication",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "CHAP Secret for iSCSI target and initiator authentication",
								Ref:         ref("k8s.io/api/core/v1.SecretReference"),
							},
						},
						"initiatorName": {
							SchemaProps: spec.SchemaProps{
								Description: "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"targetPortal", "iqn", "lun"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.SecretReference"},
		},
		"k8s.io/api/core/v1.ISCSIVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"targetPortal": {
							SchemaProps: spec.SchemaProps{
								Description: "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"iqn": {
							SchemaProps: spec.SchemaProps{
								Description: "Target iSCSI Qualified Name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lun": {
							SchemaProps: spec.SchemaProps{
								Description: "iSCSI Target Lun number.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"iscsiInterface": {
							SchemaProps: spec.SchemaProps{
								Description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"portals": {
							SchemaProps: spec.SchemaProps{
								Description: "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"chapAuthDiscovery": {
							SchemaProps: spec.SchemaProps{
								Description: "whether support iSCSI Discovery CHAP authentication",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"chapAuthSession": {
							SchemaProps: spec.SchemaProps{
								Description: "whether support iSCSI Session CHAP authentication",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "CHAP Secret for iSCSI target and initiator authentication",
								Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
							},
						},
						"initiatorName": {
							SchemaProps: spec.SchemaProps{
								Description: "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"targetPortal", "iqn", "lun"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LocalObjectReference"},
		},
		"k8s.io/api/core/v1.KeyToPath": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Maps a string key to a path within a volume.",
					Properties: map[string]spec.Schema{
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "The key to project.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"mode": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"key", "path"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.Lifecycle": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
					Properties: map[string]spec.Schema{
						"postStart": {
							SchemaProps: spec.SchemaProps{
								Description: "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
								Ref:         ref("k8s.io/api/core/v1.Handler"),
							},
						},
						"preStop": {
							SchemaProps: spec.SchemaProps{
								Description: "PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
								Ref:         ref("k8s.io/api/core/v1.Handler"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Handler"},
		},
		"k8s.io/api/core/v1.LimitRange": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.LimitRangeSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LimitRangeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.LimitRangeItem": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of resource that this limit applies to.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"max": {
							SchemaProps: spec.SchemaProps{
								Description: "Max usage constraints on this kind by resource name.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"min": {
							SchemaProps: spec.SchemaProps{
								Description: "Min usage constraints on this kind by resource name.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"default": {
							SchemaProps: spec.SchemaProps{
								Description: "Default resource requirement limit value by resource name if resource limit is omitted.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"defaultRequest": {
							SchemaProps: spec.SchemaProps{
								Description: "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"maxLimitRequestRatio": {
							SchemaProps: spec.SchemaProps{
								Description: "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.LimitRangeList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LimitRangeList is a list of LimitRange items.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LimitRange"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LimitRange", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.LimitRangeSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
					Properties: map[string]spec.Schema{
						"limits": {
							SchemaProps: spec.SchemaProps{
								Description: "Limits is the list of LimitRangeItem objects that are enforced.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LimitRangeItem"),
										},
									},
								},
							},
						},
					},
					Required: []string{"limits"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LimitRangeItem"},
		},
		"k8s.io/api/core/v1.List": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "List holds a list of objects, which may not be known by the server.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
		},
		"k8s.io/api/core/v1.LoadBalancerIngress": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
					Properties: map[string]spec.Schema{
						"ip": {
							SchemaProps: spec.SchemaProps{
								Description: "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostname": {
							SchemaProps: spec.SchemaProps{
								Description: "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.LoadBalancerStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LoadBalancerStatus represents the status of a load-balancer.",
					Properties: map[string]spec.Schema{
						"ingress": {
							SchemaProps: spec.SchemaProps{
								Description: "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LoadBalancerIngress"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LoadBalancerIngress"},
		},
		"k8s.io/api/core/v1.LocalObjectReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.LocalVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Local represents directly-attached storage with node affinity",
					Properties: map[string]spec.Schema{
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "The full path to the volume on the node For alpha, this path must be a directory Once block as a source is supported, then this path can point to a block device",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"path"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.NFSVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"server": {
							SchemaProps: spec.SchemaProps{
								Description: "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"server", "path"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.Namespace": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.NamespaceSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.NamespaceStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NamespaceSpec", "k8s.io/api/core/v1.NamespaceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.NamespaceList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NamespaceList is a list of Namespaces.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Namespace"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Namespace", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.NamespaceSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NamespaceSpec describes the attributes on a Namespace.",
					Properties: map[string]spec.Schema{
						"finalizers": {
							SchemaProps: spec.SchemaProps{
								Description: "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.NamespaceStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NamespaceStatus is information about the current status of a Namespace.",
					Properties: map[string]spec.Schema{
						"phase": {
							SchemaProps: spec.SchemaProps{
								Description: "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.Node": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.NodeSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.NodeStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NodeSpec", "k8s.io/api/core/v1.NodeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.NodeAddress": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeAddress contains information for the node's address.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Node address type, one of Hostname, ExternalIP or InternalIP.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"address": {
							SchemaProps: spec.SchemaProps{
								Description: "The node address.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "address"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.NodeAffinity": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Node affinity is a group of node affinity scheduling rules.",
					Properties: map[string]spec.Schema{
						"requiredDuringSchedulingIgnoredDuringExecution": {
							SchemaProps: spec.SchemaProps{
								Description: "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
								Ref:         ref("k8s.io/api/core/v1.NodeSelector"),
							},
						},
						"preferredDuringSchedulingIgnoredDuringExecution": {
							SchemaProps: spec.SchemaProps{
								Description: "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PreferredSchedulingTerm"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NodeSelector", "k8s.io/api/core/v1.PreferredSchedulingTerm"},
		},
		"k8s.io/api/core/v1.NodeCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeCondition contains condition information for a node.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of node condition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of True, False, Unknown.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastHeartbeatTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time we got an update on a given condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transit from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "(brief) reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Human readable message indicating details about last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.NodeConfigSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"configMapRef": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ObjectReference"},
		},
		"k8s.io/api/core/v1.NodeDaemonEndpoints": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
					Properties: map[string]spec.Schema{
						"kubeletEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "Endpoint on which Kubelet is listening.",
								Ref:         ref("k8s.io/api/core/v1.DaemonEndpoint"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.DaemonEndpoint"},
		},
		"k8s.io/api/core/v1.NodeList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeList is the whole list of all Nodes which have been registered with master.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of nodes",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Node"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Node", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.NodeProxyOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeProxyOptions is the query options to a Node's proxy call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Path is the URL path to use for the current proxy request to node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.NodeResources": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeResources is an object for conveying resource information about a node. see http://releases.k8s.io/HEAD/docs/design/resources.md for more details.",
					Properties: map[string]spec.Schema{
						"Capacity": {
							SchemaProps: spec.SchemaProps{
								Description: "Capacity represents the available resources of a node",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
					},
					Required: []string{"Capacity"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.NodeSelector": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
					Properties: map[string]spec.Schema{
						"nodeSelectorTerms": {
							SchemaProps: spec.SchemaProps{
								Description: "Required. A list of node selector terms. The terms are ORed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.NodeSelectorTerm"),
										},
									},
								},
							},
						},
					},
					Required: []string{"nodeSelectorTerms"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NodeSelectorTerm"},
		},
		"k8s.io/api/core/v1.NodeSelectorRequirement": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
					Properties: map[string]spec.Schema{
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "The label key that the selector applies to.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"operator": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"values": {
							SchemaProps: spec.SchemaProps{
								Description: "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"key", "operator"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.NodeSelectorTerm": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A null or empty node selector term matches no objects.",
					Properties: map[string]spec.Schema{
						"matchExpressions": {
							SchemaProps: spec.SchemaProps{
								Description: "Required. A list of node selector requirements. The requirements are ANDed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.NodeSelectorRequirement"),
										},
									},
								},
							},
						},
					},
					Required: []string{"matchExpressions"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NodeSelectorRequirement"},
		},
		"k8s.io/api/core/v1.NodeSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeSpec describes the attributes that a node is created with.",
					Properties: map[string]spec.Schema{
						"podCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "PodCIDR represents the pod IP range assigned to the node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"externalID": {
							SchemaProps: spec.SchemaProps{
								Description: "External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"providerID": {
							SchemaProps: spec.SchemaProps{
								Description: "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"unschedulable": {
							SchemaProps: spec.SchemaProps{
								Description: "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"taints": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the node's taints.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Taint"),
										},
									},
								},
							},
						},
						"configSource": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field",
								Ref:         ref("k8s.io/api/core/v1.NodeConfigSource"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NodeConfigSource", "k8s.io/api/core/v1.Taint"},
		},
		"k8s.io/api/core/v1.NodeStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeStatus is information about the current status of a node.",
					Properties: map[string]spec.Schema{
						"capacity": {
							SchemaProps: spec.SchemaProps{
								Description: "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"allocatable": {
							SchemaProps: spec.SchemaProps{
								Description: "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Description: "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"conditions": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "type",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.NodeCondition"),
										},
									},
								},
							},
						},
						"addresses": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "type",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.NodeAddress"),
										},
									},
								},
							},
						},
						"daemonEndpoints": {
							SchemaProps: spec.SchemaProps{
								Description: "Endpoints of daemons running on the Node.",
								Ref:         ref("k8s.io/api/core/v1.NodeDaemonEndpoints"),
							},
						},
						"nodeInfo": {
							SchemaProps: spec.SchemaProps{
								Description: "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info",
								Ref:         ref("k8s.io/api/core/v1.NodeSystemInfo"),
							},
						},
						"images": {
							SchemaProps: spec.SchemaProps{
								Description: "List of container images on this node",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ContainerImage"),
										},
									},
								},
							},
						},
						"volumesInUse": {
							SchemaProps: spec.SchemaProps{
								Description: "List of attachable volumes in use (mounted) by the node.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"volumesAttached": {
							SchemaProps: spec.SchemaProps{
								Description: "List of volumes that are attached to the node.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.AttachedVolume"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.AttachedVolume", "k8s.io/api/core/v1.ContainerImage", "k8s.io/api/core/v1.NodeAddress", "k8s.io/api/core/v1.NodeCondition", "k8s.io/api/core/v1.NodeDaemonEndpoints", "k8s.io/api/core/v1.NodeSystemInfo", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.NodeSystemInfo": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
					Properties: map[string]spec.Schema{
						"machineID": {
							SchemaProps: spec.SchemaProps{
								Description: "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"systemUUID": {
							SchemaProps: spec.SchemaProps{
								Description: "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"bootID": {
							SchemaProps: spec.SchemaProps{
								Description: "Boot ID reported by the node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kernelVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"osImage": {
							SchemaProps: spec.SchemaProps{
								Description: "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"containerRuntimeVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeletVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "Kubelet Version reported by the node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeProxyVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "KubeProxy Version reported by the node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"operatingSystem": {
							SchemaProps: spec.SchemaProps{
								Description: "The Operating System reported by the node",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"architecture": {
							SchemaProps: spec.SchemaProps{
								Description: "The Architecture reported by the node",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"machineID", "systemUUID", "bootID", "kernelVersion", "osImage", "containerRuntimeVersion", "kubeletVersion", "kubeProxyVersion", "operatingSystem", "architecture"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ObjectFieldSelector": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ObjectFieldSelector selects an APIVersioned field of an object.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fieldPath": {
							SchemaProps: spec.SchemaProps{
								Description: "Path of the field to select in the specified API version.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"fieldPath"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ObjectReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ObjectReference contains enough information to let you inspect or modify the referred object.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "API version of the referent.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fieldPath": {
							SchemaProps: spec.SchemaProps{
								Description: "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PersistentVolume": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PersistentVolumeSpec", "k8s.io/api/core/v1.PersistentVolumeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.PersistentVolumeClaim": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.PersistentVolumeClaimStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.PersistentVolumeClaimCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeClaimCondition contails details about state of pvc",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"lastProbeTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time we probed the condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transitioned from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Human-readable message indicating details about last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.PersistentVolumeClaimList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PersistentVolumeClaim", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.PersistentVolumeClaimSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
					Properties: map[string]spec.Schema{
						"accessModes": {
							SchemaProps: spec.SchemaProps{
								Description: "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "A label query over volumes to consider for binding.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"volumeName": {
							SchemaProps: spec.SchemaProps{
								Description: "VolumeName is the binding reference to the PersistentVolume backing this claim.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storageClassName": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumeMode": {
							SchemaProps: spec.SchemaProps{
								Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is an alpha feature and may change in the future.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ResourceRequirements", "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
		},
		"k8s.io/api/core/v1.PersistentVolumeClaimStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
					Properties: map[string]spec.Schema{
						"phase": {
							SchemaProps: spec.SchemaProps{
								Description: "Phase represents the current phase of PersistentVolumeClaim.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"accessModes": {
							SchemaProps: spec.SchemaProps{
								Description: "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"capacity": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents the actual resources of the underlying volume.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"conditions": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "type",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaimCondition"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PersistentVolumeClaimCondition", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
					Properties: map[string]spec.Schema{
						"claimName": {
							SchemaProps: spec.SchemaProps{
								Description: "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Will force the ReadOnly setting in VolumeMounts. Default false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"claimName"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PersistentVolumeList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeList is a list of PersistentVolume items.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PersistentVolume"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PersistentVolume", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.PersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeSource is similar to VolumeSource but meant for the administrator who creates PVs. Exactly one of its members must be set.",
					Properties: map[string]spec.Schema{
						"gcePersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
							},
						},
						"awsElasticBlockStore": {
							SchemaProps: spec.SchemaProps{
								Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
							},
						},
						"hostPath": {
							SchemaProps: spec.SchemaProps{
								Description: "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
								Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
							},
						},
						"glusterfs": {
							SchemaProps: spec.SchemaProps{
								Description: "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md",
								Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
							},
						},
						"nfs": {
							SchemaProps: spec.SchemaProps{
								Description: "NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
							},
						},
						"rbd": {
							SchemaProps: spec.SchemaProps{
								Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md",
								Ref:         ref("k8s.io/api/core/v1.RBDPersistentVolumeSource"),
							},
						},
						"iscsi": {
							SchemaProps: spec.SchemaProps{
								Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
								Ref:         ref("k8s.io/api/core/v1.ISCSIPersistentVolumeSource"),
							},
						},
						"cinder": {
							SchemaProps: spec.SchemaProps{
								Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
							},
						},
						"cephfs": {
							SchemaProps: spec.SchemaProps{
								Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.CephFSPersistentVolumeSource"),
							},
						},
						"fc": {
							SchemaProps: spec.SchemaProps{
								Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
								Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
							},
						},
						"flocker": {
							SchemaProps: spec.SchemaProps{
								Description: "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running",
								Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
							},
						},
						"flexVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
								Ref:         ref("k8s.io/api/core/v1.FlexPersistentVolumeSource"),
							},
						},
						"azureFile": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureFilePersistentVolumeSource"),
							},
						},
						"vsphereVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
							},
						},
						"quobyte": {
							SchemaProps: spec.SchemaProps{
								Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
							},
						},
						"azureDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
							},
						},
						"photonPersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
							},
						},
						"portworxVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
							},
						},
						"scaleIO": {
							SchemaProps: spec.SchemaProps{
								Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.ScaleIOPersistentVolumeSource"),
							},
						},
						"local": {
							SchemaProps: spec.SchemaProps{
								Description: "Local represents directly-attached storage with node affinity",
								Ref:         ref("k8s.io/api/core/v1.LocalVolumeSource"),
							},
						},
						"storageos": {
							SchemaProps: spec.SchemaProps{
								Description: "StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md",
								Ref:         ref("k8s.io/api/core/v1.StorageOSPersistentVolumeSource"),
							},
						},
						"csi": {
							SchemaProps: spec.SchemaProps{
								Description: "CSI represents storage that handled by an external CSI driver (Beta feature).",
								Ref:         ref("k8s.io/api/core/v1.CSIPersistentVolumeSource"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFilePersistentVolumeSource", "k8s.io/api/core/v1.CSIPersistentVolumeSource", "k8s.io/api/core/v1.CephFSPersistentVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexPersistentVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIPersistentVolumeSource", "k8s.io/api/core/v1.LocalVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDPersistentVolumeSource", "k8s.io/api/core/v1.ScaleIOPersistentVolumeSource", "k8s.io/api/core/v1.StorageOSPersistentVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
		},
		"k8s.io/api/core/v1.PersistentVolumeSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeSpec is the specification of a persistent volume.",
					Properties: map[string]spec.Schema{
						"capacity": {
							SchemaProps: spec.SchemaProps{
								Description: "A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"gcePersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
							},
						},
						"awsElasticBlockStore": {
							SchemaProps: spec.SchemaProps{
								Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
							},
						},
						"hostPath": {
							SchemaProps: spec.SchemaProps{
								Description: "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
								Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
							},
						},
						"glusterfs": {
							SchemaProps: spec.SchemaProps{
								Description: "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md",
								Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
							},
						},
						"nfs": {
							SchemaProps: spec.SchemaProps{
								Description: "NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
							},
						},
						"rbd": {
							SchemaProps: spec.SchemaProps{
								Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md",
								Ref:         ref("k8s.io/api/core/v1.RBDPersistentVolumeSource"),
							},
						},
						"iscsi": {
							SchemaProps: spec.SchemaProps{
								Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
								Ref:         ref("k8s.io/api/core/v1.ISCSIPersistentVolumeSource"),
							},
						},
						"cinder": {
							SchemaProps: spec.SchemaProps{
								Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
							},
						},
						"cephfs": {
							SchemaProps: spec.SchemaProps{
								Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.CephFSPersistentVolumeSource"),
							},
						},
						"fc": {
							SchemaProps: spec.SchemaProps{
								Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
								Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
							},
						},
						"flocker": {
							SchemaProps: spec.SchemaProps{
								Description: "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running",
								Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
							},
						},
						"flexVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
								Ref:         ref("k8s.io/api/core/v1.FlexPersistentVolumeSource"),
							},
						},
						"azureFile": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureFilePersistentVolumeSource"),
							},
						},
						"vsphereVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
							},
						},
						"quobyte": {
							SchemaProps: spec.SchemaProps{
								Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
							},
						},
						"azureDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
							},
						},
						"photonPersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
							},
						},
						"portworxVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
							},
						},
						"scaleIO": {
							SchemaProps: spec.SchemaProps{
								Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.ScaleIOPersistentVolumeSource"),
							},
						},
						"local": {
							SchemaProps: spec.SchemaProps{
								Description: "Local represents directly-attached storage with node affinity",
								Ref:         ref("k8s.io/api/core/v1.LocalVolumeSource"),
							},
						},
						"storageos": {
							SchemaProps: spec.SchemaProps{
								Description: "StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md",
								Ref:         ref("k8s.io/api/core/v1.StorageOSPersistentVolumeSource"),
							},
						},
						"csi": {
							SchemaProps: spec.SchemaProps{
								Description: "CSI represents storage that handled by an external CSI driver (Beta feature).",
								Ref:         ref("k8s.io/api/core/v1.CSIPersistentVolumeSource"),
							},
						},
						"accessModes": {
							SchemaProps: spec.SchemaProps{
								Description: "AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"claimRef": {
							SchemaProps: spec.SchemaProps{
								Description: "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
						"persistentVolumeReclaimPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storageClassName": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"mountOptions": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"volumeMode": {
							SchemaProps: spec.SchemaProps{
								Description: "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is an alpha feature and may change in the future.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodeAffinity": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.",
								Ref:         ref("k8s.io/api/core/v1.VolumeNodeAffinity"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFilePersistentVolumeSource", "k8s.io/api/core/v1.CSIPersistentVolumeSource", "k8s.io/api/core/v1.CephFSPersistentVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexPersistentVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIPersistentVolumeSource", "k8s.io/api/core/v1.LocalVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.ObjectReference", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDPersistentVolumeSource", "k8s.io/api/core/v1.ScaleIOPersistentVolumeSource", "k8s.io/api/core/v1.StorageOSPersistentVolumeSource", "k8s.io/api/core/v1.VolumeNodeAffinity", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.PersistentVolumeStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PersistentVolumeStatus is the current status of a persistent volume.",
					Properties: map[string]spec.Schema{
						"phase": {
							SchemaProps: spec.SchemaProps{
								Description: "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human-readable message indicating details about why the volume is in this state.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Photon Controller persistent disk resource.",
					Properties: map[string]spec.Schema{
						"pdID": {
							SchemaProps: spec.SchemaProps{
								Description: "ID that identifies Photon Controller persistent disk",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"pdID"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.Pod": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.PodSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.PodStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodSpec", "k8s.io/api/core/v1.PodStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.PodAffinity": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Pod affinity is a group of inter pod affinity scheduling rules.",
					Properties: map[string]spec.Schema{
						"requiredDuringSchedulingIgnoredDuringExecution": {
							SchemaProps: spec.SchemaProps{
								Description: "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PodAffinityTerm"),
										},
									},
								},
							},
						},
						"preferredDuringSchedulingIgnoredDuringExecution": {
							SchemaProps: spec.SchemaProps{
								Description: "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.WeightedPodAffinityTerm"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodAffinityTerm", "k8s.io/api/core/v1.WeightedPodAffinityTerm"},
		},
		"k8s.io/api/core/v1.PodAffinityTerm": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
					Properties: map[string]spec.Schema{
						"labelSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "A label query over a set of resources, in this case pods.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
							},
						},
						"namespaces": {
							SchemaProps: spec.SchemaProps{
								Description: "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"topologyKey": {
							SchemaProps: spec.SchemaProps{
								Description: "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"topologyKey"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
		},
		"k8s.io/api/core/v1.PodAntiAffinity": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
					Properties: map[string]spec.Schema{
						"requiredDuringSchedulingIgnoredDuringExecution": {
							SchemaProps: spec.SchemaProps{
								Description: "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PodAffinityTerm"),
										},
									},
								},
							},
						},
						"preferredDuringSchedulingIgnoredDuringExecution": {
							SchemaProps: spec.SchemaProps{
								Description: "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.WeightedPodAffinityTerm"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodAffinityTerm", "k8s.io/api/core/v1.WeightedPodAffinityTerm"},
		},
		"k8s.io/api/core/v1.PodAttachOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodAttachOptions is the query options to a Pod's remote attach call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"stdin": {
							SchemaProps: spec.SchemaProps{
								Description: "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"stdout": {
							SchemaProps: spec.SchemaProps{
								Description: "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"stderr": {
							SchemaProps: spec.SchemaProps{
								Description: "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"tty": {
							SchemaProps: spec.SchemaProps{
								Description: "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"container": {
							SchemaProps: spec.SchemaProps{
								Description: "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PodCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodCondition contains details for the current condition of this pod.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type is the type of the condition. Currently only Ready. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastProbeTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time we probed the condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transitioned from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "Unique, one-word, CamelCase reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Human-readable message indicating details about last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.PodDNSConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
					Properties: map[string]spec.Schema{
						"nameservers": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"searches": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"options": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PodDNSConfigOption"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodDNSConfigOption"},
		},
		"k8s.io/api/core/v1.PodDNSConfigOption": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Required.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PodExecOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodExecOptions is the query options to a Pod's remote exec call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"stdin": {
							SchemaProps: spec.SchemaProps{
								Description: "Redirect the standard input stream of the pod for this call. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"stdout": {
							SchemaProps: spec.SchemaProps{
								Description: "Redirect the standard output stream of the pod for this call. Defaults to true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"stderr": {
							SchemaProps: spec.SchemaProps{
								Description: "Redirect the standard error stream of the pod for this call. Defaults to true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"tty": {
							SchemaProps: spec.SchemaProps{
								Description: "TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"container": {
							SchemaProps: spec.SchemaProps{
								Description: "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"command": {
							SchemaProps: spec.SchemaProps{
								Description: "Command is the remote command to execute. argv array. Not executed within a shell.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"command"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PodList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodList is a list of Pods.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of pods. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Pod"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Pod", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.PodLogOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodLogOptions is the query options for a Pod's logs REST call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"container": {
							SchemaProps: spec.SchemaProps{
								Description: "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"follow": {
							SchemaProps: spec.SchemaProps{
								Description: "Follow the log stream of the pod. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"previous": {
							SchemaProps: spec.SchemaProps{
								Description: "Return previous terminated container logs. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"sinceSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"sinceTime": {
							SchemaProps: spec.SchemaProps{
								Description: "An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"timestamps": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"tailLines": {
							SchemaProps: spec.SchemaProps{
								Description: "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"limitBytes": {
							SchemaProps: spec.SchemaProps{
								Description: "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.PodPortForwardOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodPortForwardOptions is the query options to a Pod's port forward call when using WebSockets. The `port` query parameter must specify the port or ports (comma separated) to forward over. Port forwarding over SPDY does not use these options. It requires the port to be passed in the `port` header as part of request.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ports": {
							SchemaProps: spec.SchemaProps{
								Description: "List of ports to forward Required when using WebSockets",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"integer"},
											Format: "int32",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PodProxyOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodProxyOptions is the query options to a Pod's proxy call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Path is the URL path to use for the current proxy request to pod.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PodSecurityContext": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
					Properties: map[string]spec.Schema{
						"seLinuxOptions": {
							SchemaProps: spec.SchemaProps{
								Description: "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
								Ref:         ref("k8s.io/api/core/v1.SELinuxOptions"),
							},
						},
						"runAsUser": {
							SchemaProps: spec.SchemaProps{
								Description: "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"runAsGroup": {
							SchemaProps: spec.SchemaProps{
								Description: "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"runAsNonRoot": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"supplementalGroups": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"integer"},
											Format: "int64",
										},
									},
								},
							},
						},
						"fsGroup": {
							SchemaProps: spec.SchemaProps{
								Description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.SELinuxOptions"},
		},
		"k8s.io/api/core/v1.PodSignature": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Describes the class of pods that should avoid this node. Exactly one field should be set.",
					Properties: map[string]spec.Schema{
						"podController": {
							SchemaProps: spec.SchemaProps{
								Description: "Reference to controller whose pods should avoid this node.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"},
		},
		"k8s.io/api/core/v1.PodSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodSpec is a description of a pod.",
					Properties: map[string]spec.Schema{
						"volumes": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "name",
									"x-kubernetes-patch-strategy":  "merge,retainKeys",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Volume"),
										},
									},
								},
							},
						},
						"initContainers": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "name",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Container"),
										},
									},
								},
							},
						},
						"containers": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "name",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Container"),
										},
									},
								},
							},
						},
						"restartPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"terminationGracePeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"activeDeadlineSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"dnsPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"serviceAccountName": {
							SchemaProps: spec.SchemaProps{
								Description: "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"serviceAccount": {
							SchemaProps: spec.SchemaProps{
								Description: "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"automountServiceAccountToken": {
							SchemaProps: spec.SchemaProps{
								Description: "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"nodeName": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostNetwork": {
							SchemaProps: spec.SchemaProps{
								Description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"hostPID": {
							SchemaProps: spec.SchemaProps{
								Description: "Use the host's pid namespace. Optional: Default to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"hostIPC": {
							SchemaProps: spec.SchemaProps{
								Description: "Use the host's ipc namespace. Optional: Default to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"shareProcessNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"securityContext": {
							SchemaProps: spec.SchemaProps{
								Description: "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
								Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
							},
						},
						"imagePullSecrets": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "name",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
						"hostname": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"subdomain": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's scheduling constraints",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerations": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's tolerations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
						"hostAliases": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "ip",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.HostAlias"),
										},
									},
								},
							},
						},
						"priorityClassName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"priority": {
							SchemaProps: spec.SchemaProps{
								Description: "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"dnsConfig": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
								Ref:         ref("k8s.io/api/core/v1.PodDNSConfig"),
							},
						},
					},
					Required: []string{"containers"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Container", "k8s.io/api/core/v1.HostAlias", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PodDNSConfig", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.Volume"},
		},
		"k8s.io/api/core/v1.PodStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodStatus represents information about the status of a pod. Status may trail the actual state of a system.",
					Properties: map[string]spec.Schema{
						"phase": {
							SchemaProps: spec.SchemaProps{
								Description: "Current condition of the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"conditions": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "type",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PodCondition"),
										},
									},
								},
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human readable message indicating details about why the pod is in this condition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nominatedNodeName": {
							SchemaProps: spec.SchemaProps{
								Description: "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostIP": {
							SchemaProps: spec.SchemaProps{
								Description: "IP address of the host to which the pod is assigned. Empty if not yet scheduled.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"podIP": {
							SchemaProps: spec.SchemaProps{
								Description: "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Description: "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"initContainerStatuses": {
							SchemaProps: spec.SchemaProps{
								Description: "The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ContainerStatus"),
										},
									},
								},
							},
						},
						"containerStatuses": {
							SchemaProps: spec.SchemaProps{
								Description: "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ContainerStatus"),
										},
									},
								},
							},
						},
						"qosClass": {
							SchemaProps: spec.SchemaProps{
								Description: "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ContainerStatus", "k8s.io/api/core/v1.PodCondition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.PodStatusResult": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodStatusResult is a wrapper for PodStatus returned by kubelet that can be encode/decoded",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.PodStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.PodTemplate": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodTemplate describes a template for creating copies of a predefined pod.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"template": {
							SchemaProps: spec.SchemaProps{
								Description: "Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.PodTemplateSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodTemplateSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.PodTemplateList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodTemplateList is a list of PodTemplates.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of pod templates",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.PodTemplate"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodTemplate", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.PodTemplateSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodTemplateSpec describes the data a pod should have when created from a template",
					Properties: map[string]spec.Schema{
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.PodSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.PortworxVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PortworxVolumeSource represents a Portworx volume resource.",
					Properties: map[string]spec.Schema{
						"volumeID": {
							SchemaProps: spec.SchemaProps{
								Description: "VolumeID uniquely identifies a Portworx volume",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"volumeID"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.PreferAvoidPodsEntry": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Describes a class of pods that should avoid this node.",
					Properties: map[string]spec.Schema{
						"podSignature": {
							SchemaProps: spec.SchemaProps{
								Description: "The class of pods.",
								Ref:         ref("k8s.io/api/core/v1.PodSignature"),
							},
						},
						"evictionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Time at which this entry was added to the list.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "(brief) reason why this entry was added to the list.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Human readable message indicating why this entry was added to the list.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"podSignature"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodSignature", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.PreferredSchedulingTerm": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
					Properties: map[string]spec.Schema{
						"weight": {
							SchemaProps: spec.SchemaProps{
								Description: "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"preference": {
							SchemaProps: spec.SchemaProps{
								Description: "A node selector term, associated with the corresponding weight.",
								Ref:         ref("k8s.io/api/core/v1.NodeSelectorTerm"),
							},
						},
					},
					Required: []string{"weight", "preference"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NodeSelectorTerm"},
		},
		"k8s.io/api/core/v1.Probe": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
					Properties: map[string]spec.Schema{
						"exec": {
							SchemaProps: spec.SchemaProps{
								Description: "One and only one of the following should be specified. Exec specifies the action to take.",
								Ref:         ref("k8s.io/api/core/v1.ExecAction"),
							},
						},
						"httpGet": {
							SchemaProps: spec.SchemaProps{
								Description: "HTTPGet specifies the http request to perform.",
								Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
							},
						},
						"tcpSocket": {
							SchemaProps: spec.SchemaProps{
								Description: "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
								Ref:         ref("k8s.io/api/core/v1.TCPSocketAction"),
							},
						},
						"initialDelaySeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"timeoutSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"periodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"successThreshold": {
							SchemaProps: spec.SchemaProps{
								Description: "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"failureThreshold": {
							SchemaProps: spec.SchemaProps{
								Description: "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ExecAction", "k8s.io/api/core/v1.HTTPGetAction", "k8s.io/api/core/v1.TCPSocketAction"},
		},
		"k8s.io/api/core/v1.ProjectedVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a projected volume source",
					Properties: map[string]spec.Schema{
						"sources": {
							SchemaProps: spec.SchemaProps{
								Description: "list of volume projections",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.VolumeProjection"),
										},
									},
								},
							},
						},
						"defaultMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"sources"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.VolumeProjection"},
		},
		"k8s.io/api/core/v1.QuobyteVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"registry": {
							SchemaProps: spec.SchemaProps{
								Description: "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volume": {
							SchemaProps: spec.SchemaProps{
								Description: "Volume is a string that references an already created Quobyte volume by name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "User to map volume access to Defaults to serivceaccount user",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"group": {
							SchemaProps: spec.SchemaProps{
								Description: "Group to map volume access to Default is no group",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"registry", "volume"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.RBDPersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"monitors": {
							SchemaProps: spec.SchemaProps{
								Description: "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Description: "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"pool": {
							SchemaProps: spec.SchemaProps{
								Description: "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"keyring": {
							SchemaProps: spec.SchemaProps{
								Description: "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Ref:         ref("k8s.io/api/core/v1.SecretReference"),
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"monitors", "image"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.SecretReference"},
		},
		"k8s.io/api/core/v1.RBDVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"monitors": {
							SchemaProps: spec.SchemaProps{
								Description: "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Description: "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"pool": {
							SchemaProps: spec.SchemaProps{
								Description: "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"keyring": {
							SchemaProps: spec.SchemaProps{
								Description: "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"monitors", "image"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LocalObjectReference"},
		},
		"k8s.io/api/core/v1.RangeAllocation": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RangeAllocation is not a public type.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"range": {
							SchemaProps: spec.SchemaProps{
								Description: "Range is string that identifies the range represented by 'data'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"data": {
							SchemaProps: spec.SchemaProps{
								Description: "Data is a bit array containing all allocated addresses in the previous segment.",
								Type:        []string{"string"},
								Format:      "byte",
							},
						},
					},
					Required: []string{"range", "data"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.ReplicationController": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReplicationController represents the configuration of a replication controller.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.ReplicationControllerSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.ReplicationControllerStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ReplicationControllerSpec", "k8s.io/api/core/v1.ReplicationControllerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.ReplicationControllerCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReplicationControllerCondition describes the state of a replication controller at a certain point.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of replication controller condition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of True, False, Unknown.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "The last time the condition transitioned from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "The reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human readable message indicating details about the transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.ReplicationControllerList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReplicationControllerList is a collection of replication controllers.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ReplicationController"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ReplicationController", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.ReplicationControllerSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReplicationControllerSpec is the specification of a replication controller.",
					Properties: map[string]spec.Schema{
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"minReadySeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"template": {
							SchemaProps: spec.SchemaProps{
								Description: "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
								Ref:         ref("k8s.io/api/core/v1.PodTemplateSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodTemplateSpec"},
		},
		"k8s.io/api/core/v1.ReplicationControllerStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReplicationControllerStatus represents the current status of a replication controller.",
					Properties: map[string]spec.Schema{
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"fullyLabeledReplicas": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of pods that have labels matching the labels of the pod template of the replication controller.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"readyReplicas": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of ready replicas for this replication controller.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"availableReplicas": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of available replicas (ready for at least minReadySeconds) for this replication controller.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"observedGeneration": {
							SchemaProps: spec.SchemaProps{
								Description: "ObservedGeneration reflects the generation of the most recently observed replication controller.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"conditions": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "type",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Represents the latest available observations of a replication controller's current state.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ReplicationControllerCondition"),
										},
									},
								},
							},
						},
					},
					Required: []string{"replicas"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ReplicationControllerCondition"},
		},
		"k8s.io/api/core/v1.ResourceFieldSelector": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
					Properties: map[string]spec.Schema{
						"containerName": {
							SchemaProps: spec.SchemaProps{
								Description: "Container name: required for volumes, optional for env vars",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resource": {
							SchemaProps: spec.SchemaProps{
								Description: "Required: resource to select",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"divisor": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the output format of the exposed resources, defaults to \"1\"",
								Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
							},
						},
					},
					Required: []string{"resource"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.ResourceQuota": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ResourceQuota sets aggregate quota restrictions enforced per namespace",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.ResourceQuotaSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.ResourceQuotaStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ResourceQuotaSpec", "k8s.io/api/core/v1.ResourceQuotaStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.ResourceQuotaList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ResourceQuotaList is a list of ResourceQuota items.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ResourceQuota"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ResourceQuota", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.ResourceQuotaSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
					Properties: map[string]spec.Schema{
						"hard": {
							SchemaProps: spec.SchemaProps{
								Description: "Hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"scopes": {
							SchemaProps: spec.SchemaProps{
								Description: "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.ResourceQuotaStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ResourceQuotaStatus defines the enforced hard limits and observed use.",
					Properties: map[string]spec.Schema{
						"hard": {
							SchemaProps: spec.SchemaProps{
								Description: "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"used": {
							SchemaProps: spec.SchemaProps{
								Description: "Used is the current observed total usage of the resource in the namespace.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.ResourceRequirements": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ResourceRequirements describes the compute resource requirements.",
					Properties: map[string]spec.Schema{
						"limits": {
							SchemaProps: spec.SchemaProps{
								Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
						"requests": {
							SchemaProps: spec.SchemaProps{
								Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/api/resource.Quantity"},
		},
		"k8s.io/api/core/v1.SELinuxOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SELinuxOptions are the labels to be applied to the container",
					Properties: map[string]spec.Schema{
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "User is a SELinux user label that applies to the container.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"role": {
							SchemaProps: spec.SchemaProps{
								Description: "Role is a SELinux role label that applies to the container.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type is a SELinux type label that applies to the container.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"level": {
							SchemaProps: spec.SchemaProps{
								Description: "Level is SELinux level label that applies to the container.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ScaleIOPersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
					Properties: map[string]spec.Schema{
						"gateway": {
							SchemaProps: spec.SchemaProps{
								Description: "The host address of the ScaleIO API Gateway.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"system": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the storage system as configured in ScaleIO.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
								Ref:         ref("k8s.io/api/core/v1.SecretReference"),
							},
						},
						"sslEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "Flag to enable/disable SSL communication with Gateway, default false",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"protectionDomain": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the ScaleIO Protection Domain for the configured storage.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storagePool": {
							SchemaProps: spec.SchemaProps{
								Description: "The ScaleIO Storage Pool associated with the protection domain.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storageMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumeName": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"gateway", "system", "secretRef"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.SecretReference"},
		},
		"k8s.io/api/core/v1.ScaleIOVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ScaleIOVolumeSource represents a persistent ScaleIO volume",
					Properties: map[string]spec.Schema{
						"gateway": {
							SchemaProps: spec.SchemaProps{
								Description: "The host address of the ScaleIO API Gateway.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"system": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the storage system as configured in ScaleIO.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
								Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
							},
						},
						"sslEnabled": {
							SchemaProps: spec.SchemaProps{
								Description: "Flag to enable/disable SSL communication with Gateway, default false",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"protectionDomain": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the ScaleIO Protection Domain for the configured storage.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storagePool": {
							SchemaProps: spec.SchemaProps{
								Description: "The ScaleIO Storage Pool associated with the protection domain.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storageMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumeName": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"gateway", "system", "secretRef"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LocalObjectReference"},
		},
		"k8s.io/api/core/v1.Secret": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"data": {
							SchemaProps: spec.SchemaProps{
								Description: "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "byte",
										},
									},
								},
							},
						},
						"stringData": {
							SchemaProps: spec.SchemaProps{
								Description: "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Used to facilitate programmatic handling of secret data.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.SecretEnvSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"optional": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify whether the Secret must be defined",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.SecretKeySelector": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SecretKeySelector selects a key of a Secret.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "The key of the secret to select from.  Must be a valid secret key.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"optional": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify whether the Secret or it's key must be defined",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"key"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.SecretList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SecretList is a list of Secret.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Secret"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Secret", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.SecretProjection": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.KeyToPath"),
										},
									},
								},
							},
						},
						"optional": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify whether the Secret or its key must be defined",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.KeyToPath"},
		},
		"k8s.io/api/core/v1.SecretReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name is unique within a namespace to reference a secret resource.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Namespace defines the space within which the secret name must be unique.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.SecretVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
					Properties: map[string]spec.Schema{
						"secretName": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.KeyToPath"),
										},
									},
								},
							},
						},
						"defaultMode": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"optional": {
							SchemaProps: spec.SchemaProps{
								Description: "Specify whether the Secret or it's keys must be defined",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.KeyToPath"},
		},
		"k8s.io/api/core/v1.SecurityContext": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
					Properties: map[string]spec.Schema{
						"capabilities": {
							SchemaProps: spec.SchemaProps{
								Description: "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
								Ref:         ref("k8s.io/api/core/v1.Capabilities"),
							},
						},
						"privileged": {
							SchemaProps: spec.SchemaProps{
								Description: "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"seLinuxOptions": {
							SchemaProps: spec.SchemaProps{
								Description: "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
								Ref:         ref("k8s.io/api/core/v1.SELinuxOptions"),
							},
						},
						"runAsUser": {
							SchemaProps: spec.SchemaProps{
								Description: "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"runAsGroup": {
							SchemaProps: spec.SchemaProps{
								Description: "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"runAsNonRoot": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"readOnlyRootFilesystem": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether this container has a read-only root filesystem. Default is false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"allowPrivilegeEscalation": {
							SchemaProps: spec.SchemaProps{
								Description: "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Capabilities", "k8s.io/api/core/v1.SELinuxOptions"},
		},
		"k8s.io/api/core/v1.SerializedReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SerializedReference is a reference to serialized object.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reference": {
							SchemaProps: spec.SchemaProps{
								Description: "The reference to an object in the system.",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ObjectReference"},
		},
		"k8s.io/api/core/v1.Service": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.ServiceSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Ref:         ref("k8s.io/api/core/v1.ServiceStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ServiceSpec", "k8s.io/api/core/v1.ServiceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.ServiceAccount": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"secrets": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "name",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ObjectReference"),
										},
									},
								},
							},
						},
						"imagePullSecrets": {
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
						"automountServiceAccountToken": {
							SchemaProps: spec.SchemaProps{
								Description: "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"k8s.io/api/core/v1.ServiceAccountList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceAccountList is a list of ServiceAccount objects",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ServiceAccount"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ServiceAccount", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.ServiceList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceList holds a list of services.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of services",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Service"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Service", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"k8s.io/api/core/v1.ServicePort": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServicePort contains information on service's port.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"protocol": {
							SchemaProps: spec.SchemaProps{
								Description: "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "The port that will be exposed by this service.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"targetPort": {
							SchemaProps: spec.SchemaProps{
								Description: "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"nodePort": {
							SchemaProps: spec.SchemaProps{
								Description: "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"port"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
		},
		"k8s.io/api/core/v1.ServiceProxyOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceProxyOptions is the query options to a Service's proxy call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.ServiceSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceSpec describes the attributes that a user creates on a service.",
					Properties: map[string]spec.Schema{
						"ports": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "port",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.ServicePort"),
										},
									},
								},
							},
						},
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"clusterIP": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"externalIPs": {
							SchemaProps: spec.SchemaProps{
								Description: "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"sessionAffinity": {
							SchemaProps: spec.SchemaProps{
								Description: "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"loadBalancerIP": {
							SchemaProps: spec.SchemaProps{
								Description: "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"loadBalancerSourceRanges": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"externalName": {
							SchemaProps: spec.SchemaProps{
								Description: "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"externalTrafficPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"healthCheckNodePort": {
							SchemaProps: spec.SchemaProps{
								Description: "healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"publishNotReadyAddresses": {
							SchemaProps: spec.SchemaProps{
								Description: "publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery. This field will replace the service.alpha.kubernetes.io/tolerate-unready-endpoints when that annotation is deprecated and all clients have been converted to use this field.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"sessionAffinityConfig": {
							SchemaProps: spec.SchemaProps{
								Description: "sessionAffinityConfig contains the configurations of session affinity.",
								Ref:         ref("k8s.io/api/core/v1.SessionAffinityConfig"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ServicePort", "k8s.io/api/core/v1.SessionAffinityConfig"},
		},
		"k8s.io/api/core/v1.ServiceStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceStatus represents the current status of a service.",
					Properties: map[string]spec.Schema{
						"loadBalancer": {
							SchemaProps: spec.SchemaProps{
								Description: "LoadBalancer contains the current status of the load-balancer, if one is present.",
								Ref:         ref("k8s.io/api/core/v1.LoadBalancerStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LoadBalancerStatus"},
		},
		"k8s.io/api/core/v1.SessionAffinityConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SessionAffinityConfig represents the configurations of session affinity.",
					Properties: map[string]spec.Schema{
						"clientIP": {
							SchemaProps: spec.SchemaProps{
								Description: "clientIP contains the configurations of Client IP based session affinity.",
								Ref:         ref("k8s.io/api/core/v1.ClientIPConfig"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ClientIPConfig"},
		},
		"k8s.io/api/core/v1.StorageOSPersistentVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a StorageOS persistent volume resource.",
					Properties: map[string]spec.Schema{
						"volumeName": {
							SchemaProps: spec.SchemaProps{
								Description: "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumeNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
								Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ObjectReference"},
		},
		"k8s.io/api/core/v1.StorageOSVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a StorageOS persistent volume resource.",
					Properties: map[string]spec.Schema{
						"volumeName": {
							SchemaProps: spec.SchemaProps{
								Description: "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumeNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
								Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LocalObjectReference"},
		},
		"k8s.io/api/core/v1.Sysctl": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Sysctl defines a kernel parameter to be set",
					Properties: map[string]spec.Schema{
						"Name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of a property to set",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"Value": {
							SchemaProps: spec.SchemaProps{
								Description: "Value of a property to set",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"Name", "Value"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.TCPSocketAction": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TCPSocketAction describes an action based on opening a socket",
					Properties: map[string]spec.Schema{
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"host": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: Host name to connect to, defaults to the pod IP.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"port"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
		},
		"k8s.io/api/core/v1.Taint": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
					Properties: map[string]spec.Schema{
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "Required. The taint key to be applied to a node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Description: "Required. The taint value corresponding to the taint key.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"effect": {
							SchemaProps: spec.SchemaProps{
								Description: "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"timeAdded": {
							SchemaProps: spec.SchemaProps{
								Description: "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"key", "effect"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/api/core/v1.Toleration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
					Properties: map[string]spec.Schema{
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"operator": {
							SchemaProps: spec.SchemaProps{
								Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"effect": {
							SchemaProps: spec.SchemaProps{
								Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerationSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.Volume": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostPath": {
							SchemaProps: spec.SchemaProps{
								Description: "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
								Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
							},
						},
						"emptyDir": {
							SchemaProps: spec.SchemaProps{
								Description: "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
								Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
							},
						},
						"gcePersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
							},
						},
						"awsElasticBlockStore": {
							SchemaProps: spec.SchemaProps{
								Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
							},
						},
						"gitRepo": {
							SchemaProps: spec.SchemaProps{
								Description: "GitRepo represents a git repository at a particular revision.",
								Ref:         ref("k8s.io/api/core/v1.GitRepoVolumeSource"),
							},
						},
						"secret": {
							SchemaProps: spec.SchemaProps{
								Description: "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"nfs": {
							SchemaProps: spec.SchemaProps{
								Description: "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
							},
						},
						"iscsi": {
							SchemaProps: spec.SchemaProps{
								Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md",
								Ref:         ref("k8s.io/api/core/v1.ISCSIVolumeSource"),
							},
						},
						"glusterfs": {
							SchemaProps: spec.SchemaProps{
								Description: "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md",
								Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
							},
						},
						"persistentVolumeClaim": {
							SchemaProps: spec.SchemaProps{
								Description: "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource"),
							},
						},
						"rbd": {
							SchemaProps: spec.SchemaProps{
								Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md",
								Ref:         ref("k8s.io/api/core/v1.RBDVolumeSource"),
							},
						},
						"flexVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
								Ref:         ref("k8s.io/api/core/v1.FlexVolumeSource"),
							},
						},
						"cinder": {
							SchemaProps: spec.SchemaProps{
								Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
							},
						},
						"cephfs": {
							SchemaProps: spec.SchemaProps{
								Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.CephFSVolumeSource"),
							},
						},
						"flocker": {
							SchemaProps: spec.SchemaProps{
								Description: "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
								Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
							},
						},
						"downwardAPI": {
							SchemaProps: spec.SchemaProps{
								Description: "DownwardAPI represents downward API about the pod that should populate this volume",
								Ref:         ref("k8s.io/api/core/v1.DownwardAPIVolumeSource"),
							},
						},
						"fc": {
							SchemaProps: spec.SchemaProps{
								Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
								Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
							},
						},
						"azureFile": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureFileVolumeSource"),
							},
						},
						"configMap": {
							SchemaProps: spec.SchemaProps{
								Description: "ConfigMap represents a configMap that should populate this volume",
								Ref:         ref("k8s.io/api/core/v1.ConfigMapVolumeSource"),
							},
						},
						"vsphereVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
							},
						},
						"quobyte": {
							SchemaProps: spec.SchemaProps{
								Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
							},
						},
						"azureDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
							},
						},
						"photonPersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
							},
						},
						"projected": {
							SchemaProps: spec.SchemaProps{
								Description: "Items for all in one resources secrets, configmaps, and downward API",
								Ref:         ref("k8s.io/api/core/v1.ProjectedVolumeSource"),
							},
						},
						"portworxVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
							},
						},
						"scaleIO": {
							SchemaProps: spec.SchemaProps{
								Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.ScaleIOVolumeSource"),
							},
						},
						"storageos": {
							SchemaProps: spec.SchemaProps{
								Description: "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.StorageOSVolumeSource"),
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFileVolumeSource", "k8s.io/api/core/v1.CephFSVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.ConfigMapVolumeSource", "k8s.io/api/core/v1.DownwardAPIVolumeSource", "k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GitRepoVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.ProjectedVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDVolumeSource", "k8s.io/api/core/v1.ScaleIOVolumeSource", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.StorageOSVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
		},
		"k8s.io/api/core/v1.VolumeDevice": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "volumeDevice describes a mapping of a raw block device within a container.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name must match the name of a persistentVolumeClaim in the pod",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"devicePath": {
							SchemaProps: spec.SchemaProps{
								Description: "devicePath is the path inside of the container that the device will be mapped to.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name", "devicePath"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.VolumeMount": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "VolumeMount describes a mounting of a Volume within a container.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "This must match the Name of a Volume.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readOnly": {
							SchemaProps: spec.SchemaProps{
								Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"mountPath": {
							SchemaProps: spec.SchemaProps{
								Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"subPath": {
							SchemaProps: spec.SchemaProps{
								Description: "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"mountPropagation": {
							SchemaProps: spec.SchemaProps{
								Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationHostToContainer is used. This field is beta in 1.10.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name", "mountPath"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.VolumeNodeAffinity": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
					Properties: map[string]spec.Schema{
						"required": {
							SchemaProps: spec.SchemaProps{
								Description: "Required specifies hard node constraints that must be met.",
								Ref:         ref("k8s.io/api/core/v1.NodeSelector"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.NodeSelector"},
		},
		"k8s.io/api/core/v1.VolumeProjection": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Projection that may be projected along with other supported volume types",
					Properties: map[string]spec.Schema{
						"secret": {
							SchemaProps: spec.SchemaProps{
								Description: "information about the secret data to project",
								Ref:         ref("k8s.io/api/core/v1.SecretProjection"),
							},
						},
						"downwardAPI": {
							SchemaProps: spec.SchemaProps{
								Description: "information about the downwardAPI data to project",
								Ref:         ref("k8s.io/api/core/v1.DownwardAPIProjection"),
							},
						},
						"configMap": {
							SchemaProps: spec.SchemaProps{
								Description: "information about the configMap data to project",
								Ref:         ref("k8s.io/api/core/v1.ConfigMapProjection"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.ConfigMapProjection", "k8s.io/api/core/v1.DownwardAPIProjection", "k8s.io/api/core/v1.SecretProjection"},
		},
		"k8s.io/api/core/v1.VolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents the source of a volume to mount. Only one of its members may be specified.",
					Properties: map[string]spec.Schema{
						"hostPath": {
							SchemaProps: spec.SchemaProps{
								Description: "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
								Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
							},
						},
						"emptyDir": {
							SchemaProps: spec.SchemaProps{
								Description: "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
								Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
							},
						},
						"gcePersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
							},
						},
						"awsElasticBlockStore": {
							SchemaProps: spec.SchemaProps{
								Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
							},
						},
						"gitRepo": {
							SchemaProps: spec.SchemaProps{
								Description: "GitRepo represents a git repository at a particular revision.",
								Ref:         ref("k8s.io/api/core/v1.GitRepoVolumeSource"),
							},
						},
						"secret": {
							SchemaProps: spec.SchemaProps{
								Description: "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"nfs": {
							SchemaProps: spec.SchemaProps{
								Description: "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
							},
						},
						"iscsi": {
							SchemaProps: spec.SchemaProps{
								Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md",
								Ref:         ref("k8s.io/api/core/v1.ISCSIVolumeSource"),
							},
						},
						"glusterfs": {
							SchemaProps: spec.SchemaProps{
								Description: "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md",
								Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
							},
						},
						"persistentVolumeClaim": {
							SchemaProps: spec.SchemaProps{
								Description: "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource"),
							},
						},
						"rbd": {
							SchemaProps: spec.SchemaProps{
								Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md",
								Ref:         ref("k8s.io/api/core/v1.RBDVolumeSource"),
							},
						},
						"flexVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
								Ref:         ref("k8s.io/api/core/v1.FlexVolumeSource"),
							},
						},
						"cinder": {
							SchemaProps: spec.SchemaProps{
								Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
							},
						},
						"cephfs": {
							SchemaProps: spec.SchemaProps{
								Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.CephFSVolumeSource"),
							},
						},
						"flocker": {
							SchemaProps: spec.SchemaProps{
								Description: "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
								Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
							},
						},
						"downwardAPI": {
							SchemaProps: spec.SchemaProps{
								Description: "DownwardAPI represents downward API about the pod that should populate this volume",
								Ref:         ref("k8s.io/api/core/v1.DownwardAPIVolumeSource"),
							},
						},
						"fc": {
							SchemaProps: spec.SchemaProps{
								Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
								Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
							},
						},
						"azureFile": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureFileVolumeSource"),
							},
						},
						"configMap": {
							SchemaProps: spec.SchemaProps{
								Description: "ConfigMap represents a configMap that should populate this volume",
								Ref:         ref("k8s.io/api/core/v1.ConfigMapVolumeSource"),
							},
						},
						"vsphereVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
							},
						},
						"quobyte": {
							SchemaProps: spec.SchemaProps{
								Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
							},
						},
						"azureDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
							},
						},
						"photonPersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
							},
						},
						"projected": {
							SchemaProps: spec.SchemaProps{
								Description: "Items for all in one resources secrets, configmaps, and downward API",
								Ref:         ref("k8s.io/api/core/v1.ProjectedVolumeSource"),
							},
						},
						"portworxVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
							},
						},
						"scaleIO": {
							SchemaProps: spec.SchemaProps{
								Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.ScaleIOVolumeSource"),
							},
						},
						"storageos": {
							SchemaProps: spec.SchemaProps{
								Description: "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.StorageOSVolumeSource"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFileVolumeSource", "k8s.io/api/core/v1.CephFSVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.ConfigMapVolumeSource", "k8s.io/api/core/v1.DownwardAPIVolumeSource", "k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GitRepoVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.ProjectedVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDVolumeSource", "k8s.io/api/core/v1.ScaleIOVolumeSource", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.StorageOSVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
		},
		"k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a vSphere volume resource.",
					Properties: map[string]spec.Schema{
						"volumePath": {
							SchemaProps: spec.SchemaProps{
								Description: "Path that identifies vSphere volume vmdk",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fsType": {
							SchemaProps: spec.SchemaProps{
								Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storagePolicyName": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage Policy Based Management (SPBM) profile name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storagePolicyID": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"volumePath"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/api/core/v1.WeightedPodAffinityTerm": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
					Properties: map[string]spec.Schema{
						"weight": {
							SchemaProps: spec.SchemaProps{
								Description: "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"podAffinityTerm": {
							SchemaProps: spec.SchemaProps{
								Description: "Required. A pod affinity term, associated with the corresponding weight.",
								Ref:         ref("k8s.io/api/core/v1.PodAffinityTerm"),
							},
						},
					},
					Required: []string{"weight", "podAffinityTerm"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodAffinityTerm"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIGroup contains the name, the supported versions, and the preferred version of a group.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name is the name of the group.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"versions": {
							SchemaProps: spec.SchemaProps{
								Description: "versions are the versions supported in this group.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
										},
									},
								},
							},
						},
						"preferredVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "preferredVersion is the version preferred by the API server, which probably is the storage version.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
							},
						},
						"serverAddressByClientCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "versions", "serverAddressByClientCIDRs"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery", "k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroupList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"groups": {
							SchemaProps: spec.SchemaProps{
								Description: "groups is a list of APIGroup.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"),
										},
									},
								},
							},
						},
					},
					Required: []string{"groups"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIResource specifies the name of a resource and whether it is namespaced.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name is the plural name of the resource.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"singularName": {
							SchemaProps: spec.SchemaProps{
								Description: "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespaced": {
							SchemaProps: spec.SchemaProps{
								Description: "namespaced indicates if a resource is namespaced or not.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"group": {
							SchemaProps: spec.SchemaProps{
								Description: "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"verbs": {
							SchemaProps: spec.SchemaProps{
								Description: "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"shortNames": {
							SchemaProps: spec.SchemaProps{
								Description: "shortNames is a list of suggested short names of the resource.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"categories": {
							SchemaProps: spec.SchemaProps{
								Description: "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "singularName", "namespaced", "kind", "verbs"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResourceList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"groupVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "groupVersion is the group and version this APIResourceList is for.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "resources contains the name of the resources and if they are namespaced.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"),
										},
									},
								},
							},
						},
					},
					Required: []string{"groupVersion", "resources"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIVersions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"versions": {
							SchemaProps: spec.SchemaProps{
								Description: "versions are the api versions that are available.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"serverAddressByClientCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
										},
									},
								},
							},
						},
					},
					Required: []string{"versions", "serverAddressByClientCIDRs"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.DeleteOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DeleteOptions may be provided when deleting an API object.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"gracePeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"preconditions": {
							SchemaProps: spec.SchemaProps{
								Description: "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"),
							},
						},
						"orphanDependents": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"propagationPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Duration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
					Properties: map[string]spec.Schema{
						"Duration": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
					},
					Required: []string{"Duration"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ExportOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ExportOptions is the query options to the standard REST get call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"export": {
							SchemaProps: spec.SchemaProps{
								Description: "Should this value be exported.  Export strips fields that a user can not specify.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"exact": {
							SchemaProps: spec.SchemaProps{
								Description: "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"export", "exact"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GetOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GetOptions is the standard query options to the standard REST get call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "When specified: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"includeUninitialized": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, partially initialized resources are included in the response.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupKind": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "kind"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupResource specifies a Group and a Resource, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"resource": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "resource"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersion": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersion contains the \"group\" and the \"version\", which uniquely identifies the API.",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "version"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
					Properties: map[string]spec.Schema{
						"groupVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "groupVersion specifies the API group and version in the form \"group/version\"",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"groupVersion", "version"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionKind": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "version", "kind"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersionResource unambiguously identifies a resource.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"resource": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "version", "resource"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Initializer": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Initializer is information about an initializer that has not yet completed.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name of the process that is responsible for initializing this object.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Initializers": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Initializers tracks the progress of initialization.",
					Properties: map[string]spec.Schema{
						"pending": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "name",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Initializer"),
										},
									},
								},
							},
						},
						"result": {
							SchemaProps: spec.SchemaProps{
								Description: "If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Status"),
							},
						},
					},
					Required: []string{"pending"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Initializer", "k8s.io/apimachinery/pkg/apis/meta/v1.Status"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.InternalEvent": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "InternalEvent makes watch.Event versioned",
					Properties: map[string]spec.Schema{
						"Type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Object": {
							SchemaProps: spec.SchemaProps{
								Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *api.Status is recommended; other types may make sense\n   depending on context.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.Object"),
							},
						},
					},
					Required: []string{"Type", "Object"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/runtime.Object"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
					Properties: map[string]spec.Schema{
						"matchLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"matchExpressions": {
							SchemaProps: spec.SchemaProps{
								Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
					Properties: map[string]spec.Schema{
						"key": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "key",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "key is the label key that the selector applies to.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"operator": {
							SchemaProps: spec.SchemaProps{
								Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"values": {
							SchemaProps: spec.SchemaProps{
								Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"key", "operator"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.List": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "List holds a list of objects, which may not be known by the server.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
					Properties: map[string]spec.Schema{
						"selfLink": {
							SchemaProps: spec.SchemaProps{
								Description: "selfLink is a URL representing this object. Populated by the system. Read-only.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"continue": {
							SchemaProps: spec.SchemaProps{
								Description: "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ListOptions is the query options to a standard REST list call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"labelSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fieldSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"includeUninitialized": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, partially initialized resources are included in the response.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"watch": {
							SchemaProps: spec.SchemaProps{
								Description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"timeoutSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"limit": {
							SchemaProps: spec.SchemaProps{
								Description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"continue": {
							SchemaProps: spec.SchemaProps{
								Description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Type:   v1.MicroTime{}.OpenAPISchemaType(),
					Format: v1.MicroTime{}.OpenAPISchemaFormat(),
				},
			},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"generateName": {
							SchemaProps: spec.SchemaProps{
								Description: "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"selfLink": {
							SchemaProps: spec.SchemaProps{
								Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"generation": {
							SchemaProps: spec.SchemaProps{
								Description: "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"creationTimestamp": {
							SchemaProps: spec.SchemaProps{
								Description: "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"deletionTimestamp": {
							SchemaProps: spec.SchemaProps{
								Description: "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"deletionGracePeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"labels": {
							SchemaProps: spec.SchemaProps{
								Description: "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"annotations": {
							SchemaProps: spec.SchemaProps{
								Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"ownerReferences": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "uid",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"),
										},
									},
								},
							},
						},
						"initializers": {
							SchemaProps: spec.SchemaProps{
								Description: "An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Initializers"),
							},
						},
						"finalizers": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-strategy": "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"clusterName": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Initializers", "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "API version of the referent.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"controller": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, this reference points to the managing controller.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"blockOwnerDeletion": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"apiVersion", "kind", "name", "uid"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Patch": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
					Properties: map[string]spec.Schema{
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the target UID.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.RootPaths": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\".",
					Properties: map[string]spec.Schema{
						"paths": {
							SchemaProps: spec.SchemaProps{
								Description: "paths are the paths available at root.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"paths"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
					Properties: map[string]spec.Schema{
						"clientCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR with which clients can match their IP to figure out the server address that they should use.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"serverAddress": {
							SchemaProps: spec.SchemaProps{
								Description: "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"clientCIDR", "serverAddress"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Status": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Status is a return value for calls that don't return other objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human-readable description of the status of this operation.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"details": {
							SchemaProps: spec.SchemaProps{
								Description: "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"),
							},
						},
						"code": {
							SchemaProps: spec.SchemaProps{
								Description: "Suggested HTTP return code for this status, 0 if not set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
					Properties: map[string]spec.Schema{
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"field": {
							SchemaProps: spec.SchemaProps{
								Description: "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"group": {
							SchemaProps: spec.SchemaProps{
								Description: "The group attribute of the resource associated with the status StatusReason.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"causes": {
							SchemaProps: spec.SchemaProps{
								Description: "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"),
										},
									},
								},
							},
						},
						"retryAfterSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Time": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Type:   v1.Time{}.OpenAPISchemaType(),
					Format: v1.Time{}.OpenAPISchemaFormat(),
				},
			},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Timestamp": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Timestamp is a struct that is equivalent to Time, but intended for protobuf marshalling/unmarshalling. It is generated into a serialization that matches Time. Do not use in Go structs.",
					Properties: map[string]spec.Schema{
						"seconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"nanos": {
							SchemaProps: spec.SchemaProps{
								Description: "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"seconds", "nanos"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.WatchEvent": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Event represents a single event to a watched resource.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"object": {
							SchemaProps: spec.SchemaProps{
								Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
					},
					Required: []string{"type", "object"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/runtime.RawExtension"},
		},
		"k8s.io/apimachinery/pkg/runtime.RawExtension": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
					Properties: map[string]spec.Schema{
						"Raw": {
							SchemaProps: spec.SchemaProps{
								Description: "Raw is the underlying serialization of this object.",
								Type:        []string{"string"},
								Format:      "byte",
							},
						},
					},
					Required: []string{"Raw"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/runtime.TypeMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type, like this: type MyAwesomeAPIObject struct {\n     runtime.TypeMeta    `json:\",inline\"`\n     ... // other fields\n} func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind\n\nTypeMeta is provided here for convenience. You may use it directly from this package or define your own with the same fields.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/runtime.Unknown": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Raw": {
							SchemaProps: spec.SchemaProps{
								Description: "Raw will hold the complete serialized object which couldn't be matched with a registered type. Most likely, nothing should be done with this except for passing it through the system.",
								Type:        []string{"string"},
								Format:      "byte",
							},
						},
						"ContentEncoding": {
							SchemaProps: spec.SchemaProps{
								Description: "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ContentType": {
							SchemaProps: spec.SchemaProps{
								Description: "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"Raw", "ContentEncoding", "ContentType"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/version.Info": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Info contains versioning information. how we'll want to distribute that information.",
					Properties: map[string]spec.Schema{
						"major": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"minor": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitCommit": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitTreeState": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"buildDate": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"goVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"compiler": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"platform": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"major", "minor", "gitVersion", "gitCommit", "gitTreeState", "buildDate", "goVersion", "compiler", "platform"},
				},
			},
			Dependencies: []string{},
		},
	}
}
