// Copyright (c) 2022 Tigera, Inc. All rights reserved.

package elastic

import (
	"crypto/tls"
	"crypto/x509"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"

	"github.com/google/uuid"
	log "github.com/sirupsen/logrus"
)

type VulnerabilityQueryParameterMap map[string]string

func getImageAssuranceTLSConfig() (*tls.Config, error) {
	bundlePath := os.Getenv("IMAGE_ASSURANCE_CA_BUNDLE_PATH")
	if bundlePath == "" {
		return nil, fmt.Errorf("IMAGE_ASSURANCE_CA_BUNDLE_PATH can not be empty")
	}

	ca, err := x509.SystemCertPool()
	if err != nil {
		log.WithError(err).Warn("failed to get system cert pool, creating a new one")
		ca = x509.NewCertPool()
	}

	pemCerts, err := ioutil.ReadFile(bundlePath)
	if err != nil {
		return nil, err
	}

	ca.AppendCertsFromPEM(pemCerts)
	return &tls.Config{RootCAs: ca}, nil
}

func getImageAssuranceEndpoint() (string, error) {
	imageAssuranceEndpoint := os.Getenv("IMAGE_ASSURANCE_BAST_API_URL")
	if imageAssuranceEndpoint == "" {
		return "", fmt.Errorf("IMAGE_ASSURANCE_BAST_API_URL can not be empty")
	}
	if _, err := url.Parse(imageAssuranceEndpoint); err != nil {
		return "", err
	}
	return imageAssuranceEndpoint, nil
}

func getImageAssuranceOrgID() (string, error) {
	imageAssuranceOrgID := os.Getenv("IMAGE_ASSURANCE_ORGANIZATION_ID")
	if _, err := uuid.Parse(imageAssuranceOrgID); err != nil {
		return "", err
	}
	return imageAssuranceOrgID, nil
}

func queryVulnerabilityDataset(httpClient *http.Client, params VulnerabilityQueryParameterMap) ([]JsonObject, error) {
	imageAssuranceEndpoint, err := getImageAssuranceEndpoint()
	if err != nil {
		return nil, err
	}
	imageAssuranceOrgID, err := getImageAssuranceOrgID()
	if err != nil {
		return nil, err
	}

	u := fmt.Sprintf("%s/v1/organizations/%s/events", imageAssuranceEndpoint, imageAssuranceOrgID)
	req, err := http.NewRequest(http.MethodGet, u, nil)
	if err != nil {
		return nil, err
	}

	query := req.URL.Query()
	for k, v := range params {
		query.Set(k, v)
	}
	req.URL.RawQuery = query.Encode()

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, err
	} else if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("image assurance api returns status = %d", resp.StatusCode)
	}

	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var events []JsonObject
	if err := json.Unmarshal(body, &events); err != nil {
		return nil, err
	}
	return events, nil
}
