// Code generated by mockery v2.3.0. DO NOT EDIT.

package k8s

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"
)

// MockClientSetFactory is an autogenerated mock type for the ClientSetFactory type
type MockClientSetFactory struct {
	mock.Mock
}

// NewClientSetForApplication provides a mock function with given fields: cluster
func (_m *MockClientSetFactory) NewClientSetForApplication(cluster string) (ClientSet, error) {
	ret := _m.Called(cluster)

	var r0 ClientSet
	if rf, ok := ret.Get(0).(func(string) ClientSet); ok {
		r0 = rf(cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClientSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientSetForUserRequest provides a mock function with given fields: req, cluster
func (_m *MockClientSetFactory) NewClientSetForUserRequest(req *http.Request, cluster string) (ClientSet, error) {
	ret := _m.Called(req, cluster)

	var r0 ClientSet
	if rf, ok := ret.Get(0).(func(*http.Request, string) ClientSet); ok {
		r0 = rf(req, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClientSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(req, cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRestConfigForApplication provides a mock function with given fields: clusterID
func (_m *MockClientSetFactory) NewRestConfigForApplication(clusterID string) *rest.Config {
	ret := _m.Called(clusterID)

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func(string) *rest.Config); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}
