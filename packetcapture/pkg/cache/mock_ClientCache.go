// Code generated by mockery v2.3.0. DO NOT EDIT.

package cache

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	auth "github.com/projectcalico/calico/lma/pkg/auth"
	k8s "github.com/projectcalico/calico/lma/pkg/k8s"
)

// MockClientCache is an autogenerated mock type for the ClientCache type
type MockClientCache struct {
	mock.Mock
}

// GetAuthorizer provides a mock function with given fields: clusterID
func (_m *MockClientCache) GetAuthorizer(clusterID string) (auth.RBACAuthorizer, error) {
	ret := _m.Called(clusterID)

	var r0 auth.RBACAuthorizer
	if rf, ok := ret.Get(0).(func(string) auth.RBACAuthorizer); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.RBACAuthorizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientAndConfig provides a mock function with given fields: clusterID
func (_m *MockClientCache) GetClientAndConfig(clusterID string) (k8s.ClientSet, *rest.Config, error) {
	ret := _m.Called(clusterID)

	var r0 k8s.ClientSet
	if rf, ok := ret.Get(0).(func(string) k8s.ClientSet); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(k8s.ClientSet)
		}
	}

	var r1 *rest.Config
	if rf, ok := ret.Get(1).(func(string) *rest.Config); ok {
		r1 = rf(clusterID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*rest.Config)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(clusterID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Init provides a mock function with given fields:
func (_m *MockClientCache) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartBackendSync provides a mock function with given fields: stop
func (_m *MockClientCache) StartBackendSync(stop chan struct{}) error {
	ret := _m.Called(stop)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan struct{}) error); ok {
		r0 = rf(stop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
