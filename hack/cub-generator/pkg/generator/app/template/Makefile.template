# Copyright {{now | date "2006"}} Tigera Inc. All rights reserved.
include ../metadata.mk

PACKAGE_NAME    ?= github.com/projectcalico/calico/{{ lower .Name }}

#############################################
# Env vars related to packaging and releasing
#############################################
{{ snakecase .Name | upper }}_IMAGE	?={{ lower .Name }}
BUILD_IMAGES?=$({{ snakecase .Name | upper }}_IMAGE)

###############################################################################
# Include ../lib.Makefile
#   Additions to EXTRA_DOCKER_ARGS need to happen before the include since
#   that variable is evaluated when we declare DOCKER_RUN and siblings.
###############################################################################
include ../lib.Makefile

###############################################################################
# Env vars related to building
###############################################################################
SRC_FILES = $(shell find pkg cmd -name '*.go') \
		$(shell find ../api/pkg -name '*.go') \
		$(shell find ../libcalico-go/lib -name '*.go') \
		$(shell find ../lma/pkg -name '*.go')


# We use -X to insert the version information into the placeholder variables
# in the version package.
LDFLAGS = -X $(PACKAGE_NAME)/pkg/version.BuildVersion=$(GIT_VERSION) \
              -X $(PACKAGE_NAME)/pkg/version.BuildDate=$(DATE) \
              -X $(PACKAGE_NAME)/pkg/version.GitDescription=$(GIT_DESCRIPTION) \
              -X $(PACKAGE_NAME)/pkg/version.GitRevision=$(GIT_COMMIT)

# We need CGO to leverage Boring SSL.  However, the cross-compile doesn't support CGO yet.
ifeq ($(ARCH), $(filter $(ARCH),amd64))
CGO_ENABLED=1
else
CGO_ENABLED=0
endif

###############################################################################
# BUILD BINARY
###############################################################################
# This section builds the output binaries.
build: bin/{{ lower .Name }}-$(ARCH)

.PHONY: bin/{{ lower .Name }}-$(ARCH)
bin/{{ lower .Name }}-$(ARCH): $(SRC_FILES)
	$(DOCKER_GO_BUILD_CGO) \
		sh -c '$(GIT_CONFIG_SSH) \
			go build -o $@ -v -ldflags "$(LDFLAGS)" cmd/$*/*.go'

###############################################################################
# BUILD IMAGE
###############################################################################
{{ snakecase .Name | upper }}_CONTAINER_CREATED=.{{ lower .Name }}.created-$(ARCH)

# Build the docker image.
.PHONY: $(BUILD_IMAGES)

# by default, build the image for the target architecture
.PHONY: image-all
image-all: $(addprefix sub-image-,$(VALIDARCHES))
sub-image-%:
	$(MAKE) image ARCH=$*

.PHONY: image
image: $({{ snakecase .Name | upper }}_IMAGE)

$({{ snakecase .Name | upper }}_IMAGE): $({{ snakecase .Name | upper }}_CONTAINER_CREATED)
$({{ snakecase .Name | upper }}_CONTAINER_CREATED): docker-image/Dockerfile.$(ARCH) bin/{{ lower .Name }}-$(ARCH)
	$(DOCKER_BUILD) -t $({{ snakecase .Name | upper }}_IMAGE):latest-$(ARCH) -f docker-image/Dockerfile.$(ARCH) . --load
	$(MAKE) retag-build-images-with-registries VALIDARCHES=$(ARCH) IMAGETAG=latest
	touch $@

.PHONY: clean
clean:
	rm -rf bin \
		report/*.xml \
		config/
	find . -name '*.coverprofile' -type f -delete
	rm -f $({{ snakecase .Name | upper }}_CREATED)
	-docker image rm -f $$(docker images $({{ snakecase .Name | upper }}_IMAGE) -a -q)

###############################################################################
# Testing
###############################################################################
#MOCKERY_FILE_PATHS= \
#	pkg/ \

#############################################
# Run unit level tests
#############################################
# Comma separated paths to packages containing fv tests

.PHONY: ut
## Run only Unit Tests.
ut:
	$(DOCKER_GO_BUILD) sh -c '$(GIT_CONFIG_SSH) $(GINKGO) -r -skipPackage=$(FV_PACKAGE) pkg/*'

st:
    @echo "No STs available"

###############################################################################
# FV Tests
###############################################################################

## Run the FVs
fv:

###############################################################################
# CI/CD
###############################################################################
.PHONY: ci cd

## run CI cycle - build, test, etc.
## Run UTs and only if they pass build image and continue along.
## Building the image is required for fvs.
ci: clean static-checks ut fv

## Deploys images to registry
cd: image-all cd-common
