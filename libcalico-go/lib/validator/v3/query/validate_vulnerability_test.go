// Copyright (c) 2022 Tigera, Inc. All rights reserved.

package query

import (
	. "github.com/onsi/ginkgo/extensions/table"
	. "github.com/onsi/gomega"
)

var _ = DescribeTable("Vulnerability", func(atom Atom, ok bool) {
	actual := atom
	err := IsValidVulnerabilityAtom(&actual)
	if ok {
		Expect(err).ShouldNot(HaveOccurred())
	} else {
		Expect(err).Should(HaveOccurred())
	}
},
	Entry("cluster_name", Atom{Key: "cluster_name", Comparator: CmpEqual, Value: "cluster"}, true),
	Entry("image_tag", Atom{Key: "image_tag", Comparator: CmpEqual, Value: "tag"}, true),
	Entry("max_cvss_score", Atom{Key: "max_cvss_score", Value: "6.2"}, true),
	Entry("max_cvss_score", Atom{Key: "max_cvss_score", Value: "0.0"}, true),
	Entry("max_cvss_score", Atom{Key: "max_cvss_score", Value: "10.0"}, true),
	Entry("max_cvss_score invalid too low", Atom{Key: "max_cvss_score", Value: "-1.2"}, false),
	Entry("max_cvss_score invalid too high", Atom{Key: "max_cvss_score", Value: "12.3"}, false),
	Entry("max_cvss_score invalid not a number", Atom{Key: "max_cvss_score", Value: "not-a-number"}, false),
	Entry("namespace", Atom{Key: "namespace", Comparator: CmpEqual, Value: "some-ns"}, true),
	Entry("node_name", Atom{Key: "node_name", Comparator: CmpEqual, Value: "some-node"}, true),
	Entry("registry", Atom{Key: "registry", Comparator: CmpEqual, Value: "quay.io"}, true),
	Entry("repository", Atom{Key: "repository", Comparator: CmpEqual, Value: "node"}, true),
	Entry("result Pass", Atom{Key: "result", Comparator: CmpEqual, Value: "Pass"}, true),
	Entry("result Warn", Atom{Key: "result", Comparator: CmpEqual, Value: "Warn"}, true),
	Entry("result Fail", Atom{Key: "result", Comparator: CmpEqual, Value: "Fail"}, true),
	Entry("result invalid", Atom{Key: "result", Comparator: CmpEqual, Value: "invalid"}, false),
	Entry("type image_detection", Atom{Key: "type", Comparator: CmpEqual, Value: "image_detection"}, true),
	Entry("type pod_detection", Atom{Key: "type", Comparator: CmpEqual, Value: "pod_detection"}, true),
	Entry("type invalid", Atom{Key: "type", Comparator: CmpEqual, Value: "invalid"}, false),

	Entry("comparator invalid gt", Atom{Key: "image_tag", Comparator: CmpGt, Value: "tag"}, false),
	Entry("comparator invalid gte", Atom{Key: "image_tag", Comparator: CmpGte, Value: "tag"}, false),
	Entry("comparator invalid lt", Atom{Key: "image_tag", Comparator: CmpLt, Value: "tag"}, false),
	Entry("comparator invalid lte", Atom{Key: "image_tag", Comparator: CmpLte, Value: "tag"}, false),
	Entry("comparator invalid ne", Atom{Key: "image_tag", Comparator: CmpNotEqual, Value: "tag"}, false),
)
