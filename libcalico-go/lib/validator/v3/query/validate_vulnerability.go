// Copyright (c) 2022 Tigera, Inc. All rights reserved.

package query

import (
	"fmt"
	"strconv"
)

func CVSSScoreValidator(a *Atom) error {
	f, err := strconv.ParseFloat(a.Value, 32)
	if err != nil {
		return fmt.Errorf("invalid value for %s: %s: %s", a.Key, a.Value, err)
	}

	if f < 0.0 || f > 10.0 {
		return fmt.Errorf("invalid value for %s: %s", a.Key, a.Value)
	}

	return nil
}

var (
	VulnerabilityKeys = map[string]Validator{
		"cluster_name":   NullValidator,
		"image_tag":      NullValidator,
		"max_cvss_score": CVSSScoreValidator,
		"namespace":      DomainValidator,
		"node_name":      NullValidator,
		"registry":       URLValidator,
		"repository":     NullValidator,
		"result":         SetValidator("Pass", "Warn", "Fail"),
		"type":           SetValidator("image_detection", "pod_detection"),
	}
)

func IsValidVulnerabilityAtom(a *Atom) error {
	if validator, ok := VulnerabilityKeys[a.Key]; ok {
		if err := validator(a); err != nil {
			return err
		}

		if a.Comparator != CmpEqual {
			return fmt.Errorf("invalid comparator: %s", a.Comparator)
		}
		return nil
	}

	return fmt.Errorf("invalid key: %s", a.Key)
}
