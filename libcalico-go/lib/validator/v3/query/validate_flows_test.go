// Copyright (c) 2019 Tigera, Inc. All rights reserved.

package query

import (
	. "github.com/onsi/ginkgo/extensions/table"
	. "github.com/onsi/gomega"
)

var _ = DescribeTable("Flows", func(atom Atom, ok bool) {
	actual := atom
	err := IsValidFlowsAtom(&actual)
	if ok {
		Expect(err).ShouldNot(HaveOccurred())
	} else {
		Expect(err).Should(HaveOccurred())
	}
},
	Entry("start_time", Atom{Key: "start_time", Value: "2019-01-01"}, true),
	Entry("end_time", Atom{Key: "end_time", Value: "2019-01-01"}, true),
	Entry("action=allow", Atom{Key: "action", Value: "allow"}, true),
	Entry("action=deny", Atom{Key: "action", Value: "deny"}, true),
	Entry("action unknown value", Atom{Key: "action", Value: "error"}, false),
	Entry("bytes_in=0", Atom{Key: "bytes_in", Value: "0"}, true),
	Entry("bytes_in=1", Atom{Key: "bytes_in", Value: "1"}, true),
	Entry("bytes_in=-1", Atom{Key: "bytes_in", Value: "-1"}, false),
	Entry("bytes_in parse error", Atom{Key: "bytes_in", Value: "abc"}, false),
	Entry("bytes_out=0", Atom{Key: "bytes_out", Value: "0"}, true),
	Entry("bytes_out=1", Atom{Key: "bytes_out", Value: "1"}, true),
	Entry("bytes_out=-1", Atom{Key: "bytes_out", Value: "-1"}, false),
	Entry("bytes_out parse error", Atom{Key: "bytes_out", Value: "abc"}, false),
	Entry("dest_ip ipv4", Atom{Key: "dest_ip", Value: "127.0.0.1"}, true),
	Entry("dest_ip ipv6", Atom{Key: "dest_ip", Value: "::1"}, true),
	Entry("dest_ip invalid ip", Atom{Key: "dest_ip", Value: "256.0.0.1"}, false),
	Entry("dest_name", Atom{Key: "dest_name", Value: "foo"}, true),
	Entry("dest_name_aggr", Atom{Key: "dest_name_aggr", Value: "foo"}, true),
	Entry("dest_namespace", Atom{Key: "dest_namespace", Value: "foo"}, true),
	Entry("dest_port=0", Atom{Key: "dest_port", Value: "0"}, true),
	Entry("dest_port=65535", Atom{Key: "dest_port", Value: "65535"}, true),
	Entry("dest port negative", Atom{Key: "dest_port", Value: "-1"}, false),
	Entry("dest_port out of range", Atom{Key: "dest_port", Value: "65536"}, false),
	Entry("dest_port_num=0", Atom{Key: "dest_port_num", Value: "0"}, true),
	Entry("dest_port_num=65535", Atom{Key: "dest_port_num", Value: "65535"}, true),
	Entry("dest_port_num negative", Atom{Key: "dest_port_num", Value: "-1"}, false),
	Entry("dest_port_num out of range", Atom{Key: "dest_port_num", Value: "65536"}, false),
	Entry("dest_service_name", Atom{Key: "dest_service_name", Value: "foo"}, true),
	Entry("dest_service_namespace", Atom{Key: "dest_service_namespace", Value: "foo"}, true),
	Entry("dest_service_port", Atom{Key: "dest_service_port", Value: "foo"}, true),
	Entry("dest_service_port_name", Atom{Key: "dest_service_port_name", Value: "foo"}, true),
	Entry("dest_service_port_num=0", Atom{Key: "dest_service_port_num", Value: "0"}, true),
	Entry("dest_service_port_num=65535", Atom{Key: "dest_service_port_num", Value: "65535"}, true),
	Entry("dest_service_port_num negative", Atom{Key: "dest_service_port_num", Value: "-1"}, false),
	Entry("dest_service_port_num=65536", Atom{Key: "dest_service_port_num", Value: "65536"}, false),
	Entry("dest_service_port_num=foo", Atom{Key: "dest_service_port_num", Value: "foo"}, false),
	Entry("dest_type=wep", Atom{Key: "dest_type", Value: "wep"}, true),
	Entry("dest_type=hep", Atom{Key: "dest_type", Value: "hep"}, true),
	Entry("dest_type=ns", Atom{Key: "dest_type", Value: "ns"}, true),
	Entry("dest_type=net", Atom{Key: "dest_type", Value: "net"}, true),
	Entry("dest_type invalid", Atom{Key: "dest_type", Value: "foo"}, false),
	Entry("dest_labels root key", Atom{Key: "dest_labels", Value: "foo=bar"}, false),
	Entry("dest_labels valid format", Atom{Key: "dest_labels.labels", Value: "foo=bar"}, true),
	Entry("dest labels invalid format", Atom{Key: "dest_labels.labels", Value: "foo"}, false),
	Entry("reporter=src", Atom{Key: "reporter", Value: "src"}, true),
	Entry("reporter=dst", Atom{Key: "reporter", Value: "dst"}, true),
	Entry("reporter invalid", Atom{Key: "reporter", Value: "foo"}, false),
	Entry("num_flows=0", Atom{Key: "num_flows", Value: "0"}, true),
	Entry("num_flows=1", Atom{Key: "num_flows", Value: "1"}, true),
	Entry("num_flows=-1", Atom{Key: "num_flows", Value: "-1"}, false),
	Entry("num_flows invalid", Atom{Key: "num_flows", Value: "abc"}, false),
	Entry("num_flows_completed=0", Atom{Key: "num_flows_completed", Value: "0"}, true),
	Entry("num_flows_completed=1", Atom{Key: "num_flows_completed", Value: "1"}, true),
	Entry("num_flows_completed=-1", Atom{Key: "num_flows_completed", Value: "-1"}, false),
	Entry("num_flows_completed invalid", Atom{Key: "num_flows_completed", Value: "abc"}, false),
	Entry("num_flows_started=0", Atom{Key: "num_flows_started", Value: "0"}, true),
	Entry("num_flows_started=1", Atom{Key: "num_flows_started", Value: "1"}, true),
	Entry("num_flows_started=-1", Atom{Key: "num_flows_started", Value: "-1"}, false),
	Entry("num_flows_started invalid", Atom{Key: "num_flows_started", Value: "abc"}, false),
	Entry("http_requests_allowed_in_started=0", Atom{Key: "http_requests_allowed_in", Value: "0"}, true),
	Entry("http_requests_allowed_in_started=1", Atom{Key: "http_requests_allowed_in", Value: "1"}, true),
	Entry("http_requests_allowed_in_started=-1", Atom{Key: "http_requests_allowed_in", Value: "-1"}, false),
	Entry("http_requests_allowed_in_started invalid", Atom{Key: "http_requests_allowed_in", Value: "abc"}, false),
	Entry("http_requests_denied_in_started=0", Atom{Key: "http_requests_denied_in", Value: "0"}, true),
	Entry("http_requests_denied_in_started=1", Atom{Key: "http_requests_denied_in", Value: "1"}, true),
	Entry("http_requests_denied_in_started=-1", Atom{Key: "http_requests_denied_in", Value: "-1"}, false),
	Entry("http_requests_denied_in_started invalid", Atom{Key: "http_requests_denied_in", Value: "abc"}, false),
	Entry("packets_in=0", Atom{Key: "packets_in", Value: "0"}, true),
	Entry("packets_in=1", Atom{Key: "packets_in", Value: "1"}, true),
	Entry("packets_in=-1", Atom{Key: "packets_in", Value: "-1"}, false),
	Entry("packets_in invalid", Atom{Key: "packets_in", Value: "abc"}, false),
	Entry("packets_out=0", Atom{Key: "packets_out", Value: "0"}, true),
	Entry("packets_out=1", Atom{Key: "packets_out", Value: "1"}, true),
	Entry("packets_out=-1", Atom{Key: "packets_out", Value: "-1"}, false),
	Entry("packets_out invalid", Atom{Key: "packets_out", Value: "abc"}, false),
	Entry("proto=icmp", Atom{Key: "proto", Value: "icmp"}, true),
	Entry("proto=tcp", Atom{Key: "proto", Value: "tcp"}, true),
	Entry("proto=udp", Atom{Key: "proto", Value: "udp"}, true),
	Entry("proto=ipip", Atom{Key: "proto", Value: "ipip"}, true),
	Entry("proto=esp", Atom{Key: "proto", Value: "esp"}, true),
	Entry("proto=icmp6", Atom{Key: "proto", Value: "icmp6"}, true),
	Entry("proto invalid", Atom{Key: "proto", Value: "abc"}, false),
	Entry("proto numeric", Atom{Key: "proto", Value: "123"}, true),
	Entry("policies root key", Atom{Key: "policies", Value: "123"}, false),
	Entry("policies valid", Atom{Key: "policies.all_policies", Value: "123"}, true),
	Entry("policies sub key", Atom{Key: "policies.all_policies.abc", Value: "123"}, false),
	Entry("source_ip ipv4", Atom{Key: "source_ip", Value: "127.0.0.1"}, true),
	Entry("source_ip ipv6", Atom{Key: "source_ip", Value: "::1"}, true),
	Entry("source_ip invalid", Atom{Key: "source_ip", Value: "256.0.0.1"}, false),
	Entry("source_name", Atom{Key: "source_name", Value: "foo"}, true),
	Entry("source_name_aggr", Atom{Key: "source_name_aggr", Value: "foo"}, true),
	Entry("source_namespace", Atom{Key: "source_namespace", Value: "foo"}, true),
	Entry("source_type=wep", Atom{Key: "source_type", Value: "wep"}, true),
	Entry("source_type=hep", Atom{Key: "source_type", Value: "hep"}, true),
	Entry("source_type=ns", Atom{Key: "source_type", Value: "ns"}, true),
	Entry("source_type=net", Atom{Key: "source_type", Value: "net"}, true),
	Entry("source_port_num=0", Atom{Key: "source_port_num", Value: "0"}, true),
	Entry("source_port_num=65535", Atom{Key: "source_port_num", Value: "65535"}, true),
	Entry("source_port_num negative", Atom{Key: "source_port_num", Value: "-1"}, false),
	Entry("source_port_num out of range", Atom{Key: "source_port_num", Value: "65536"}, false),
	Entry("source_type unknown", Atom{Key: "source_type", Value: "foo"}, false),
	Entry("source_labels root key", Atom{Key: "source_labels", Value: "foo=bar"}, false),
	Entry("source_labels valid", Atom{Key: "source_labels.labels", Value: "foo=bar"}, true),
	Entry("source_labels invalid", Atom{Key: "source_labels.labels", Value: "foo"}, false),
	Entry("original_source_ips ipv4", Atom{Key: "original_source_ips", Value: "127.0.0.1"}, true),
	Entry("original_source_ips ipv6", Atom{Key: "original_source_ips", Value: "::1"}, true),
	Entry("original_source_ips invalid", Atom{Key: "original_source_ips", Value: "256.0.0.1"}, false),
	Entry("num_original_source_ips=0", Atom{Key: "num_original_source_ips", Value: "0"}, true),
	Entry("num_original_source_ips=1", Atom{Key: "num_original_source_ips", Value: "1"}, true),
	Entry("num_original_source_ips=-1", Atom{Key: "num_original_source_ips", Value: "-1"}, false),
	Entry("num_original_source_ips invalid", Atom{Key: "num_original_source_ips", Value: "abc"}, false),
	Entry("process_name", Atom{Key: "process_name", Value: "*"}, true),
	Entry("process_name", Atom{Key: "process_name", Value: "bar"}, true),
	Entry("num_process_names=0", Atom{Key: "num_process_names", Value: "0"}, true),
	Entry("num_process_names=1", Atom{Key: "num_process_names", Value: "1"}, true),
	Entry("num_process_names=-1", Atom{Key: "num_process_names", Value: "-1"}, false),
	Entry("num_process_names invalid", Atom{Key: "num_process_names", Value: "abc"}, false),
	Entry("process_id", Atom{Key: "process_id", Value: "*"}, true),
	Entry("process_id", Atom{Key: "process_id", Value: "1234"}, true),
	Entry("num_process_ids=0", Atom{Key: "num_process_ids", Value: "0"}, true),
	Entry("num_process_ids=1", Atom{Key: "num_process_ids", Value: "1"}, true),
	Entry("num_process_ids=-1", Atom{Key: "num_process_ids", Value: "-1"}, false),
	Entry("num_process_ids invalid", Atom{Key: "num_process_ids", Value: "abc"}, false),
	Entry("process_args", Atom{Key: "process_args", Value: "-p 1234 -i 127.0.0.1"}, true),
	Entry("process_args", Atom{Key: "process_args", Value: ""}, true),
	Entry("num_process_args=0", Atom{Key: "num_process_args", Value: "0"}, true),
	Entry("num_process_args=1", Atom{Key: "num_process_args", Value: "1"}, true),
	Entry("num_process_args=-1", Atom{Key: "num_process_args", Value: "-1"}, false),
	Entry("num_process_args invalid", Atom{Key: "num_process_args", Value: "abc"}, false),
	Entry("unknown field", Atom{Key: "fake_field", Value: "abc"}, false),
)
