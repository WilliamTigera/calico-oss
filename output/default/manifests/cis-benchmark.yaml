apiVersion: projectcalico.org/v3
kind: GlobalReportType
metadata:
  creationTimestamp: null
  labels:
    global-report-type: cis-benchmark
  name: cis-benchmark
spec:
  downloadTemplates:
  - name: all-tests.csv
    template: |
      nodeName,testIndex,testDescription,status,scored,remediation
      {{ range $i, $node := .CISBenchmark -}}
      {{- range $j, $section := $node.Results -}}
      {{- range $k, $result := $section.Results -}}
      {{- $node.NodeName }},{{ $result.TestNumber }},{{ $result.TestDesc }},{{ $result.Status }},{{ $result.Scored }},"{{ $result.TestInfo }}"
      {{ end }}
      {{- end }}
      {{- end }}
  - name: failed-tests.csv
    template: |
      nodeName,testIndex,testDescription,status,scored,remediation
      {{ range $i, $node := .CISBenchmark }}
      {{- range $j, $section := $node.Results }}
      {{- range $k, $result := $section.Results }}
      {{- if eq $result.Status "FAIL" }}
      {{- $node.NodeName }},{{ $result.TestNumber }},{{ $result.TestDesc }},{{ $result.Status }},{{ $result.Scored }},"{{ $result.TestInfo }}"
      {{ end }}
      {{- end }}
      {{- end }}
      {{- end }}
  - name: node-summary.csv
    template: |
      node,version,status,testsPassing,testsFailing,testsUnknown,testsTotal
      {{ range $_, $node := .CISBenchmark }}
      {{- $node.NodeName }},{{ $node.KubernetesVersion }},{{ $node.Summary.Status }},{{ $node.Summary.TotalPass }},{{ $node.Summary.TotalFail }},{{ $node.Summary.TotalInfo }},{{ $node.Summary.Total }}
      {{ end }}
  - name: total-summary.csv
    template: "{{ $c := csv }}\n{{- $c := $c.AddColumn \"startTime\"           \"{{
      dateRfc3339 .StartTime }}\" }}\n{{- $c := $c.AddColumn \"endTime\"             \"{{
      dateRfc3339 .EndTime }}\" }}\n{{- $c := $c.AddColumn \"type\"             \t
      \"{{ .CISBenchmarkSummary.Type }}\" }}\n{{- $c := $c.AddColumn \"hiPercentThreshold\"
      \ \"{{ if .ReportSpec.CIS }}{{ if .ReportSpec.CIS.HighThreshold  }}{{ .ReportSpec.CIS.HighThreshold
      }}{{ else }}100{{ end }}{{ else }}100{{ end }}\" }}\n{{- $c := $c.AddColumn
      \"medPercentThreshold\" \"{{ if .ReportSpec.CIS }}{{ if .ReportSpec.CIS.MedThreshold
      \ }}{{ .ReportSpec.CIS.MedThreshold }}{{ else }}50{{ end }}{{ else }}50{{ end
      }}\" }}\n{{- $c := $c.AddColumn \"hiNodeCount\"         \"{{ .CISBenchmarkSummary.HighCount
      }}\" }}\n{{- $c := $c.AddColumn \"medNodeCount\"        \"{{ .CISBenchmarkSummary.MedCount
      }}\" }}\n{{- $c := $c.AddColumn \"lowNodeCount\"        \"{{ .CISBenchmarkSummary.LowCount
      }}\" }}\n{{- $c.Render . }}\n"
  includeCISBenchmarkData: true
  uiSummaryTemplate:
    name: ui-summary.json
    template: '{{ $n := len .CISBenchmark }}{"heading": "Kubernetes CIS Benchmark","type":
      "row","widgets": [{"heading": "Node Failure Summary","type": "cis-benchmark-nodes","summary":
      {"label": "Total","total": {{ $n }}},"data": [{"label": "HIGH","value": {{ .CISBenchmarkSummary.HighCount
      }},"desc": "Nodes with {{ if .ReportSpec.CIS }}{{ if .ReportSpec.CIS.HighThreshold
      }}{{ if eq (int .ReportSpec.CIS.HighThreshold) 100 }}100%{{ else }}{{ .ReportSpec.CIS.HighThreshold
      }}% or more{{ end }}{{ else }}100%{{ end }}{{ else }}100%{{ end }} tests passing"},
      {"label": "MED","value": {{ .CISBenchmarkSummary.MedCount }},"desc": "Nodes
      with {{ if .ReportSpec.CIS }}{{ if .ReportSpec.CIS.MedThreshold }}{{ .ReportSpec.CIS.MedThreshold
      }}{{ else }}50{{ end }}{{ else }}50{{ end }}% or more tests passing"}, {"label":
      "LOW","value": {{ .CISBenchmarkSummary.LowCount }},"desc": "Nodes with less
      than {{ if .ReportSpec.CIS }}{{ if .ReportSpec.CIS.MedThreshold }}{{ .ReportSpec.CIS.MedThreshold
      }}{{ else }}50{{ end }}{{ else }}50{{ end }}% tests passing"}]}{{ if .CISBenchmark
      }}, {"heading": "Top Failed Tests","type": "cis-benchmark-tests","topFailedTests":
      {"tests": [{{ $tests := cisTopFailedTests . }}{{ $nTests := len $tests }}{{
      range $i, $test := $tests }}{"index": "{{ $test.TestNumber }}","description":
      "{{ $test.TestDesc }}","failedCount": "{{ $test.Count }}"} {{ $i1 := add1 $i
      }}{{ if ne $i1 $nTests }}, {{ end }}{{ end }}]} }{{ end }}]}'
