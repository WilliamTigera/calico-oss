---
layout: null
---
# This manifest adds the additional CNX Manager components to a cluster
# that has already had the Calico part of CNX deployed.
# - It refers to the calico-config ConfigMap and calico-etcd-secrets Secret
#   from that file, so if you are not using the provided hosted Calico
#   manifest you must update references to those resources in this file.
# - Update the tigera-cnx-manager-config ConfigMap below before use.
# - Optionally update the cnx-apiserver-certs ConfigMap and caBundle in the
#   apiregistration section below to use your TLS certs for secure communication
#   between the CNX API server and Kubernetes API server.
# - This manifest makes the CNX Manager web server available via a NodePort
#   serving on port 30003.  You may wish to update how this is exposed; do
#   so by editing the tigera-cnx-manager-access Service below.

# Update this ConfigMap with the Google login client id.
kind: ConfigMap
apiVersion: v1
metadata:
  name: tigera-cnx-manager-config
  namespace: kube-system
data:
  # Authentication type.  Must be set to "OIDC", "Basic" or "Token".
  tigera.cnx-manager.authentication-type: "Basic"
  # The OIDC authority.  Required if authentication-type is OIDC, ignored otherwise.
  tigera.cnx-manager.oidc-authority: "https://accounts.google.com"
  # The OIDC client id to use for OIDC login.  Kubelet must be configured accordingly.
  # Value is ignored if not using OIDC login.
  tigera.cnx-manager.oidc-client-id: "<fill-in-your-oauth-client-id-here>"
  # The location of the Kubernetes API.  This must be reachable from where the web interface
  # will be accessed from.
  tigera.cnx-manager.kubernetes-api: "127.0.0.1:6443"

---

# Optionally update this ConfigMap to use your own TLS certs.
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: cnx-apiserver-certs
  namespace: kube-system
data:
  # This self-hosted install uses a hard coded set of TLS certs, when deploying to production
  # please follow the Customizing the CNX manifests (advanced) guide to generate your own certs.
  apiserver.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBOHduMFR1WHp4Zk9sbUdPaFNtdFdIc04yemM2K3pIRGxERE84LzBGTXoxOWpaMHR5CmxTdmY5a0dJZUkzb0FlZFFyTTdkaVV5UjNpTTdjMmlCOU5vWVV4ckd5NzRTM2RUckVqTTRVeFlIRFoxb0NYN0cKb05sMUsyY2ZPMTJlZHkzbjN5MEFZVTh1S3Y2N3hXU1Y4TExMQnQxMXpFZHNsTG1xRXV1anlqNzBBZFIrREZ5eAp2V29OVUFnMDlOejB3NUNydExYaXNWR0dCdUtMWUp3YS9hWGlSMEt1Z3hpTEJMWmJwYzkraGdxWFRYMS9zcmhHCmJva012NHVvUkZzRUhFcndsTWZ0UTloaTBVQ1hWYmk5bjUvdXdWSzZ1R1AzZ0U5NG1YcjRYbnhqVFRaeFEya2gKMjhFam1HY2hxSWhydCsyNmVObkdOZHA3NEdBbmxtbjhnRWgrN3dJREFRQUJBb0lCQVFEZGxBZS9IdnRmVUVGNwphK29URlVVUkN4ZjNqelI0NDd5UG9XUUFQQ0t4TmNCRTNvNTYzZU4wZWs3WHlsanAwMkRFREY0QjNXTm42U3M4Cmp0MWN4TEpFb2piNGJqUjVOck9TaGt3bHhBRnVNa0kxMWZWMWxJeTBvM0hnQi94L244UzB2aXlJaTA0R09QUXMKaFFZR3lwczdpUkRxeTN0OUpNQ2dPMkc2OUNZMnV5TzBiRUN6SW1OVklBeDFXTXBtdCsvOXJLM09YUUhxRTIwWQpaeEVsczFQMXVpQVBWUWx0Wk9La09kU0tTSS9Ja0Faa3BzVm9iS3ZhTjZLV2d4L1NuYVFxR2tqV2Vld1RSdXdFCjdPNXZkUFpEUGx0ZFcvY2JCdmNuNk8wUTRNVmVwVFc4Mmp6MzVUWGZrQVpYb24wMStjOUQ0bG9id3NGa25uTXIKSE1objl3Q0JBb0dCQVA5aGUrbFJabGZJMzFNcktHRXRaYmx4cFluOW5wZDgzZHBmREovby9iR3NtSW9zR1VwbAp4dXNUS3ptUTFFaDBXU1hNWTZDRmpnZTNkVmZEbnhEMUNIdWhnUFY4SFVEVXZWVnZPZ2tYd1FWR2xLelJtTTJwCnEzMDdvOVdOL3Q1di9uMjcrMnZOZkVZSVNvSFFnZk1nc3Q2UFE3OVdoTVdxMitKeXp0U3NIbVdoQW9HQkFQT2cKejBOU1dxZzQ2eUJ3VVA4dWVPNGJqc2E3aE4wTGlzcTJ4T3RTdndjZDd1OWlzR245aE4zUWtXNXNSakhZaEd4UgovSy9JK1kvTnFEZE0rbm9GeGlzTlVReXoyUG55V3FrTDZXOXYyclN4Zk1GdzlIK2NPYUY3Yi82d0xWckdpS2xTCkpYbVZYaURFUHd2dlplYWJTN3dXbmpPbEorbnptclJvOERqMGYzcVBBb0dBWHQyK292QmEvVGNnUm92Y3B5U3YKQ2hFK2RpRWhmWktqOHcrbDUrMHIrSWx0N0wzdTh5VVZuSk4xVmlBSHk1WjAyMGF1cDUyVklpYXpUMVBhemZqSQpHdXptczhwVUw1WVhjeG9yUzk5b0UyYWhxZ1QrSnovazlWTm5TOWhBbWk2dU1kVFgwN2IwZUN0eVNnRERsU1pMCmE4TjZYaVJzaytVaFkyQlVsc29OVEtFQ2dZQllXd0hRRUpZQVhHUXBwNUk0ZWNveDBKeS9SbEt4Ti9abC9sTDgKWlU0U2JyQ3c4TUc2THM5NUFxTTd3TmpVU3duN251QmRnQzNDRVh2b1VtcWt4bU5RU2N3VEowYVJuMnR4MDNnZAppaHR2WE04NStKVXprcHowQzZoYVhkcVZDVnVXek12NmhFbFc2TlZVcHNYMkZHd3JFcWpkWWhCUHNLRnl2SHdpCnE4bHYwUUtCZ0ZXM3JqRDlVY3o1YnRCbWtHUERXVnFTd0MwWkp2dm1EL0lYZUd0NE9FOGdaQjBkeUwwTVFyNTMKWTVaOHlvMkFnRW5GVXBRajlzamJyRDhVNEIzSVllM0ErdllRTjBVbGFEajVLR1hCZUh6REMycnIwMWFQR0RhaApsVmpJL3d0NkpSWkxKQk1oUVA3UzIyVU8vQnpTRXRXWmNsVGsxVlZ5RUVIL2pkbUltellVCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  apiserver.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMakNDQWhZQ0NRRDA0Wk5UWG9MS01EQU5CZ2txaGtpRzl3MEJBUXNGQURCRk1Rc3dDUVlEVlFRR0V3SkIKVlRFVE1CRUdBMVVFQ0F3S1UyOXRaUzFUZEdGMFpURWhNQjhHQTFVRUNnd1lTVzUwWlhKdVpYUWdWMmxrWjJsMApjeUJRZEhrZ1RIUmtNQjRYRFRFNE1ERXhPVEUyTWpBMU5Wb1hEVEU1TURZd016RTJNakExTlZvd2JURUxNQWtHCkExVUVCaE1DUVZVeEV6QVJCZ05WQkFnTUNsTnZiV1V0VTNSaGRHVXhJVEFmQmdOVkJBb01HRWx1ZEdWeWJtVjAKSUZkcFpHZHBkSE1nVUhSNUlFeDBaREVtTUNRR0ExVUVBd3dkWTI1NExXRndhWE5sY25abGNpNXJkV0psTFhONQpjM1JsYlM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEekNmUk81ZlBGCjg2V1lZNkZLYTFZZXczYk56cjdNY09VTU03ei9RVXpQWDJOblMzS1ZLOS8yUVloNGplZ0I1MUNzenQySlRKSGUKSXp0emFJSDAyaGhUR3NiTHZoTGQxT3NTTXpoVEZnY05uV2dKZnNhZzJYVXJaeDg3WFo1M0xlZmZMUUJoVHk0cQovcnZGWkpYd3Nzc0czWFhNUjJ5VXVhb1M2NlBLUHZRQjFINE1YTEc5YWcxUUNEVDAzUFREa0t1MHRlS3hVWVlHCjRvdGduQnI5cGVKSFFxNkRHSXNFdGx1bHozNkdDcGROZlgreXVFWnVpUXkvaTZoRVd3UWNTdkNVeCsxRDJHTFIKUUpkVnVMMmZuKzdCVXJxNFkvZUFUM2laZXZoZWZHTk5ObkZEYVNIYndTT1laeUdvaUd1MzdicDQyY1kxMm52ZwpZQ2VXYWZ5QVNIN3ZBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFKVllTVFlvL0FXd1k4TGdVcmx1CmEyWmZYQTcwRC8wR3dVVzl6d01CNUhXWjZhd3lDV1JiTDNVakNoeitTd3NFR0xnNy8ya0wvZkloeDhYd2loODcKNktJZGpKK2J2TitQaUk3bCtRVUpaK2ZSMmFxYWpDc0RNZmRKSFJPeFVaK2NVeklaRTgybC9qSFFWZkJqSzFNbgoyTXRNTDNHLzBabUVrWW1vZ09vRUFpZElsMkUvZmk4RDBNb28vV0xmNkI1bU9pUHJFSkc2bEp3MjM1b0Y0OThVCmIwQmVTRGMyRjcyeDdhWmFUbVhWTTZrT1J4SE50SUtxNktRb0xXTzdPQ0Y0cVRXcXR5WnVUUUFGekRkb09GKzYKWmtQMGsxcDIzVDlqQUJwekVIaHRsMWJjdFJudGJpd1ArSWZRcDducFlPTEg2bk9qWHJFcUh0RXpZMlZNRUhuegptT3c9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"

---

# Optionally update this Service to change how CNX Manager is accessed.
# If using Google login, the URL for the web server must be configured
# as a redirect URI in the Google project.  If the web server will be
# accessed at https://<host>:<port>, add https://<host>:<port>/login/oidc/callback
# to the redirect URI list for the project.
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: cnx-manager
  name: cnx-manager
  namespace: kube-system
spec:
  selector:
    k8s-app: cnx-manager
  ports:
    - port: 8080
      targetPort: 443
      nodePort: 30003
  type: NodePort

---

# Optionally update this ConfigMap to use your own caBundle.
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v3.projectcalico.org
spec:
  group: projectcalico.org
  versionPriority: 200
  groupPriorityMinimum: 200
  service:
    name: api
    namespace: kube-system
  version: v3
  # This self-hosted install uses a hard coded caBundle, when deploying to production
  # please follow the Customizing the CNX manifests (advanced) guide to generate your own caBundle.
  caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURYVENDQWtXZ0F3SUJBZ0lKQU1pMjhuWVFZanhRTUEwR0NTcUdTSWIzRFFFQkN3VUFNRVV4Q3pBSkJnTlYKQkFZVEFrRlZNUk13RVFZRFZRUUlEQXBUYjIxbExWTjBZWFJsTVNFd0h3WURWUVFLREJoSmJuUmxjbTVsZENCWAphV1JuYVhSeklGQjBlU0JNZEdRd0hoY05NVGd3TVRFNU1UWXhPRE15V2hjTk1qQXhNVEE0TVRZeE9ETXlXakJGCk1Rc3dDUVlEVlFRR0V3SkJWVEVUTUJFR0ExVUVDQXdLVTI5dFpTMVRkR0YwWlRFaE1COEdBMVVFQ2d3WVNXNTAKWlhKdVpYUWdWMmxrWjJsMGN5QlFkSGtnVEhSa01JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQgpDZ0tDQVFFQTBlMkx6d0dFU3o5dlgwRzNyZ0poNUlKOSszb1V1NHB3bEpYdFBCaVNOK2FTRDErRExTaDlPSUVQClJTLzBsdHlvWDlyTEs3ZDlnU3FzbG1hNEo1cWw5eGcxY3JEL0RubVJmbjhBckRqQzNEcHVTRFA5Rm1kV1dzZnYKMkRLbXArZWZNc1F3QXhjT2lscVQ4SkVMMU9xUU1HVXV3VzY5RW8ycWlMcWc4N2JVS2lydW50NzhCSjVJTXYxWgpzWXJyemxERGwzYW4vMXQ4WkVPck9jYjhsQ2NHcmJRbDNWMUtMWFZqRzVLY3Uyc2MrV0lhMGFqSzVMWnBNVTFzCms3V3ZCRXdFMDJJNUZML3pTWXpybEplLzM1ZVNOa1RrWFI2bE41OUpwd3hJU0d5dW9HbmRuaDBObGZtbUVqS2cKM1FJb3J2cUwvUkR0SlRvZEpKTzd4SmRNYVczV1ZRSURBUUFCbzFBd1RqQWRCZ05WSFE0RUZnUVUzNS9pYVY4eQphTi9JeThmYzd2SGUrTVRLZkYwd0h3WURWUjBqQkJnd0ZvQVUzNS9pYVY4eWFOL0l5OGZjN3ZIZStNVEtmRjB3CkRBWURWUjBUQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBT1dRYmw4dHRLOGxabFVKN0FhY3UKQ2dVeXBwOFhWaFh1clRTclQzVzZjTGJnZlVYV3c5ZWNDZW1zSzNtOEIxZjF5QitKQkNjcHVET1lKYmxDSEZjZgpqWTQ4SGNvMzk0MG84V2JubUxTck5QWTBxeTNWdkJQbjhabzJBeW9NbXZXbkhyVXhCK0hwc3N6Z2xOV0FmaVNnCkpHQnlZa2I1NXQxY0JTNEdKSmtzRlZMUy81ZndMZlhsd0RNa0g1TnJqNzM2Q01WaVpISFhHdEo0YmxQUU9JYUUKc1djeThLQmF4a0dKRjNncnh2cnAyQVRZblk3ajFwM0U0RFZnaTN0bWpPTWttbS85Y3ZaN2tPN3JWaityK2dhTwpFUnk1T0JnZDNtUHVDOVY1WVJtNU5BS3h6TFBFNHZVWEdGZkxWOVZtOUNPeG9QUlRGQklFUENzMzdYcjlzSHYvCkFBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: calico:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: cnx-apiserver
  namespace: kube-system

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: calico-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: cnx-apiserver
  namespace: kube-system

---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: cnx-apiserver
  namespace: kube-system

---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: cnx-manager
  namespace: kube-system

---

apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: kube-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 5443
  selector:
    apiserver: "true"

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cnx-apiserver
  namespace: kube-system
  labels:
    apiserver: "true"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      apiserver: "true"
  template:
    metadata:
      name: cnx-apiserver
      namespace: kube-system
      labels:
        apiserver: "true"
    spec:
      serviceAccountName: cnx-apiserver
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      containers:
      - name: cnx-apiserver
        image: {{site.imageNames["cnxApiserver"]}}:{{site.data.versions[page.version].first.components["cnx-apiserver"].version}}
        args:
        - "--secure-port=5443"
        env:
          - name: ETCD_ENDPOINTS
            valueFrom:
              configMapKeyRef:
                name: calico-config
                key: etcd_endpoints
          - name: DATASTORE_TYPE
            value: "etcdv3"
          # If you're using TLS enabled etcd uncomment the following.
          # Location of the CA certificate for etcd.
          # - name: ETCD_CA_CERT_FILE
          #   valueFrom:
          #     configMapKeyRef:
          #       name: calico-config
          #       key: etcd_ca
          # Location of the client key for etcd.
          # - name: ETCD_KEY_FILE
          #   valueFrom:
          #     configMapKeyRef:
          #       name: calico-config
          #       key: etcd_key
          # Location of the client certificate for etcd.
          # - name: ETCD_CERT_FILE
          #   valueFrom:
          #     configMapKeyRef:
          #       name: calico-config
          #       key: etcd_cert
        volumeMounts:
          # - mountPath: /calico-secrets
          #   name: etcd-certs
          - mountPath: /code/apiserver.local.config/certificates
            name: apiserver-certs
      volumes:
        # If you're using TLS enabled etcd uncomment the following.
        # - name: etcd-certs
        #   secret:
        #     secretName: calico-etcd-secrets
        - name: apiserver-certs
          secret:
            secretName: cnx-apiserver-certs

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cnx-manager
  namespace: kube-system
  labels:
    k8s-app: cnx-manager
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: cnx-manager
      namespace: kube-system
      labels:
        k8s-app: cnx-manager
      annotations:
        # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
        # reserves resources for critical add-on pods so that they can be rescheduled after
        # a failure.  This annotation works in tandem with the toleration below.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: cnx-manager
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      # Allow this pod to be rescheduled while the node is in "critical add-ons only" mode.
      # This, along with the annotation above marks this pod as a critical add-on.
      - key: CriticalAddonsOnly
        operator: Exists
      containers:
      - name: cnx-manager
        image: {{site.imageNames["cnxManager"]}}:{{site.data.versions[page.version].first.components["cnx-manager"].version}}
        env:
          - name: CNX_WEB_AUTHENTICATION_TYPE
            valueFrom:
              configMapKeyRef:
                name: tigera-cnx-manager-config
                key: tigera.cnx-manager.authentication-type
          - name: CNX_WEB_OIDC_AUTHORITY
            valueFrom:
              configMapKeyRef:
                name: tigera-cnx-manager-config
                key: tigera.cnx-manager.oidc-authority
          - name: CNX_WEB_OIDC_CLIENT_ID
            valueFrom:
              configMapKeyRef:
                name: tigera-cnx-manager-config
                key: tigera.cnx-manager.oidc-client-id
          - name: CNX_WEB_K8S_API
            valueFrom:
              configMapKeyRef:
                name: tigera-cnx-manager-config
                key: tigera.cnx-manager.kubernetes-api
        volumeMounts:
        - mountPath: /etc/cnx-manager-web-tls
          name: cnx-manager-tls
      volumes:
      - name: cnx-manager-tls
        secret:
          secretName: cnx-manager-tls
