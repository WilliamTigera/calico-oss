---
layout: null
---
#
# Manifest to auto inject index, visualization and dashboards into Kibana
#
# Note: to create the api-kibana-dashboard.json you must use the export API to extract the json
# For example:  $curl -X GET \
# 'http://192.168.189.183:5601/api/kibana/dashboards/export?dashboard=a2a864b0-c1c-11e8-b274-fbb68ba254a6&dashboard=c66e42c0-c11c-11e8-b274-fbb68ba254a6' \
# -H 'kbn-xsrf: true' > api-kibana-dashboard.json
#
# One way to figure out the specific dashboard id's is to export the saved objects from Kibana UI and then look at the 'dashboards' id's in the json file.
#
kind: ConfigMap
apiVersion: v1
metadata:
  name: kibana-dashboards
  namespace: calico-monitoring
data:
  kibana-dashboard.json: |
{% include {{page.version}}/manifests/api-kibana-dashboard.json %}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tigera-kibana-job
  namespace: calico-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: tigera-kibana-job
rules:
- apiGroups: [""]
  resources:
  - endpoints
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tigera-kibana-job
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tigera-kibana-job
subjects:
- kind: ServiceAccount
  name: tigera-kibana-job
  namespace: calico-monitoring
---
# This batch job waits until Kibana is running,
# then configures it's datasources and dashboards using the info defined in the
# above configmap.
apiVersion: batch/v1
kind: Job
metadata:
  name: kibana-import
  namespace: calico-monitoring
  labels:
    app: kibana-import
    component: import-dashboards
spec:
  template:
    metadata:
      name: kibana-import
      labels:
        app: kibana-import
    spec:
      serviceAccountName: tigera-kibana-job
      initContainers:
      - name: wait-for-endpoints
        image: giantswarm/tiny-tools:{{site.data.versions[page.version].first.components["tiny-tools"].version}}
        imagePullPolicy: IfNotPresent
        command: ["fish", "-c", "echo \"waiting for endpoints...\"; while true; set endpoints (curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt --header \"Authorization: Bearer \"(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://kubernetes.default.svc/api/v1/namespaces/calico-monitoring/endpoints/kibana-tigera-elasticsearch); echo $endpoints | jq \".\"; if test (echo $endpoints | jq -r \".subsets[].addresses | length\") -gt 0; exit 0; end; echo \"waiting...\";sleep 1; end"]
        args: ["monitoring", "kibana"]
      containers:
      - name: kibana-import
        image: giantswarm/tiny-tools:{{site.data.versions[page.version].first.components["tiny-tools"].version}}
        command: ["/bin/sh", "-c"]
        args:
          - >
            curl -v \
              http://kibana-tigera-elasticsearch/api/kibana/dashboards/import \
              --header "Content-Type: application/json" \
              --header 'kbn-xsrf: true' \
              --data-binary "@/opt/dashboards/kibana-dashboard.json"
        volumeMounts:
        - name: kibana-dashboards
          mountPath: /opt/dashboards
      restartPolicy: OnFailure
      volumes:
      - name: kibana-dashboards
        configMap:
          name: kibana-dashboards
