{
  "swagger": "2.0",
  "info": {
    "title": "",
    "version": "v3"
  },
  "host": "kubernetes.master",
  "basePath": "/apis/projectcalico.org/v3",
  "paths": {
    "/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getProjectcalicoOrgV3APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ]
      }
    },
    "/globalnetworkpolicies": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of GlobalNetworkPolicy",
        "operationId": "deleteProjectcalicoOrgV3CollectionGlobalNetworkPolicy",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind GlobalNetworkPolicy",
        "operationId": "listProjectcalicoOrgV3GlobalNetworkPolicy",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a GlobalNetworkPolicy",
        "operationId": "createProjectcalicoOrgV3GlobalNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      }
    },
    "/globalnetworkpolicies/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a GlobalNetworkPolicy",
        "operationId": "deleteProjectcalicoOrgV3GlobalNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified GlobalNetworkPolicy",
        "operationId": "readProjectcalicoOrgV3GlobalNetworkPolicy",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the GlobalNetworkPolicy",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified GlobalNetworkPolicy",
        "operationId": "patchProjectcalicoOrgV3GlobalNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified GlobalNetworkPolicy",
        "operationId": "replaceProjectcalicoOrgV3GlobalNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      }
    },
    "/globalnetworksets": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of GlobalNetworkSet",
        "operationId": "deleteProjectcalicoOrgV3CollectionGlobalNetworkSet",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind GlobalNetworkSet",
        "operationId": "listProjectcalicoOrgV3GlobalNetworkSet",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a GlobalNetworkSet",
        "operationId": "createProjectcalicoOrgV3GlobalNetworkSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      }
    },
    "/globalnetworksets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a GlobalNetworkSet",
        "operationId": "deleteProjectcalicoOrgV3GlobalNetworkSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified GlobalNetworkSet",
        "operationId": "readProjectcalicoOrgV3GlobalNetworkSet",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the GlobalNetworkSet",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified GlobalNetworkSet",
        "operationId": "patchProjectcalicoOrgV3GlobalNetworkSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified GlobalNetworkSet",
        "operationId": "replaceProjectcalicoOrgV3GlobalNetworkSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      }
    },
    "/globalreports": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of GlobalReport",
        "operationId": "deleteProjectcalicoOrgV3CollectionGlobalReport",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind GlobalReport",
        "operationId": "listProjectcalicoOrgV3GlobalReport",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a GlobalReport",
        "operationId": "createProjectcalicoOrgV3GlobalReport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      }
    },
    "/globalreports/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a GlobalReport",
        "operationId": "deleteProjectcalicoOrgV3GlobalReport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified GlobalReport",
        "operationId": "readProjectcalicoOrgV3GlobalReport",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the GlobalReport",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified GlobalReport",
        "operationId": "patchProjectcalicoOrgV3GlobalReport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified GlobalReport",
        "operationId": "replaceProjectcalicoOrgV3GlobalReport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      }
    },
    "/globalreports/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified GlobalReport",
        "operationId": "readProjectcalicoOrgV3GlobalReportStatus",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the GlobalReport",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update status of the specified GlobalReport",
        "operationId": "patchProjectcalicoOrgV3GlobalReportStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified GlobalReport",
        "operationId": "replaceProjectcalicoOrgV3GlobalReportStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      }
    },
    "/globalreporttypes": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of GlobalReportType",
        "operationId": "deleteProjectcalicoOrgV3CollectionGlobalReportType",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind GlobalReportType",
        "operationId": "listProjectcalicoOrgV3GlobalReportType",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportTypeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a GlobalReportType",
        "operationId": "createProjectcalicoOrgV3GlobalReportType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      }
    },
    "/globalreporttypes/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a GlobalReportType",
        "operationId": "deleteProjectcalicoOrgV3GlobalReportType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified GlobalReportType",
        "operationId": "readProjectcalicoOrgV3GlobalReportType",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the GlobalReportType",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified GlobalReportType",
        "operationId": "patchProjectcalicoOrgV3GlobalReportType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified GlobalReportType",
        "operationId": "replaceProjectcalicoOrgV3GlobalReportType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      }
    },
    "/globalthreatfeeds": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of GlobalThreatFeed",
        "operationId": "deleteProjectcalicoOrgV3CollectionGlobalThreatFeed",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind GlobalThreatFeed",
        "operationId": "listProjectcalicoOrgV3GlobalThreatFeed",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeedList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a GlobalThreatFeed",
        "operationId": "createProjectcalicoOrgV3GlobalThreatFeed",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      }
    },
    "/globalthreatfeeds/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a GlobalThreatFeed",
        "operationId": "deleteProjectcalicoOrgV3GlobalThreatFeed",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified GlobalThreatFeed",
        "operationId": "readProjectcalicoOrgV3GlobalThreatFeed",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the GlobalThreatFeed",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified GlobalThreatFeed",
        "operationId": "patchProjectcalicoOrgV3GlobalThreatFeed",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified GlobalThreatFeed",
        "operationId": "replaceProjectcalicoOrgV3GlobalThreatFeed",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      }
    },
    "/globalthreatfeeds/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified GlobalThreatFeed",
        "operationId": "readProjectcalicoOrgV3GlobalThreatFeedStatus",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the GlobalThreatFeed",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update status of the specified GlobalThreatFeed",
        "operationId": "patchProjectcalicoOrgV3GlobalThreatFeedStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified GlobalThreatFeed",
        "operationId": "replaceProjectcalicoOrgV3GlobalThreatFeedStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      }
    },
    "/hostendpoints": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of HostEndpoint",
        "operationId": "deleteProjectcalicoOrgV3CollectionHostEndpoint",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HostEndpoint",
        "operationId": "listProjectcalicoOrgV3HostEndpoint",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpointList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a HostEndpoint",
        "operationId": "createProjectcalicoOrgV3HostEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      }
    },
    "/hostendpoints/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a HostEndpoint",
        "operationId": "deleteProjectcalicoOrgV3HostEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified HostEndpoint",
        "operationId": "readProjectcalicoOrgV3HostEndpoint",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the HostEndpoint",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified HostEndpoint",
        "operationId": "patchProjectcalicoOrgV3HostEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified HostEndpoint",
        "operationId": "replaceProjectcalicoOrgV3HostEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      }
    },
    "/licensekeys": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of LicenseKey",
        "operationId": "deleteProjectcalicoOrgV3CollectionLicenseKey",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind LicenseKey",
        "operationId": "listProjectcalicoOrgV3LicenseKey",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKeyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a LicenseKey",
        "operationId": "createProjectcalicoOrgV3LicenseKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      }
    },
    "/licensekeys/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a LicenseKey",
        "operationId": "deleteProjectcalicoOrgV3LicenseKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified LicenseKey",
        "operationId": "readProjectcalicoOrgV3LicenseKey",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the LicenseKey",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified LicenseKey",
        "operationId": "patchProjectcalicoOrgV3LicenseKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified LicenseKey",
        "operationId": "replaceProjectcalicoOrgV3LicenseKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      }
    },
    "/namespaces/{namespace}/networkpolicies": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of NetworkPolicy",
        "operationId": "deleteProjectcalicoOrgV3CollectionNamespacedNetworkPolicy",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind NetworkPolicy",
        "operationId": "listProjectcalicoOrgV3NamespacedNetworkPolicy",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a NetworkPolicy",
        "operationId": "createProjectcalicoOrgV3NamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      }
    },
    "/namespaces/{namespace}/networkpolicies/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a NetworkPolicy",
        "operationId": "deleteProjectcalicoOrgV3NamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified NetworkPolicy",
        "operationId": "readProjectcalicoOrgV3NamespacedNetworkPolicy",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the NetworkPolicy",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified NetworkPolicy",
        "operationId": "patchProjectcalicoOrgV3NamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified NetworkPolicy",
        "operationId": "replaceProjectcalicoOrgV3NamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      }
    },
    "/networkpolicies": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind NetworkPolicy",
        "operationId": "listProjectcalicoOrgV3NetworkPolicyForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/tiers": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Tier",
        "operationId": "deleteProjectcalicoOrgV3CollectionTier",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Tier",
        "operationId": "listProjectcalicoOrgV3Tier",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If true, partially initialized resources are included in the response.",
            "in": "query",
            "name": "includeUninitialized",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.TierList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Tier",
        "operationId": "createProjectcalicoOrgV3Tier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      }
    },
    "/tiers/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Tier",
        "operationId": "deleteProjectcalicoOrgV3Tier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Tier",
        "operationId": "readProjectcalicoOrgV3Tier",
        "parameters": [
          {
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "in": "query",
            "name": "exact",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "in": "query",
            "name": "export",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "name of the Tier",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "description": "partially update the specified Tier",
        "operationId": "patchProjectcalicoOrgV3Tier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Tier",
        "operationId": "replaceProjectcalicoOrgV3Tier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      }
    },
    "/watch/globalnetworkpolicies": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of GlobalNetworkPolicy",
        "operationId": "watchProjectcalicoOrgV3GlobalNetworkPolicyList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalnetworkpolicies/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind GlobalNetworkPolicy",
        "operationId": "watchProjectcalicoOrgV3GlobalNetworkPolicy",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the GlobalNetworkPolicy",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalnetworksets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of GlobalNetworkSet",
        "operationId": "watchProjectcalicoOrgV3GlobalNetworkSetList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalnetworksets/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind GlobalNetworkSet",
        "operationId": "watchProjectcalicoOrgV3GlobalNetworkSet",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the GlobalNetworkSet",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalreports": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of GlobalReport",
        "operationId": "watchProjectcalicoOrgV3GlobalReportList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalreports/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind GlobalReport",
        "operationId": "watchProjectcalicoOrgV3GlobalReport",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the GlobalReport",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalreporttypes": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of GlobalReportType",
        "operationId": "watchProjectcalicoOrgV3GlobalReportTypeList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalreporttypes/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind GlobalReportType",
        "operationId": "watchProjectcalicoOrgV3GlobalReportType",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the GlobalReportType",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalthreatfeeds": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of GlobalThreatFeed",
        "operationId": "watchProjectcalicoOrgV3GlobalThreatFeedList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/globalthreatfeeds/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind GlobalThreatFeed",
        "operationId": "watchProjectcalicoOrgV3GlobalThreatFeed",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the GlobalThreatFeed",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/hostendpoints": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of HostEndpoint",
        "operationId": "watchProjectcalicoOrgV3HostEndpointList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/hostendpoints/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind HostEndpoint",
        "operationId": "watchProjectcalicoOrgV3HostEndpoint",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the HostEndpoint",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/licensekeys": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of LicenseKey",
        "operationId": "watchProjectcalicoOrgV3LicenseKeyList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/licensekeys/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind LicenseKey",
        "operationId": "watchProjectcalicoOrgV3LicenseKey",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the LicenseKey",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/namespaces/{namespace}/networkpolicies": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of NetworkPolicy",
        "operationId": "watchProjectcalicoOrgV3NamespacedNetworkPolicyList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/namespaces/{namespace}/networkpolicies/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind NetworkPolicy",
        "operationId": "watchProjectcalicoOrgV3NamespacedNetworkPolicy",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the NetworkPolicy",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/networkpolicies": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of NetworkPolicy",
        "operationId": "watchProjectcalicoOrgV3NetworkPolicyListForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/tiers": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of Tier",
        "operationId": "watchProjectcalicoOrgV3TierList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/watch/tiers/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind Tier",
        "operationId": "watchProjectcalicoOrgV3Tier",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          ""
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      },
      "parameters": [
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If true, partially initialized resources are included in the response.",
          "in": "query",
          "name": "includeUninitialized",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the Tier",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    }
  },
  "definitions": {
    "com.github.projectcalico.libcalico-go.lib.apis.v3.AuditEventsSelection": {
      "description": "AuditEventsSelection defines which set of resources should be audited.",
      "properties": {
        "resources": {
          "description": "Resources lists the resources that will be included in the audit logs in the ReportData.  Blank fields in the listed ResourceID structs are treated as wildcards.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.AuditResource"
          },
          "type": "array"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.AuditResource": {
      "description": "AuditResource is used to filter Audit events in the Report configuration.\n\nAn empty field value indicates a wildcard. For example, if Resource is set to \"networkpolicies\" and all other fields are blank then this filter would include all NetworkPolicy resources across all namespaces, and would include both Calico and Kubernetes resource types.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the name of the API group that contains the referred object (e.g. projectcalico.org).",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion is the version of the API group that contains the referred object (e.g. v3).",
          "type": "string"
        },
        "name": {
          "description": "The resource name.",
          "type": "string"
        },
        "namespace": {
          "description": "The resource namespace.",
          "type": "string"
        },
        "resource": {
          "description": "The resource type. The format is the lowercase plural as used in audit event selection and RBAC configuration.",
          "type": "string"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.CompletedReportJob": {
      "description": "CompletedReportJob augments the ReportJob with completion details.",
      "properties": {
        "end": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The end time of the report."
        },
        "job": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "A reference to the report creation job if known."
        },
        "jobCompletionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time the report job completed."
        },
        "start": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The start time of the report."
        }
      },
      "required": [
        "start",
        "end",
        "job"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.EndpointPort": {
      "properties": {
        "name": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.numorstring.Protocol"
        }
      },
      "required": [
        "name",
        "protocol",
        "port"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.EndpointsSelection": {
      "description": "EndpointsSelection is a set of selectors used to select the endpoints that are considered to be in-scope for the report. An empty selector is equivalent to all(). All three selectors are ANDed together.",
      "properties": {
        "namespaces": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.NamesAndLabelsMatch",
          "description": "Namespace match restricts endpoint selection to those in the selected namespaces."
        },
        "selector": {
          "description": "Selector, selects endpoints by endpoint labels. If omitted, all endpoints are included in the report data.",
          "type": "string"
        },
        "serviceAccounts": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.NamesAndLabelsMatch",
          "description": "ServiceAccount match restricts endpoint selection to those in the selected service accounts."
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.EntityRule": {
      "description": "An EntityRule is a sub-component of a Rule comprising the match criteria specific to a particular entity (that is either the source or destination).\n\nA source EntityRule matches the source endpoint and originating traffic. A destination EntityRule matches the destination endpoint and terminating traffic.",
      "properties": {
        "domains": {
          "description": "Domains is an optional field, valid for egress Allow rules only, that restricts the rule to apply only to traffic to one of the specified domains.  If this field is specified, Action must be Allow, and Nets and Selector must both be left empty.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "namespaceSelector": {
          "description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and Selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule.\n\nFor NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy.\n\nFor GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.",
          "type": "string"
        },
        "nets": {
          "description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notNets": {
          "description": "NotNets is the negated version of the Nets field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notPorts": {
          "description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.numorstring.Port"
          },
          "type": "array"
        },
        "notSelector": {
          "description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.",
          "type": "string"
        },
        "ports": {
          "description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.numorstring.Port"
          },
          "type": "array"
        },
        "selector": {
          "description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label “my_label”.\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label “my_label”.\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.",
          "type": "string"
        },
        "serviceAccounts": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ServiceAccountMatch",
          "description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account."
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.ErrorCondition": {
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "message"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalNetworkPolicySpec": {
      "properties": {
        "applyOnForward": {
          "description": "ApplyOnForward indicates to apply the rules in this policy on forward traffic.",
          "type": "boolean"
        },
        "doNotTrack": {
          "description": "DoNotTrack indicates whether packets matched by the rules in this policy should go through the data plane's connection tracking, such as Linux conntrack.  If True, the rules in this policy are applied before any data plane connection tracking, and packets allowed by this policy are marked as not to be tracked.",
          "type": "boolean"
        },
        "egress": {
          "description": "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.Rule"
          },
          "type": "array"
        },
        "ingress": {
          "description": "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.Rule"
          },
          "type": "array"
        },
        "order": {
          "description": "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order within the same tier.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\" within the tier.",
          "format": "double",
          "type": "number"
        },
        "preDNAT": {
          "description": "PreDNAT indicates to apply the rules in this policy before any DNAT.",
          "type": "boolean"
        },
        "selector": {
          "description": "The selector is an expression used to pick pick out the endpoints that the policy should be applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  -\u003e  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   -\u003e  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -\u003e True if that label is present\n\t! expr -\u003e negation of expr\n\texpr \u0026\u0026 expr  -\u003e Short-circuit and\n\texpr || expr  -\u003e Short-circuit or\n\t( expr ) -\u003e parens for grouping\n\tall() or the empty selector -\u003e matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" \u0026\u0026 deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
          "type": "string"
        },
        "tier": {
          "description": "The name of the tier that this policy belongs to.  If this is omitted, the default tier (name is \"default\") is assumed.  The specified tier must exist in order to create security policies within the tier, the \"default\" tier is created automatically if it does not exist, this means for deployments requiring only a single Tier, the tier name may be omitted on all policy management requests.",
          "type": "string"
        },
        "types": {
          "description": "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress rules are present in the policy.  The default is:\n\n- [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are\n  also no Ingress rules)\n\n- [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty or nil.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "selector"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalNetworkSetSpec": {
      "description": "GlobalNetworkSetSpec contains the specification for a NetworkSet resource.",
      "properties": {
        "allowedEgressDomains": {
          "description": "The list of domain names that belong to this set and are honored in egress allow rules only.  Domain names specified here only work to allow egress traffic from the cluster to external destinations.  They don't work to _deny_ traffic to destinations specified by domain name, or to allow ingress traffic from _sources_ specified by domain name.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nets": {
          "description": "The list of IP networks that belong to this set.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalNetworkSetSync": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalThreatFeedSpec": {
      "description": "GlobalThreatFeedSpec contains the specification of a GlobalThreatFeed resource.",
      "properties": {
        "content": {
          "description": "Content describes the kind of data the data feed provides.",
          "type": "string"
        },
        "globalNetworkSet": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalNetworkSetSync"
        },
        "pull": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.Pull"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalThreatFeedStatus": {
      "properties": {
        "errorConditions": {
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ErrorCondition"
          },
          "type": "array"
        },
        "lastSuccessfulSearch": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastSuccessfulSync": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "required": [
        "lastSuccessfulSync",
        "lastSuccessfulSearch",
        "errorConditions"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPHeader": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPHeaderSource"
        }
      },
      "required": [
        "name"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPHeaderSource": {
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "Selects a key of a ConfigMap."
        },
        "secretKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Selects a key of a secret in the pod's namespace"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPMatch": {
      "description": "HTTPMatch is an optional field that apply only to HTTP requests The Methods and Path fields are joined with AND",
      "properties": {
        "methods": {
          "description": "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "paths": {
          "description": "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPPath"
          },
          "type": "array"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPPath": {
      "description": "HTTPPath specifies an HTTP path to match. It may be either of the form: exact: \u003cpath\u003e: which matches the path exactly or prefix: \u003cpath-prefix\u003e: which matches the path prefix",
      "properties": {
        "exact": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPPull": {
      "properties": {
        "format": {
          "type": "string"
        },
        "headers": {
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPHeader"
          },
          "type": "array"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.HostEndpointSpec": {
      "description": "HostEndpointSpec contains the specification for a HostEndpoint resource.",
      "properties": {
        "expectedIPs": {
          "description": "The expected IP addresses (IPv4 and IPv6) of the endpoint. If \"InterfaceName\" is not present, Calico will look for an interface matching any of the IPs in the list and apply policy to that. Note:\n\tWhen using the selector match criteria in an ingress or egress security Policy\n\tor Profile, Calico converts the selector into a set of IP addresses. For host\n\tendpoints, the ExpectedIPs field is used for that purpose. (If only the interface\n\tname is specified, Calico does not learn the IPs of the interface for use in match\n\tcriteria.)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "interfaceName": {
          "description": "Either \"*\", or the name of a specific Linux interface to apply policy to; or empty.  \"*\" indicates that this HostEndpoint governs all traffic to, from or through the default network namespace of the host named by the \"Node\" field; entering and leaving that namespace via any interface, including those from/to non-host-networked local workloads.\n\nIf InterfaceName is not \"*\", this HostEndpoint only governs traffic that enters or leaves the host through the specific interface named by InterfaceName, or - when InterfaceName is empty - through the specific interface that has one of the IPs in ExpectedIPs. Therefore, when InterfaceName is empty, at least one expected IP must be specified.  Only external interfaces (such as “eth0”) are supported here; it isn't possible for a HostEndpoint to protect traffic through a specific local workload interface.\n\nNote: Only some kinds of policy are implemented for \"*\" HostEndpoints; initially just pre-DNAT policy.  Please check Calico documentation for the latest position.",
          "type": "string"
        },
        "node": {
          "description": "The node name identifying the Calico node instance.",
          "type": "string"
        },
        "ports": {
          "description": "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.EndpointPort"
          },
          "type": "array"
        },
        "profiles": {
          "description": "A list of identifiers of security Profile objects that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.ICMPFields": {
      "description": "ICMPFields defines structure for ICMP and NotICMP sub-struct for ICMP code and type",
      "properties": {
        "code": {
          "description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel’s iptables firewall, which Calico uses to enforce the rule.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.LicenseKeySpec": {
      "description": "LicenseKeySpec contains the license key itself.",
      "properties": {
        "certificate": {
          "description": "Certificate is used to validate the token.",
          "type": "string"
        },
        "token": {
          "description": "Token is the JWT containing the license claims",
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.NamesAndLabelsMatch": {
      "description": "NamesAndLabelsMatch is used to specify resource matches using both label and name selection.",
      "properties": {
        "names": {
          "description": "Names is an optional field that specifies a set of resources by name.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "selector": {
          "description": "Selector is an optional field that selects a set of resources by label. If both Names and Selector are specified then they are AND'ed.",
          "type": "string"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.NetworkPolicySpec": {
      "properties": {
        "egress": {
          "description": "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.Rule"
          },
          "type": "array"
        },
        "ingress": {
          "description": "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.Rule"
          },
          "type": "array"
        },
        "order": {
          "description": "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order within the same tier.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\" within the tier.",
          "format": "double",
          "type": "number"
        },
        "selector": {
          "description": "The selector is an expression used to pick pick out the endpoints that the policy should be applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  -\u003e  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   -\u003e  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -\u003e True if that label is present\n\t! expr -\u003e negation of expr\n\texpr \u0026\u0026 expr  -\u003e Short-circuit and\n\texpr || expr  -\u003e Short-circuit or\n\t( expr ) -\u003e parens for grouping\n\tall() or the empty selector -\u003e matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" \u0026\u0026 deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
          "type": "string"
        },
        "tier": {
          "description": "The name of the tier that this policy belongs to.  If this is omitted, the default tier (name is \"default\") is assumed.  The specified tier must exist in order to create security policies within the tier, the \"default\" tier is created automatically if it does not exist, this means for deployments requiring only a single Tier, the tier name may be omitted on all policy management requests.",
          "type": "string"
        },
        "types": {
          "description": "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress are present in the policy.  The default is:\n\n- [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are\n  also no Ingress rules)\n\n- [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty or nil.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "selector"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.Pull": {
      "properties": {
        "http": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPPull"
        },
        "period": {
          "type": "string"
        }
      },
      "required": [
        "http"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.ReportJob": {
      "description": "ReportJob contains",
      "properties": {
        "end": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The end time of the report."
        },
        "job": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "A reference to the report creation job if known."
        },
        "start": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The start time of the report."
        }
      },
      "required": [
        "start",
        "end",
        "job"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.ReportSpec": {
      "description": "ReportSpec contains the values of the GlobalReport.",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.EndpointsSelection",
          "description": "Endpoints is used to specify which endpoints are in-scope and stored in the generated report data. Only used if endpoints data and/or audit logs are gathered in the report. If omitted, treated as everything in-scope."
        },
        "jobNodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The node selector used to specify which nodes the report job may be scheduled on.",
          "type": "object"
        },
        "reportType": {
          "description": "The name of the report type.",
          "type": "string"
        },
        "schedule": {
          "description": "The report schedule specified in cron format. This specifies both the start and end times of each report, where the end time of one report becomes the start time of the next report. Separate jobs are created to generate a report, and the job generates the report data from archived audit and traffic data. To ensure this data is actually archived, the jobs to generate each report starts at a configurable time *after* the end time of the report that is being generated. The default job start delay is 30m, but is configurable through the compliance-controller environments. The cron format has minute accuracy, but only up to two values may be configured for the minute column which means you may only have at most two reports for each hour period.",
          "type": "string"
        },
        "suspend": {
          "description": "This flag tells the controller to suspend subsequent jobs for generating reports, it does not apply to already started jobs. If jobs are resumed then the controller will start creating jobs for any reports that were missed while the job was suspended.",
          "type": "boolean"
        }
      },
      "required": [
        "reportType"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.ReportStatus": {
      "description": "ReportStatus contains the status of the automated report generation.",
      "properties": {
        "activeReportJobs": {
          "description": "The set of active report jobs.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ReportJob"
          },
          "type": "array"
        },
        "lastFailedReportJobs": {
          "description": "The configured report jobs that have failed.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.CompletedReportJob"
          },
          "type": "array"
        },
        "lastScheduledReportJob": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ReportJob",
          "description": "The last scheduled report job."
        },
        "lastSuccessfulReportJobs": {
          "description": "The configured report jobs that have completed successfully.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.CompletedReportJob"
          },
          "type": "array"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.ReportTemplate": {
      "description": "ReportTemplate defines a template used to render a report into downloadable or UI compatible format.",
      "properties": {
        "description": {
          "description": "A user-facing description of the template.",
          "type": "string"
        },
        "name": {
          "description": "The name of this template. This should be unique across all template names within a ReportType. This will be used by the UI as the suffix of the downloadable file name.",
          "type": "string"
        },
        "template": {
          "description": "The base-64 encoded go template used to render the report data.",
          "type": "string"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.ReportTypeSpec": {
      "description": "ReportTypeSpec contains the various templates, and configuration used to render a specific type of report.",
      "properties": {
        "auditEventsSelection": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.AuditEventsSelection",
          "description": "What audit log data should be included in the report. If not specified, the report will contain no audit log data. The selection may be further filtered by the Report."
        },
        "downloadTemplates": {
          "description": "The set of templates used to render the report for downloads.",
          "items": {
            "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ReportTemplate"
          },
          "type": "array"
        },
        "includeEndpointData": {
          "description": "Whether to include endpoint data in the report. The actual endpoints included may be filtered by the Report, but will otherwise contain the full set of endpoints.",
          "type": "boolean"
        },
        "includeEndpointFlowLogData": {
          "description": "Whether to include endpoint-to-endpoint flow log data in the report.",
          "type": "boolean"
        },
        "uiSummaryTemplate": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ReportTemplate",
          "description": "The summary template, explicitly used by the UI to render a summary version of the report. This should render to json containing a sets of widgets that the UI can use to render the summary. The rendered data is returned on the list query of the reports."
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.Rule": {
      "description": "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching.\n\nEach positive match criteria has a negated version, prefixed with ”Not”. All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.",
      "properties": {
        "action": {
          "type": "string"
        },
        "destination": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.EntityRule",
          "description": "Destination contains the match criteria that apply to destination entity."
        },
        "http": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.HTTPMatch",
          "description": "HTTP contains match criteria that apply to HTTP requests."
        },
        "icmp": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ICMPFields",
          "description": "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\"."
        },
        "ipVersion": {
          "description": "IPVersion is an optional field that restricts the rule to only match a specific IP version.",
          "format": "int32",
          "type": "integer"
        },
        "notICMP": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ICMPFields",
          "description": "NotICMP is the negated version of the ICMP field."
        },
        "notProtocol": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.numorstring.Protocol",
          "description": "NotProtocol is the negated version of the Protocol field."
        },
        "protocol": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.numorstring.Protocol",
          "description": "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols).\n\nMust be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255."
        },
        "source": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.EntityRule",
          "description": "Source contains the match criteria that apply to source entity."
        }
      },
      "required": [
        "action"
      ]
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.ServiceAccountMatch": {
      "properties": {
        "names": {
          "description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "selector": {
          "description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.",
          "type": "string"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.apis.v3.TierSpec": {
      "description": "TierSpec contains the specification for a security policy tier resource.",
      "properties": {
        "order": {
          "description": "Order is an optional field that specifies the order in which the tier is applied. Tiers with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the tier will be applied last.  Tiers with identical order will be applied in alphanumerical order based on the Tier \"Name\".",
          "format": "double",
          "type": "number"
        }
      }
    },
    "com.github.projectcalico.libcalico-go.lib.numorstring.Port": {
      "format": "int-or-string",
      "type": "string"
    },
    "com.github.projectcalico.libcalico-go.lib.numorstring.Protocol": {
      "format": "int-or-string",
      "type": "string"
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalNetworkPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicyList": {
      "description": "GlobalNetworkPolicyList is a list of Policy objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkPolicy"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkPolicyList",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalNetworkSetSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSet",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSetList": {
      "description": "GlobalNetworkSetList is a list of NetworkSet objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalNetworkSet"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalNetworkSetList",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ReportSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ReportStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalReport",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportList": {
      "description": "GlobalReportList is a list of GlobalReport objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReport"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalReportList",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.ReportTypeSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalReportType",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportTypeList": {
      "description": "GlobalReportTypeList is a list of GlobalReportType objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalReportType"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalReportTypeList",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalThreatFeedSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.GlobalThreatFeedStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeed",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeedList": {
      "description": "GlobalThreatFeedList is a list of GlobalThreatFeed objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.GlobalThreatFeed"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "GlobalThreatFeedList",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.HostEndpointSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "HostEndpoint",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpointList": {
      "description": "HostEndpointList is a list of HostEndpoint objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.HostEndpoint"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "HostEndpointList",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.LicenseKeySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "LicenseKey",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKeyList": {
      "description": "LicenseKeyList  is a list of license objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.LicenseKey"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "LicenseKeyList",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.NetworkPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "NetworkPolicy",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicyList": {
      "description": "NetworkPolicyList is a list of Policy objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.NetworkPolicy"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "NetworkPolicyList",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.projectcalico.libcalico-go.lib.apis.v3.TierSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "Tier",
          "version": "v3"
        }
      ]
    },
    "com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.TierList": {
      "description": "TierList is a list of Tier objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.tigera.calico-k8sapiserver.pkg.apis.projectcalico.v3.Tier"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "x-kubernetes-group-version-kind": [
        {
          "group": "projectcalico.org",
          "kind": "TierList",
          "version": "v3"
        }
      ]
    }
  }
}