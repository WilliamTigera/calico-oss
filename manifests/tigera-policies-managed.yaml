# Tier containing policies to allow access to Calico Enterprise.
apiVersion: projectcalico.org/v3
kind: Tier
metadata:
  name: allow-tigera
spec:
  order: 100

---

# Allow the Kubernetes API Server access to Calico Enterprise API Server.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.cnx-apiserver-access
  namespace: tigera-system
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-apiserver'
  types:
  - Ingress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      # This policy allows Calico Enterprise API Server access from anywhere: replace it with
      # the addresses of your Kubernetes API Servers if those are static.
      nets: ["0.0.0.0/0"]
    destination:
      # The ports Calico Enterprise API Server and Calico Enterprise Query Server are configured to listen on.
      ports: [443, 5443, 8080, 10443]

---

# This manifest creates a network policy to allow traffic to Alertmanager
# (TCP port 9093).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.calico-node-alertmanager
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: app == 'alertmanager' && alertmanager == 'calico-node-alertmanager'
  types:
    - Ingress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports: [9093]
---

# This manifest creates a network policy to allow traffic between
# Alertmanagers for HA configuration (TCP port 6783).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.calico-node-alertmanager-mesh
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: app == 'alertmanager' && alertmanager == 'calico-node-alertmanager'
  types:
    - Ingress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      selector: app == "alertmanager" && alertmanager == "calico-node-alertmanager"
      ports: [9094]
  - action: Allow
    protocol: UDP
    destination:
      selector: app == "alertmanager" && alertmanager == "calico-node-alertmanager"
---

# This manifest creates a network policy to allow traffic to access the
# Prometheus (TCP port 9090).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.prometheus
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: app == 'prometheus' && prometheus == 'calico-node-prometheus'
  types:
    - Ingress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports: [9090]
---

# This policy ensures Fluentd POD is marked as protected by compliance 
# (network access report).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.allow-fluentd-node
  namespace: tigera-fluentd
spec:
  tier: allow-tigera
  egress:
  - action: Deny
    destination:
      selector: k8s-app == "tigera-guardian"
      namespaceSelector: projectcalico.org/name == "tigera-guardian"
      notPorts:
      - 8080
    protocol: TCP
    source: {}
  - action: Allow
  order: 1
  selector: k8s-app == "fluentd-node"
  types:
  - Ingress
  - Egress

---

# Creates a network policy to allow traffic through Guardian (TCP port 8080) to the management plane.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.guardian-access
  namespace: tigera-guardian
spec:
  selector: k8s-app == 'tigera-guardian'
  tier: allow-tigera
  types:
    - Ingress
  ingress:
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-fluentd'
        selector: k8s-app == 'fluentd-node'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-compliance'
        selector: k8s-app == 'compliance-benchmarker'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-compliance'
        selector: k8s-app == 'compliance-reporter'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-compliance'
        selector: k8s-app == 'compliance-snapshotter'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-compliance'
        selector: k8s-app == 'compliance-controller'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-intrusion-detection'
        selector: k8s-app == 'intrusion-detection-controller'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-intrusion-detection'
        selector: job-name == 'intrusion-detection-es-job-installer'

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-compliance
spec:
  tier: allow-tigera
  selector: all()
  ingress:
  - action: Deny
  types:
  - Ingress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-prometheus
spec:
  tier: allow-tigera
  selector: all()
  ingress:
  - action: Deny
  types:
  - Ingress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-guardian
spec:
  tier: allow-tigera
  selector: all()
  ingress:
  - action: Deny
  types:
  - Ingress
