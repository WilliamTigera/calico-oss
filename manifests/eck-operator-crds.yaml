---
# Source: crds/operator.tigera.io_managementclusters_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: managementclusters.operator.tigera.io
  annotations:
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: ManagementCluster
    listKind: ManagementClusterList
    plural: managementclusters
    singular: managementcluster
  scope: Cluster
  versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: The presence of ManagementCluster in your cluster, will configure
            it to be the management plane to which managed clusters can connect. At
            most one instance of this resource is supported. It must be named "tigera-secure".
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ManagementClusterSpec defines the desired state of a ManagementCluster
              properties:
                address:
                  description: 'This field specifies the externally reachable address
                  to which your managed cluster will connect. When a managed cluster
                  is added, this field is used to populate an easy-to-apply manifest
                  that will connect both clusters. Valid examples are: "0.0.0.0:31000",
                  "example.com:32000", "[::1]:32500"'
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
# Source: crds/operator.tigera.io_logcollectors_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: logcollectors.operator.tigera.io
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: LogCollector
    listKind: LogCollectorList
    plural: logcollectors
    singular: logcollector
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: LogCollector installs the components required for Tigera flow
          and DNS log collection. At most one instance of this resource is supported.
          It must be named "tigera-secure". When created, this installs fluentd on
          all nodes configured to collect Tigera log data and export it to Tigera's
          Elasticsearch cluster as well as any additionally configured destinations.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the desired state for Tigera log collection.
            properties:
              additionalSources:
                description: Configuration for importing audit logs from managed kubernetes
                  cluster log sources.
                properties:
                  eksCloudwatchLog:
                    description: If specified with EKS Provider in Installation, enables
                      fetching EKS audit logs.
                    properties:
                      fetchInterval:
                        description: 'Cloudwatch audit logs fetching interval in seconds.
                          Default: 60'
                        format: int32
                        type: integer
                      groupName:
                        description: Cloudwatch log-group name containing EKS audit
                          logs.
                        type: string
                      region:
                        description: AWS Region EKS cluster is hosted in.
                        type: string
                      streamPrefix:
                        description: 'Prefix of Cloudwatch log stream containing EKS
                          audit logs in the log-group. Default: kube-apiserver-audit-'
                        type: string
                    required:
                    - groupName
                    - region
                    type: object
                type: object
              additionalStores:
                description: Configuration for exporting flow, audit, and DNS logs
                  to external storage.
                properties:
                  s3:
                    description: If specified, enables exporting of flow, audit, and
                      DNS logs to Amazon S3 storage.
                    properties:
                      bucketName:
                        description: Name of the S3 bucket to send logs
                        type: string
                      bucketPath:
                        description: Path in the S3 bucket where to send logs
                        type: string
                      region:
                        description: AWS Region of the S3 bucket
                        type: string
                    required:
                    - bucketName
                    - bucketPath
                    - region
                    type: object
                  splunk:
                    description: If specified, enables exporting of flow, audit, and
                      DNS logs to splunk.
                    properties:
                      endpoint:
                        description: Location for splunk's http event collector end
                          point. example `https://1.2.3.4:8088`
                        type: string
                    required:
                    - endpoint
                    type: object
                  syslog:
                    description: If specified, enables exporting of flow, audit, and
                      DNS logs to syslog.
                    properties:
                      endpoint:
                        description: 'Location of the syslog server. example: tcp://1.2.3.4:601'
                        type: string
                      logTypes:
                        description: LogTypes contains a list of types of logs to
                          export to syslog. By default, if this field is omitted,
                          it will be set to include all possible values.
                        items:
                          description: SyslogLogType represents the allowable log
                            types for syslog. Allowable values are Audit, DNS, Flows
                            and IDSEvents. * Audit corresponds to audit logs for both
                            Kubernetes resources and Enterprise custom resources.
                            * DNS corresponds to DNS logs generated by Calico node.
                            * Flows corresponds to flow logs generated by Calico node.
                            * IDSEvents corresponds to event logs for the intrusion
                            detection system (anomaly detection, suspicious IPs, suspicious
                            domains and global alerts).
                          enum:
                          - Audit
                          - DNS
                          - Flows
                          - IDSEvents
                          type: string
                        type: array
                      packetSize:
                        description: 'PacketSize defines the maximum size of packets
                          to send to syslog. In general this is only needed if you
                          notice long logs being truncated. Default: 1024'
                        format: int32
                        type: integer
                    required:
                    - endpoint
                    - logTypes
                    type: object
                type: object
              collectProcessPath:
                description: 'Configuration for enabling/disabling process path collection
                  in flowlogs. If Enabled, this feature sets hostPID to true in order
                  to read process cmdline. Default: Enabled'
                enum:
                - Enabled
                - Disabled
                type: string
            type: object
          status:
            description: Most recently observed state for Tigera log collection.
            properties:
              state:
                description: State provides user-readable status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: crds/operator.tigera.io_managers_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: managers.operator.tigera.io
  annotations:
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: Manager
    listKind: ManagerList
    plural: managers
    singular: manager
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Manager installs the Calico Enterprise manager graphical user
          interface. At most one instance of this resource is supported. It must be
          named "tigera-secure".
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the desired state for the Calico Enterprise
              manager.
            properties:
              auth:
                description: Auth defines the authentication strategy for the Calico
                  Enterprise manager GUI.
                properties:
                  authority:
                    description: Authority configures the OAuth2/OIDC authority/issuer
                      when using OAuth2 or OIDC login.
                    type: string
                  clientID:
                    description: ClientId configures the OAuth2/OIDC client ID to
                      use for OAuth2 or OIDC login.
                    type: string
                  type:
                    description: 'Type configures the type of authentication used
                      by the manager. Default: Token'
                    enum:
                    - Token
                    - Basic
                    - OIDC
                    - OAuth
                    type: string
                type: object
            type: object
          status:
            description: Most recently observed state for the Calico Enterprise manager.
            properties:
              auth:
                description: Deprecated. Please use the Authentication CR for configuring
                  authentication.
                properties:
                  authority:
                    description: Authority configures the OAuth2/OIDC authority/issuer
                      when using OAuth2 or OIDC login.
                    type: string
                  clientID:
                    description: ClientId configures the OAuth2/OIDC client ID to
                      use for OAuth2 or OIDC login.
                    type: string
                  type:
                    description: 'Type configures the type of authentication used
                      by the manager. Default: Token'
                    enum:
                    - Token
                    - Basic
                    - OIDC
                    - OAuth
                    type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: crds/operator.tigera.io_applicationlayers_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
    helm.sh/hook: crd-install
  name: applicationlayers.operator.tigera.io
spec:
  group: operator.tigera.io
  names:
    kind: ApplicationLayer
    listKind: ApplicationLayerList
    plural: applicationlayers
    singular: applicationlayer
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ApplicationLayer is the Schema for the applicationlayers API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ApplicationLayerSpec defines the desired state of ApplicationLayer
            properties:
              logCollection:
                description: Specification for application layer (L7) log collection.
                properties:
                  collectLogs:
                    description: This setting enables or disable log collection. Allowed
                      values are Enabled or Disabled.
                    type: string
                  logIntervalSeconds:
                    description: 'Interval in seconds for sending L7 log information
                      for processing. Default: 5 sec'
                    format: int64
                    type: integer
                  logRequestsPerInterval:
                    description: 'Maximum number of unique L7 logs that are sent LogIntervalSeconds.
                      Adjust this to limit the number of L7 logs sent per LogIntervalSeconds
                      to felix for further processing, use negative number to ignore
                      limits. Default: -1'
                    format: int64
                    type: integer
                type: object
              webApplicationFirewall:
                description: WebApplicationFirewall controls whether or not ModSecurity
                  enforcement is enabled for the cluster. When enabled, Services may
                  opt-in to having ingress traffic examed by ModSecurity.
                type: string
            type: object
          status:
            description: ApplicationLayerStatus defines the observed state of ApplicationLayer
            properties:
              state:
                description: State provides user-readable status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/operator.tigera.io_tigerastatuses_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
    helm.sh/hook: crd-install
  name: tigerastatuses.operator.tigera.io
  annotations:
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: TigeraStatus
    listKind: TigeraStatusList
    plural: tigerastatuses
    singular: tigerastatus
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: Whether the component running and stable.
      jsonPath: .status.conditions[?(@.type=='Available')].status
      name: Available
      type: string
    - description: Whether the component is processing changes.
      jsonPath: .status.conditions[?(@.type=='Progressing')].status
      name: Progressing
      type: string
    - description: Whether the component is degraded.
      jsonPath: .status.conditions[?(@.type=='Degraded')].status
      name: Degraded
      type: string
    - description: The time the component's Available status last changed.
      jsonPath: .status.conditions[?(@.type=='Available')].lastTransitionTime
      name: Since
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: TigeraStatus represents the most recently observed status for
          Calico or a Calico Enterprise functional area.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TigeraStatusSpec defines the desired state of TigeraStatus
            type: object
          status:
            description: TigeraStatusStatus defines the observed state of TigeraStatus
            properties:
              conditions:
                description: Conditions represents the latest observed set of conditions
                  for this component. A component may be one or more of Available,
                  Progressing, or Degraded.
                items:
                  description: TigeraStatusCondition represents a condition attached
                    to a particular component.
                  properties:
                    lastTransitionTime:
                      description: The timestamp representing the start time for the
                        current status.
                      format: date-time
                      type: string
                    message:
                      description: Optionally, a detailed message providing additional
                        context.
                      type: string
                    reason:
                      description: A brief reason explaining the condition.
                      type: string
                    status:
                      description: The status of the condition. May be True, False,
                        or Unknown.
                      type: string
                    type:
                      description: The type of condition. May be Available, Progressing,
                        or Degraded.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
            required:
            - conditions
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/operator.tigera.io_logstorages_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
    controller-gen.kubebuilder.io/version: v0.3.0
  name: logstorages.operator.tigera.io
spec:
  group: operator.tigera.io
  names:
    kind: LogStorage
    listKind: LogStorageList
    plural: logstorages
    singular: logstorage
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: LogStorage installs the components required for Tigera flow and
          DNS log storage. At most one instance of this resource is supported. It
          must be named "tigera-secure". When created, this installs an Elasticsearch
          cluster for use by Calico Enterprise.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the desired state for Tigera log storage.
            properties:
              componentResources:
                description: ComponentResources can be used to customize the resource
                  requirements for each component. Only ECKOperator is supported for
                  this spec.
                items:
                  description: The ComponentResource struct associates a ResourceRequirements
                    with a component by name
                  properties:
                    componentName:
                      description: ComponentName is an enum which identifies the component
                      enum:
                      - ECKOperator
                      type: string
                    resourceRequirements:
                      description: ResourceRequirements allows customization of limits
                        and requests for compute resources such as cpu and memory.
                      properties:
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Limits describes the maximum amount of compute
                            resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Requests describes the minimum amount of compute
                            resources required. If Requests is omitted for a container,
                            it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. More info:
                            https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                          type: object
                      type: object
                  required:
                  - componentName
                  - resourceRequirements
                  type: object
                type: array
              dataNodeSelector:
                additionalProperties:
                  type: string
                description: DataNodeSelector gives you more control over the node
                  that Elasticsearch will run on. The contents of DataNodeSelector
                  will be added to the PodSpec of the Elasticsearch nodes. For the
                  pod to be eligible to run on a node, the node must have each of
                  the indicated key-value pairs as labels as well as access to the
                  specified StorageClassName.
                type: object
              indices:
                description: Index defines the configuration for the indices in the
                  Elasticsearch cluster.
                properties:
                  replicas:
                    description: Replicas defines how many replicas each index will
                      have. See https://www.elastic.co/guide/en/elasticsearch/reference/current/scalability.html
                    format: int32
                    type: integer
                type: object
              nodes:
                description: Nodes defines the configuration for a set of identical
                  Elasticsearch cluster nodes, each of type master, data, and ingest.
                properties:
                  count:
                    description: Count defines the number of nodes in the Elasticsearch
                      cluster.
                    format: int64
                    type: integer
                  nodeSets:
                    description: NodeSets defines configuration specific to each Elasticsearch
                      Node Set
                    items:
                      description: NodeSets defines configuration specific to each
                        Elasticsearch Node Set
                      properties:
                        selectionAttributes:
                          description: SelectionAttributes defines K8s node attributes
                            a NodeSet should use when setting the Node Affinity selectors
                            and Elasticsearch cluster awareness attributes for the
                            Elasticsearch nodes. The list of SelectionAttributes are
                            used to define Node Affinities and set the node awareness
                            configuration in the running Elasticsearch instance.
                          items:
                            description: NodeSetSelectionAttribute defines a K8s node
                              "attribute" the Elasticsearch nodes should be aware
                              of. The "Name" and "Value" are used together to set
                              the "awareness" attributes in Elasticsearch, while the
                              "NodeLabel" and "Value" are used together to define
                              Node Affinity for the Pods created for the Elasticsearch
                              nodes.
                            properties:
                              name:
                                type: string
                              nodeLabel:
                                type: string
                              value:
                                type: string
                            required:
                            - name
                            - nodeLabel
                            - value
                            type: object
                          type: array
                      type: object
                    type: array
                  resourceRequirements:
                    description: ResourceRequirements defines the resource limits
                      and requirements for the Elasticsearch cluster.
                    properties:
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                        type: object
                    type: object
                type: object
              retention:
                description: Retention defines how long data is retained in the Elasticsearch
                  cluster before it is cleared.
                properties:
                  auditReports:
                    description: 'AuditReports configures the retention period for
                      audit logs, in days.  Logs written on a day that started at
                      least this long ago are removed.  To keep logs for at least
                      x days, use a retention period of x+1. Default: 91'
                    format: int32
                    type: integer
                  complianceReports:
                    description: 'ComplianceReports configures the retention period
                      for compliance reports, in days. Reports are output from the
                      analysis of the system state and audit events for compliance
                      reporting. Consult the Compliance Reporting documentation for
                      more details on reports. Logs written on a day that started
                      at least this long ago are removed.  To keep logs for at least
                      x days, use a retention period of x+1. Default: 91'
                    format: int32
                    type: integer
                  flows:
                    description: 'Flows configures the retention period for flow logs,
                      in days.  Logs written on a day that started at least this long
                      ago are removed.  To keep logs for at least x days, use a retention
                      period of x+1. Default: 8'
                    format: int32
                    type: integer
                  snapshots:
                    description: 'Snapshots configures the retention period for snapshots,
                      in days. Snapshots are periodic captures of resources which
                      along with audit events are used to generate reports. Consult
                      the Compliance Reporting documentation for more details on snapshots.
                      Logs written on a day that started at least this long ago are
                      removed.  To keep logs for at least x days, use a retention
                      period of x+1. Default: 91'
                    format: int32
                    type: integer
                type: object
              storageClassName:
                description: 'StorageClassName will populate the PersistentVolumeClaim.StorageClassName
                  that is used to provision disks to the Tigera Elasticsearch cluster.
                  The StorageClassName should only be modified when no LogStorage
                  is currently active. We recommend choosing a storage class dedicated
                  to Tigera LogStorage only. Otherwise, data retention cannot be guaranteed
                  during upgrades. See https://docs.tigera.io/maintenance/upgrading
                  for up-to-date instructions. Default: tigera-elasticsearch'
                type: string
            type: object
          status:
            description: Most recently observed state for Tigera log storage.
            properties:
              elasticsearchHash:
                description: ElasticsearchHash represents the current revision and
                  configuration of the installed Elasticsearch cluster. This is an
                  opaque string which can be monitored for changes to perform actions
                  when Elasticsearch is modified.
                type: string
              kibanaHash:
                description: KibanaHash represents the current revision and configuration
                  of the installed Kibana dashboard. This is an opaque string which
                  can be monitored for changes to perform actions when Kibana is modified.
                type: string
              state:
                description: State provides user-readable status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/operator.tigera.io_imagesets_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
    helm.sh/hook: crd-install
  name: imagesets.operator.tigera.io
spec:
  group: operator.tigera.io
  names:
    kind: ImageSet
    listKind: ImageSetList
    plural: imagesets
    singular: imageset
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ImageSet is used to specify image digests for the images that
          the operator deploys. The name of the ImageSet is expected to be in the
          format `<variang>-<release>`. The `variant` used is `enterprise` if the
          InstallationSpec Variant is `TigeraSecureEnterprise` otherwise it is `calico`.
          The `release` must match the version of the variant that the operator is
          built to deploy, this version can be obtained by passing the `--version`
          flag to the operator binary.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ImageSetSpec defines the desired state of ImageSet.
            properties:
              images:
                description: Images is the list of images to use digests. All images
                  that the operator will deploy must be specified.
                items:
                  properties:
                    digest:
                      description: Digest is the image identifier that will be used
                        for the Image. The field should not include a leading `@`
                        and must be prefixed with `sha256:`.
                      type: string
                    image:
                      description: Image is an image that the operator deploys and
                        instead of using the built in tag the operator will use the
                        Digest for the image identifier. The value should be the image
                        name without registry or tag or digest. For the image `docker.io/calico/node:v3.17.1`
                        it should be represented as `calico/node`
                      type: string
                  required:
                  - digest
                  - image
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/operator.tigera.io_authentications_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
    helm.sh/hook: crd-install
  creationTimestamp: null
  name: authentications.operator.tigera.io
spec:
  group: operator.tigera.io
  names:
    kind: Authentication
    listKind: AuthenticationList
    plural: authentications
    singular: authentication
  scope: Cluster
  versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: Authentication is the Schema for the authentications API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: AuthenticationSpec defines the desired state of Authentication
              properties:
                groupsPrefix:
                  description: If specified, GroupsPrefix is prepended to each group
                    obtained from the identity provider. Note that Kibana does not support
                    a groups prefix, so this prefix is removed from Kubernetes Groups
                    when translating log access ClusterRoleBindings into Elastic.
                  type: string
                ldap:
                  description: LDAP contains the configuration needed to setup LDAP
                    authentication.
                  properties:
                    groupSearch:
                      description: Group search configuration to find the groups that
                        a user is in.
                      properties:
                        baseDN:
                          description: BaseDN to start the search from. For example
                            "cn=groups,dc=example,dc=com"
                          type: string
                        filter:
                          description: Optional filter to apply when searching the directory.
                            For example "(objectClass=posixGroup)"
                          type: string
                        nameAttribute:
                          description: The attribute of the group that represents its
                            name. This attribute can be used to apply RBAC to a user
                            group.
                          type: string
                        userMatchers:
                          description: Following list contains field pairs that are
                            used to match a user to a group. It adds an additional requirement
                            to the filter that an attribute in the group must match
                            the user's attribute value.
                          items:
                            description: UserMatch when the value of a UserAttribute
                              and a GroupAttribute match, a user belongs to the group.
                            properties:
                              groupAttribute:
                                description: The attribute of a group that links it
                                  to a user.
                                type: string
                              userAttribute:
                                description: The attribute of a user that links it to
                                  a group.
                                type: string
                            required:
                              - groupAttribute
                              - userAttribute
                            type: object
                          type: array
                      required:
                        - baseDN
                        - nameAttribute
                        - userMatchers
                      type: object
                    host:
                      description: 'The host and port of the LDAP server. Example: ad.example.com:636'
                      type: string
                    startTLS:
                      description: StartTLS whether to enable the startTLS feature for
                        establishing TLS on an existing LDAP session. If true, the ldap://
                        protocol is used and then issues a StartTLS command, otherwise,
                        connections will use the ldaps:// protocol.
                      type: boolean
                    userSearch:
                      description: User entry search configuration to match the credentials
                        with a user.
                      properties:
                        baseDN:
                          description: BaseDN to start the search from. For example
                            "cn=users,dc=example,dc=com"
                          type: string
                        filter:
                          description: Optional filter to apply when searching the directory.
                            For example "(objectClass=person)"
                          type: string
                        nameAttribute:
                          description: 'A mapping of the attribute that is used as the
                          username. This attribute can be used to apply RBAC to a
                          user. Default: uid'
                          type: string
                      required:
                        - baseDN
                      type: object
                  required:
                    - host
                    - userSearch
                  type: object
                managerDomain:
                  description: ManagerDomain is the domain name of the Manager
                  type: string
                oidc:
                  description: OIDC contains the configuration needed to setup OIDC
                    authentication.
                  properties:
                    emailVerification:
                      description: 'Some providers do not include the claim "email_verified"
                      when there is no verification in the user enrollment process
                      or if they are acting as a proxy for another identity provider.
                      By default those tokens are deemed invalid. To skip this check,
                      set the value to "InsecureSkip". Default: Verify'
                      enum:
                        - Verify
                        - InsecureSkip
                      type: string
                    groupsClaim:
                      description: GroupsClaim specifies which claim to use from the
                        OIDC provider as the group.
                      type: string
                    groupsPrefix:
                      description: Deprecated. Please use Authentication.Spec.GroupsPrefix
                        instead.
                      type: string
                    issuerURL:
                      description: IssuerURL is the URL to the OIDC provider.
                      type: string
                    promptTypes:
                      description: 'PromptTypes is an optional list of string values
                      that specifies whether the identity provider prompts the end
                      user for re-authentication and consent. See the RFC for more
                      information on prompt types: https://openid.net/specs/openid-connect-core-1_0.html.
                      Default: "Consent"'
                      items:
                        description: 'PromptType is a value that specifies whether the
                        identity provider prompts the end user for re-authentication
                        and consent. One of: None, Login, Consent, SelectAccount.'
                        enum:
                          - None
                          - Login
                          - Consent
                          - SelectAccount
                        type: string
                      type: array
                    requestedScopes:
                      description: 'RequestedScopes is a list of scopes to request from
                      the OIDC provider. If not provided, the following scopes are
                      requested: ["openid", "email", "profile", "groups", "offline_access"].'
                      items:
                        type: string
                      type: array
                    type:
                      description: 'Default: "Dex"'
                      enum:
                        - Dex
                        - Tigera
                      type: string
                    usernameClaim:
                      description: UsernameClaim specifies which claim to use from the
                        OIDC provider as the username.
                      type: string
                    usernamePrefix:
                      description: Deprecated. Please use Authentication.Spec.UsernamePrefix
                        instead.
                      type: string
                  required:
                    - issuerURL
                    - usernameClaim
                  type: object
                openshift:
                  description: Openshift contains the configuration needed to setup
                    Openshift OAuth authentication.
                  properties:
                    issuerURL:
                      description: 'IssuerURL is the URL to the Openshift OAuth provider.
                      Ex.: https://api.my-ocp-domain.com:6443'
                      type: string
                  required:
                    - issuerURL
                  type: object
                usernamePrefix:
                  description: If specified, UsernamePrefix is prepended to each user
                    obtained from the identity provider. Note that Kibana does not support
                    a user prefix, so this prefix is removed from Kubernetes User when
                    translating log access ClusterRoleBindings into Elastic.
                  type: string
              type: object
            status:
              description: AuthenticationStatus defines the observed state of Authentication
              properties:
                state:
                  description: State provides user-readable status.
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/operator.tigera.io_managementclusterconnections_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: managementclusterconnections.operator.tigera.io
  annotations:
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: ManagementClusterConnection
    listKind: ManagementClusterConnectionList
    plural: managementclusterconnections
    singular: managementclusterconnection
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ManagementClusterConnection represents a link between a managed
          cluster and a management cluster. At most one instance of this resource
          is supported. It must be named "tigera-secure".
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ManagementClusterConnectionSpec defines the desired state
              of ManagementClusterConnection
            properties:
              managementClusterAddr:
                description: 'Specify where the managed cluster can reach the management
                  cluster. Ex.: "10.128.0.10:30449". A managed cluster should be able
                  to access this address. This field is used by managed clusters only.'
                type: string
            type: object
        type: object
    served: true
    storage: true
---
# Source: crds/operator.tigera.io_compliances_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: compliances.operator.tigera.io
  annotations:
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: Compliance
    listKind: ComplianceList
    plural: compliances
    singular: compliance
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Compliance installs the components required for Tigera compliance
          reporting. At most one instance of this resource is supported. It must be
          named "tigera-secure".
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the desired state for Tigera compliance
              reporting.
            type: object
          status:
            description: Most recently observed state for Tigera compliance reporting.
            properties:
              state:
                description: State provides user-readable status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: crds/operator.tigera.io_monitors_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: monitors.operator.tigera.io
  annotations:
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: Monitor
    listKind: MonitorList
    plural: monitors
    singular: monitor
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Monitor is the Schema for the monitor API. At most one instance
          of this resource is supported. It must be named "tigera-secure".
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MonitorSpec defines the desired state of Tigera monitor.
            type: object
          status:
            description: MonitorStatus defines the observed state of Tigera monitor.
            properties:
              state:
                description: State provides user-readable status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: crds/operator.tigera.io_installations_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
    helm.sh/hook: crd-install
  name: installations.operator.tigera.io
spec:
  group: operator.tigera.io
  names:
    kind: Installation
    listKind: InstallationList
    plural: installations
    singular: installation
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Installation configures an installation of Calico or Calico Enterprise.
          At most one instance of this resource is supported. It must be named "default".
          The Installation API installs core networking and network policy components,
          and provides general install-time configuration.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the desired state for the Calico or Calico
              Enterprise installation.
            properties:
              calicoNetwork:
                description: CalicoNetwork specifies networking configuration options
                  for Calico.
                properties:
                  bgp:
                    description: BGP configures whether or not to enable Calico's
                      BGP capabilities.
                    enum:
                    - Enabled
                    - Disabled
                    type: string
                  containerIPForwarding:
                    description: 'ContainerIPForwarding configures whether ip forwarding
                      will be enabled for containers in the CNI configuration. Default:
                      Disabled'
                    enum:
                    - Enabled
                    - Disabled
                    type: string
                  hostPorts:
                    description: 'HostPorts configures whether or not Calico will
                      support Kubernetes HostPorts. Valid only when using the Calico
                      CNI plugin. Default: Enabled'
                    enum:
                    - Enabled
                    - Disabled
                    type: string
                  ipPools:
                    description: IPPools contains a list of IP pools to create if
                      none exist. At most one IP pool of each address family may be
                      specified. If omitted, a single pool will be configured if needed.
                    items:
                      properties:
                        blockSize:
                          description: 'BlockSize specifies the CIDR prefex length
                            to use when allocating per-node IP blocks from the main
                            IP pool CIDR. Default: 26 (IPv4), 122 (IPv6)'
                          format: int32
                          type: integer
                        cidr:
                          description: CIDR contains the address range for the IP
                            Pool in classless inter-domain routing format.
                          type: string
                        encapsulation:
                          description: 'Encapsulation specifies the encapsulation
                            type that will be used with the IP Pool. Default: IPIP'
                          enum:
                          - IPIPCrossSubnet
                          - IPIP
                          - VXLAN
                          - VXLANCrossSubnet
                          - None
                          type: string
                        natOutgoing:
                          description: 'NATOutgoing specifies if NAT will be enabled
                            or disabled for outgoing traffic. Default: Enabled'
                          enum:
                          - Enabled
                          - Disabled
                          type: string
                        nodeSelector:
                          description: 'NodeSelector specifies the node selector that
                            will be set for the IP Pool. Default: ''all()'''
                          type: string
                      required:
                      - cidr
                      type: object
                    type: array
                  linuxDataplane:
                    description: 'LinuxDataplane is used to select the dataplane used
                      for Linux nodes. In particular, it causes the operator to add
                      required mounts and environment variables for the particular
                      dataplane. If not specified, iptables mode is used. Default:
                      Iptables'
                    enum:
                    - Iptables
                    - BPF
                    - VPP
                    type: string
                  mtu:
                    description: MTU specifies the maximum transmission unit to use
                      on the pod network. If not specified, Calico will perform MTU
                      auto-detection based on the cluster network.
                    format: int32
                    type: integer
                  multiInterfaceMode:
                    description: 'MultiInterfaceMode configures what will configure
                      multiple interface per pod. Only valid for Calico Enterprise
                      installations using the Calico CNI plugin. Default: None'
                    enum:
                    - None
                    - Multus
                    type: string
                  nodeAddressAutodetectionV4:
                    description: NodeAddressAutodetectionV4 specifies an approach
                      to automatically detect node IPv4 addresses. If not specified,
                      will use default auto-detection settings to acquire an IPv4
                      address for each node.
                    properties:
                      canReach:
                        description: CanReach enables IP auto-detection based on which
                          source address on the node is used to reach the specified
                          IP or domain.
                        type: string
                      cidrs:
                        description: CIDRS enables IP auto-detection based on which
                          addresses on the nodes are within one of the provided CIDRs.
                        items:
                          type: string
                        type: array
                      firstFound:
                        description: FirstFound uses default interface matching parameters
                          to select an interface, performing best-effort filtering
                          based on well-known interface names.
                        type: boolean
                      interface:
                        description: Interface enables IP auto-detection based on
                          interfaces that match the given regex.
                        type: string
                      kubernetes:
                        description: Kubernetes configures Calico to detect node addresses
                          based on the Kubernetes API.
                        enum:
                        - NodeInternalIP
                        type: string
                      skipInterface:
                        description: SkipInterface enables IP auto-detection based
                          on interfaces that do not match the given regex.
                        type: string
                    type: object
                  nodeAddressAutodetectionV6:
                    description: NodeAddressAutodetectionV6 specifies an approach
                      to automatically detect node IPv6 addresses. If not specified,
                      IPv6 addresses will not be auto-detected.
                    properties:
                      canReach:
                        description: CanReach enables IP auto-detection based on which
                          source address on the node is used to reach the specified
                          IP or domain.
                        type: string
                      cidrs:
                        description: CIDRS enables IP auto-detection based on which
                          addresses on the nodes are within one of the provided CIDRs.
                        items:
                          type: string
                        type: array
                      firstFound:
                        description: FirstFound uses default interface matching parameters
                          to select an interface, performing best-effort filtering
                          based on well-known interface names.
                        type: boolean
                      interface:
                        description: Interface enables IP auto-detection based on
                          interfaces that match the given regex.
                        type: string
                      kubernetes:
                        description: Kubernetes configures Calico to detect node addresses
                          based on the Kubernetes API.
                        enum:
                        - NodeInternalIP
                        type: string
                      skipInterface:
                        description: SkipInterface enables IP auto-detection based
                          on interfaces that do not match the given regex.
                        type: string
                    type: object
                type: object
              certificateManagement:
                description: CertificateManagement configures pods to submit a CertificateSigningRequest
                  to the certificates.k8s.io/v1beta1 API in order to obtain TLS certificates.
                  This feature requires that you bring your own CSR signing and approval
                  process, otherwise pods will be stuck during initialization.
                properties:
                  caCert:
                    description: Certificate of the authority that signs the CertificateSigningRequests
                      in PEM format.
                    format: byte
                    type: string
                  keyAlgorithm:
                    description: 'Specify the algorithm used by pods to generate a
                      key pair that is associated with the X.509 certificate request.
                      Default: RSAWithSize2048'
                    enum:
                    - ""
                    - RSAWithSize2048
                    - RSAWithSize4096
                    - RSAWithSize8192
                    - ECDSAWithCurve256
                    - ECDSAWithCurve384
                    - ECDSAWithCurve521
                    type: string
                  signatureAlgorithm:
                    description: 'Specify the algorithm used for the signature of
                      the X.509 certificate request. Default: SHA256WithRSA'
                    enum:
                    - ""
                    - SHA256WithRSA
                    - SHA384WithRSA
                    - SHA512WithRSA
                    - ECDSAWithSHA256
                    - ECDSAWithSHA384
                    - ECDSAWithSHA512
                    type: string
                  signerName:
                    description: 'When a CSR is issued to the certificates.k8s.io
                      API, the signerName is added to the request in order to accommodate
                      for clusters with multiple signers. Must be formatted as: `<my-domain>/<my-signername>`.'
                    type: string
                required:
                - caCert
                - signerName
                type: object
              cni:
                description: CNI specifies the CNI that will be used by this installation.
                properties:
                  ipam:
                    description: IPAM specifies the pod IP address management that
                      will be used in the Calico or Calico Enterprise installation.
                    properties:
                      type:
                        description: "Specifies the IPAM plugin that will be used
                          in the Calico or Calico Enterprise installation. * For CNI
                          Plugin Calico, this field defaults to Calico. * For CNI
                          Plugin GKE, this field defaults to HostLocal. * For CNI
                          Plugin AzureVNET, this field defaults to AzureVNET. * For
                          CNI Plugin AmazonVPC, this field defaults to AmazonVPC.
                          \n The IPAM plugin is installed and configured only if the
                          CNI plugin is set to Calico, for all other values of the
                          CNI plugin the plugin binaries and CNI config is a dependency
                          that is expected to be installed separately. \n Default:
                          Calico"
                        enum:
                        - Calico
                        - HostLocal
                        - AmazonVPC
                        - AzureVNET
                        type: string
                    required:
                    - type
                    type: object
                  type:
                    description: "Specifies the CNI plugin that will be used in the
                      Calico or Calico Enterprise installation. * For KubernetesProvider
                      GKE, this field defaults to GKE. * For KubernetesProvider AKS,
                      this field defaults to AzureVNET. * For KubernetesProvider EKS,
                      this field defaults to AmazonVPC. * If aws-node daemonset exists
                      in kube-system when the Installation resource is created, this
                      field defaults to AmazonVPC. * For all other cases this field
                      defaults to Calico. \n For the value Calico, the CNI plugin
                      binaries and CNI config will be installed as part of deployment,
                      for all other values the CNI plugin binaries and CNI config
                      is a dependency that is expected to be installed separately.
                      \n Default: Calico"
                    enum:
                    - Calico
                    - GKE
                    - AmazonVPC
                    - AzureVNET
                    type: string
                required:
                - type
                type: object
              componentResources:
                description: ComponentResources can be used to customize the resource
                  requirements for each component. Node, Typha, and KubeControllers
                  are supported for installations.
                items:
                  description: The ComponentResource struct associates a ResourceRequirements
                    with a component by name
                  properties:
                    componentName:
                      description: ComponentName is an enum which identifies the component
                      enum:
                      - Node
                      - Typha
                      - KubeControllers
                      type: string
                    resourceRequirements:
                      description: ResourceRequirements allows customization of limits
                        and requests for compute resources such as cpu and memory.
                      properties:
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Limits describes the maximum amount of compute
                            resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Requests describes the minimum amount of compute
                            resources required. If Requests is omitted for a container,
                            it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. More info:
                            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                      type: object
                  required:
                  - componentName
                  - resourceRequirements
                  type: object
                type: array
              controlPlaneNodeSelector:
                additionalProperties:
                  type: string
                description: ControlPlaneNodeSelector is used to select control plane
                  nodes on which to run Calico components. This is globally applied
                  to all resources created by the operator excluding daemonsets.
                type: object
              controlPlaneReplicas:
                description: ControlPlaneReplicas defines how many replicas of the
                  control plane core components will be deployed. This field applies
                  to all control plane components that support High Availability.
                  Defaults to 2.
                format: int32
                type: integer
              controlPlaneTolerations:
                description: ControlPlaneTolerations specify tolerations which are
                  then globally applied to all resources created by the operator.
                items:
                  description: The pod this Toleration is attached to tolerates any
                    taint that matches the triple <key,value,effect> using the matching
                    operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty
                        means match all taint effects. When specified, allowed values
                        are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies
                        to. Empty means match all taint keys. If the key is empty,
                        operator must be Exists; this combination means to match all
                        values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the
                        value. Valid operators are Exists and Equal. Defaults to Equal.
                        Exists is equivalent to wildcard for value, so that a pod
                        can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time
                        the toleration (which must be of effect NoExecute, otherwise
                        this field is ignored) tolerates the taint. By default, it
                        is not set, which means tolerate the taint forever (do not
                        evict). Zero and negative values will be treated as 0 (evict
                        immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches
                        to. If the operator is Exists, the value should be empty,
                        otherwise just a regular string.
                      type: string
                  type: object
                type: array
              flexVolumePath:
                description: FlexVolumePath optionally specifies a custom path for
                  FlexVolume. If not specified, FlexVolume will be enabled by default.
                  If set to 'None', FlexVolume will be disabled. The default is based
                  on the kubernetesProvider.
                type: string
              imagePath:
                description: "ImagePath allows for the path part of an image to be
                  specified. If specified then the specified value will be used as
                  the image path for each image. If not specified or empty, the default
                  for each image will be used. A special case value, UseDefault, is
                  supported to explicitly specify the default image path will be used
                  for each image. \n Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                  \n This option allows configuring the `<imagePath>` portion of the
                  above format."
                type: string
              imagePrefix:
                description: "ImagePrefix allows for the prefix part of an image to
                  be specified. If specified then the given value will be used as
                  a prefix on each image. If not specified or empty, no prefix will
                  be used. A special case value, UseDefault, is supported to explicitly
                  specify the default image prefix will be used for each image. \n
                  Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                  \n This option allows configuring the `<imagePrefix>` portion of
                  the above format."
                type: string
              imagePullSecrets:
                description: ImagePullSecrets is an array of references to container
                  registry pull secrets to use. These are applied to all images to
                  be pulled.
                items:
                  description: LocalObjectReference contains enough information to
                    let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                type: array
              kubernetesProvider:
                description: KubernetesProvider specifies a particular provider of
                  the Kubernetes platform and enables provider-specific configuration.
                  If the specified value is empty, the Operator will attempt to automatically
                  determine the current provider. If the specified value is not empty,
                  the Operator will still attempt auto-detection, but will additionally
                  compare the auto-detected value to the specified value to confirm
                  they match.
                enum:
                - ""
                - EKS
                - GKE
                - AKS
                - OpenShift
                - DockerEnterprise
                - RKE2
                type: string
              nodeMetricsPort:
                description: NodeMetricsPort specifies which port calico/node serves
                  prometheus metrics on. By default, metrics are not enabled. If specified,
                  this overrides any FelixConfiguration resources which may exist.
                  If omitted, then prometheus metrics may still be configured through
                  FelixConfiguration.
                format: int32
                type: integer
              nodeUpdateStrategy:
                description: NodeUpdateStrategy can be used to customize the desired
                  update strategy, such as the MaxUnavailable field.
                properties:
                  rollingUpdate:
                    description: 'Rolling update config params. Present only if type
                      = "RollingUpdate". --- TODO: Update this to follow our convention
                      for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`.
                      See https://github.com/kubernetes/kubernetes/issues/35345'
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of nodes with an existing
                          available DaemonSet pod that can have an updated DaemonSet
                          pod during during an update. Value can be an absolute number
                          (ex: 5) or a percentage of desired pods (ex: 10%). This
                          can not be 0 if MaxUnavailable is 0. Absolute number is
                          calculated from percentage by rounding up to a minimum of
                          1. Default value is 0. Example: when this is set to 30%,
                          at most 30% of the total number of nodes that should be
                          running the daemon pod (i.e. status.desiredNumberScheduled)
                          can have their a new pod created before the old pod is marked
                          as deleted. The update starts by launching new pods on 30%
                          of nodes. Once an updated pod is available (Ready for at
                          least minReadySeconds) the old DaemonSet pod on that node
                          is marked deleted. If the old pod becomes unavailable for
                          any reason (Ready transitions to false, is evicted, or is
                          drained) an updated pod is immediatedly created on that
                          node without considering surge limits. Allowing surge implies
                          the possibility that the resources consumed by the daemonset
                          on any given node can double if the readiness check fails,
                          and so resource intensive daemonsets should take into account
                          that they may cause evictions during disruption. This is
                          an alpha field and requires enabling DaemonSetUpdateSurge
                          feature gate.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of DaemonSet pods that can
                          be unavailable during the update. Value can be an absolute
                          number (ex: 5) or a percentage of total number of DaemonSet
                          pods at the start of the update (ex: 10%). Absolute number
                          is calculated from percentage by rounding down to a minimum
                          of one. This cannot be 0 if MaxSurge is 0 Default value
                          is 1. Example: when this is set to 30%, at most 30% of the
                          total number of nodes that should be running the daemon
                          pod (i.e. status.desiredNumberScheduled) can have their
                          pods stopped for an update at any given time. The update
                          starts by stopping at most 30% of those DaemonSet pods and
                          then brings up new DaemonSet pods in their place. Once the
                          new pods are available, it then proceeds onto other DaemonSet
                          pods, thus ensuring that at least 70% of original number
                          of DaemonSet pods are available at all times during the
                          update.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of daemon set update. Can be "RollingUpdate"
                      or "OnDelete". Default is RollingUpdate.
                    type: string
                type: object
              nonPrivileged:
                description: NonPrivileged configures Calico to be run in non-privileged
                  containers as non-root users where possible.
                type: string
              registry:
                description: "Registry is the default Docker registry used for component
                  Docker images. If specified then the given value must end with a
                  slash character (`/`) and all images will be pulled from this registry.
                  If not specified then the default registries will be used. A special
                  case value, UseDefault, is supported to explicitly specify the default
                  registries will be used. \n Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                  \n This option allows configuring the `<registry>` portion of the
                  above format."
                type: string
              typhaAffinity:
                description: TyphaAffinity allows configuration of node affinity characteristics
                  for Typha pods.
                properties:
                  nodeAffinity:
                    description: NodeAffinity describes node affinity scheduling rules
                      for typha.
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to
                          nodes that satisfy the affinity expressions specified by
                          this field, but it may choose a node that violates one or
                          more of the expressions.
                        items:
                          description: An empty preferred scheduling term matches
                            all objects with implicit weight 0 (i.e. it's a no-op).
                            A null preferred scheduling term matches no objects (i.e.
                            is also a no-op).
                          properties:
                            preference:
                              description: A node selector term, associated with the
                                corresponding weight.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements
                                    by node's labels.
                                  items:
                                    description: A node selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists, DoesNotExist. Gt, and
                                          Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If
                                          the operator is In or NotIn, the values
                                          array must be non-empty. If the operator
                                          is Exists or DoesNotExist, the values array
                                          must be empty. If the operator is Gt or
                                          Lt, the values array must have a single
                                          element, which will be interpreted as an
                                          integer. This array is replaced during a
                                          strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements
                                    by node's fields.
                                  items:
                                    description: A node selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists, DoesNotExist. Gt, and
                                          Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If
                                          the operator is In or NotIn, the values
                                          array must be non-empty. If the operator
                                          is Exists or DoesNotExist, the values array
                                          must be empty. If the operator is Gt or
                                          Lt, the values array must have a single
                                          element, which will be interpreted as an
                                          integer. This array is replaced during a
                                          strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            weight:
                              description: Weight associated with matching the corresponding
                                nodeSelectorTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - preference
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: 'WARNING: Please note that if the affinity requirements
                          specified by this field are not met at scheduling time,
                          the pod will NOT be scheduled onto the node. There is no
                          fallback to another affinity rules with this setting. This
                          may cause networking disruption or even catastrophic failure!
                          PreferredDuringSchedulingIgnoredDuringExecution should be
                          used for affinity unless there is a specific well understood
                          reason to use RequiredDuringSchedulingIgnoredDuringExecution
                          and you can guarantee that the RequiredDuringSchedulingIgnoredDuringExecution
                          will always have sufficient nodes to satisfy the requirement.
                          NOTE: RequiredDuringSchedulingIgnoredDuringExecution is
                          set by default for AKS nodes, to avoid scheduling Typhas
                          on virtual-nodes. If the affinity requirements specified
                          by this field cease to be met at some point during pod execution
                          (e.g. due to an update), the system may or may not try to
                          eventually evict the pod from its node.'
                        properties:
                          nodeSelectorTerms:
                            description: Required. A list of node selector terms.
                              The terms are ORed.
                            items:
                              description: A null or empty node selector term matches
                                no objects. The requirements of them are ANDed. The
                                TopologySelectorTerm type implements a subset of the
                                NodeSelectorTerm.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements
                                    by node's labels.
                                  items:
                                    description: A node selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists, DoesNotExist. Gt, and
                                          Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If
                                          the operator is In or NotIn, the values
                                          array must be non-empty. If the operator
                                          is Exists or DoesNotExist, the values array
                                          must be empty. If the operator is Gt or
                                          Lt, the values array must have a single
                                          element, which will be interpreted as an
                                          integer. This array is replaced during a
                                          strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements
                                    by node's fields.
                                  items:
                                    description: A node selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists, DoesNotExist. Gt, and
                                          Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If
                                          the operator is In or NotIn, the values
                                          array must be non-empty. If the operator
                                          is Exists or DoesNotExist, the values array
                                          must be empty. If the operator is Gt or
                                          Lt, the values array must have a single
                                          element, which will be interpreted as an
                                          integer. This array is replaced during a
                                          strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            type: array
                        required:
                        - nodeSelectorTerms
                        type: object
                    type: object
                type: object
              typhaMetricsPort:
                description: TyphaMetricsPort specifies which port calico/typha serves
                  prometheus metrics on. By default, metrics are not enabled.
                format: int32
                type: integer
              variant:
                description: 'Variant is the product to install - one of Calico or
                  TigeraSecureEnterprise Default: Calico'
                enum:
                - Calico
                - TigeraSecureEnterprise
                type: string
            type: object
          status:
            description: Most recently observed state for the Calico or Calico Enterprise
              installation.
            properties:
              computed:
                description: Computed is the final installation including overlaid
                  resources.
                properties:
                  calicoNetwork:
                    description: CalicoNetwork specifies networking configuration
                      options for Calico.
                    properties:
                      bgp:
                        description: BGP configures whether or not to enable Calico's
                          BGP capabilities.
                        enum:
                        - Enabled
                        - Disabled
                        type: string
                      containerIPForwarding:
                        description: 'ContainerIPForwarding configures whether ip
                          forwarding will be enabled for containers in the CNI configuration.
                          Default: Disabled'
                        enum:
                        - Enabled
                        - Disabled
                        type: string
                      hostPorts:
                        description: 'HostPorts configures whether or not Calico will
                          support Kubernetes HostPorts. Valid only when using the
                          Calico CNI plugin. Default: Enabled'
                        enum:
                        - Enabled
                        - Disabled
                        type: string
                      ipPools:
                        description: IPPools contains a list of IP pools to create
                          if none exist. At most one IP pool of each address family
                          may be specified. If omitted, a single pool will be configured
                          if needed.
                        items:
                          properties:
                            blockSize:
                              description: 'BlockSize specifies the CIDR prefex length
                                to use when allocating per-node IP blocks from the
                                main IP pool CIDR. Default: 26 (IPv4), 122 (IPv6)'
                              format: int32
                              type: integer
                            cidr:
                              description: CIDR contains the address range for the
                                IP Pool in classless inter-domain routing format.
                              type: string
                            encapsulation:
                              description: 'Encapsulation specifies the encapsulation
                                type that will be used with the IP Pool. Default:
                                IPIP'
                              enum:
                              - IPIPCrossSubnet
                              - IPIP
                              - VXLAN
                              - VXLANCrossSubnet
                              - None
                              type: string
                            natOutgoing:
                              description: 'NATOutgoing specifies if NAT will be enabled
                                or disabled for outgoing traffic. Default: Enabled'
                              enum:
                              - Enabled
                              - Disabled
                              type: string
                            nodeSelector:
                              description: 'NodeSelector specifies the node selector
                                that will be set for the IP Pool. Default: ''all()'''
                              type: string
                          required:
                          - cidr
                          type: object
                        type: array
                      linuxDataplane:
                        description: 'LinuxDataplane is used to select the dataplane
                          used for Linux nodes. In particular, it causes the operator
                          to add required mounts and environment variables for the
                          particular dataplane. If not specified, iptables mode is
                          used. Default: Iptables'
                        enum:
                        - Iptables
                        - BPF
                        - VPP
                        type: string
                      mtu:
                        description: MTU specifies the maximum transmission unit to
                          use on the pod network. If not specified, Calico will perform
                          MTU auto-detection based on the cluster network.
                        format: int32
                        type: integer
                      multiInterfaceMode:
                        description: 'MultiInterfaceMode configures what will configure
                          multiple interface per pod. Only valid for Calico Enterprise
                          installations using the Calico CNI plugin. Default: None'
                        enum:
                        - None
                        - Multus
                        type: string
                      nodeAddressAutodetectionV4:
                        description: NodeAddressAutodetectionV4 specifies an approach
                          to automatically detect node IPv4 addresses. If not specified,
                          will use default auto-detection settings to acquire an IPv4
                          address for each node.
                        properties:
                          canReach:
                            description: CanReach enables IP auto-detection based
                              on which source address on the node is used to reach
                              the specified IP or domain.
                            type: string
                          cidrs:
                            description: CIDRS enables IP auto-detection based on
                              which addresses on the nodes are within one of the provided
                              CIDRs.
                            items:
                              type: string
                            type: array
                          firstFound:
                            description: FirstFound uses default interface matching
                              parameters to select an interface, performing best-effort
                              filtering based on well-known interface names.
                            type: boolean
                          interface:
                            description: Interface enables IP auto-detection based
                              on interfaces that match the given regex.
                            type: string
                          kubernetes:
                            description: Kubernetes configures Calico to detect node
                              addresses based on the Kubernetes API.
                            enum:
                            - NodeInternalIP
                            type: string
                          skipInterface:
                            description: SkipInterface enables IP auto-detection based
                              on interfaces that do not match the given regex.
                            type: string
                        type: object
                      nodeAddressAutodetectionV6:
                        description: NodeAddressAutodetectionV6 specifies an approach
                          to automatically detect node IPv6 addresses. If not specified,
                          IPv6 addresses will not be auto-detected.
                        properties:
                          canReach:
                            description: CanReach enables IP auto-detection based
                              on which source address on the node is used to reach
                              the specified IP or domain.
                            type: string
                          cidrs:
                            description: CIDRS enables IP auto-detection based on
                              which addresses on the nodes are within one of the provided
                              CIDRs.
                            items:
                              type: string
                            type: array
                          firstFound:
                            description: FirstFound uses default interface matching
                              parameters to select an interface, performing best-effort
                              filtering based on well-known interface names.
                            type: boolean
                          interface:
                            description: Interface enables IP auto-detection based
                              on interfaces that match the given regex.
                            type: string
                          kubernetes:
                            description: Kubernetes configures Calico to detect node
                              addresses based on the Kubernetes API.
                            enum:
                            - NodeInternalIP
                            type: string
                          skipInterface:
                            description: SkipInterface enables IP auto-detection based
                              on interfaces that do not match the given regex.
                            type: string
                        type: object
                    type: object
                  certificateManagement:
                    description: CertificateManagement configures pods to submit a
                      CertificateSigningRequest to the certificates.k8s.io/v1beta1
                      API in order to obtain TLS certificates. This feature requires
                      that you bring your own CSR signing and approval process, otherwise
                      pods will be stuck during initialization.
                    properties:
                      caCert:
                        description: Certificate of the authority that signs the CertificateSigningRequests
                          in PEM format.
                        format: byte
                        type: string
                      keyAlgorithm:
                        description: 'Specify the algorithm used by pods to generate
                          a key pair that is associated with the X.509 certificate
                          request. Default: RSAWithSize2048'
                        enum:
                        - ""
                        - RSAWithSize2048
                        - RSAWithSize4096
                        - RSAWithSize8192
                        - ECDSAWithCurve256
                        - ECDSAWithCurve384
                        - ECDSAWithCurve521
                        type: string
                      signatureAlgorithm:
                        description: 'Specify the algorithm used for the signature
                          of the X.509 certificate request. Default: SHA256WithRSA'
                        enum:
                        - ""
                        - SHA256WithRSA
                        - SHA384WithRSA
                        - SHA512WithRSA
                        - ECDSAWithSHA256
                        - ECDSAWithSHA384
                        - ECDSAWithSHA512
                        type: string
                      signerName:
                        description: 'When a CSR is issued to the certificates.k8s.io
                          API, the signerName is added to the request in order to
                          accommodate for clusters with multiple signers. Must be
                          formatted as: `<my-domain>/<my-signername>`.'
                        type: string
                    required:
                    - caCert
                    - signerName
                    type: object
                  cni:
                    description: CNI specifies the CNI that will be used by this installation.
                    properties:
                      ipam:
                        description: IPAM specifies the pod IP address management
                          that will be used in the Calico or Calico Enterprise installation.
                        properties:
                          type:
                            description: "Specifies the IPAM plugin that will be used
                              in the Calico or Calico Enterprise installation. * For
                              CNI Plugin Calico, this field defaults to Calico. *
                              For CNI Plugin GKE, this field defaults to HostLocal.
                              * For CNI Plugin AzureVNET, this field defaults to AzureVNET.
                              * For CNI Plugin AmazonVPC, this field defaults to AmazonVPC.
                              \n The IPAM plugin is installed and configured only
                              if the CNI plugin is set to Calico, for all other values
                              of the CNI plugin the plugin binaries and CNI config
                              is a dependency that is expected to be installed separately.
                              \n Default: Calico"
                            enum:
                            - Calico
                            - HostLocal
                            - AmazonVPC
                            - AzureVNET
                            type: string
                        required:
                        - type
                        type: object
                      type:
                        description: "Specifies the CNI plugin that will be used in
                          the Calico or Calico Enterprise installation. * For KubernetesProvider
                          GKE, this field defaults to GKE. * For KubernetesProvider
                          AKS, this field defaults to AzureVNET. * For KubernetesProvider
                          EKS, this field defaults to AmazonVPC. * If aws-node daemonset
                          exists in kube-system when the Installation resource is
                          created, this field defaults to AmazonVPC. * For all other
                          cases this field defaults to Calico. \n For the value Calico,
                          the CNI plugin binaries and CNI config will be installed
                          as part of deployment, for all other values the CNI plugin
                          binaries and CNI config is a dependency that is expected
                          to be installed separately. \n Default: Calico"
                        enum:
                        - Calico
                        - GKE
                        - AmazonVPC
                        - AzureVNET
                        type: string
                    required:
                    - type
                    type: object
                  componentResources:
                    description: ComponentResources can be used to customize the resource
                      requirements for each component. Node, Typha, and KubeControllers
                      are supported for installations.
                    items:
                      description: The ComponentResource struct associates a ResourceRequirements
                        with a component by name
                      properties:
                        componentName:
                          description: ComponentName is an enum which identifies the
                            component
                          enum:
                          - Node
                          - Typha
                          - KubeControllers
                          type: string
                        resourceRequirements:
                          description: ResourceRequirements allows customization of
                            limits and requests for compute resources such as cpu
                            and memory.
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of
                                compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount
                                of compute resources required. If Requests is omitted
                                for a container, it defaults to Limits if that is
                                explicitly specified, otherwise to an implementation-defined
                                value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                      required:
                      - componentName
                      - resourceRequirements
                      type: object
                    type: array
                  controlPlaneNodeSelector:
                    additionalProperties:
                      type: string
                    description: ControlPlaneNodeSelector is used to select control
                      plane nodes on which to run Calico components. This is globally
                      applied to all resources created by the operator excluding daemonsets.
                    type: object
                  controlPlaneReplicas:
                    description: ControlPlaneReplicas defines how many replicas of
                      the control plane core components will be deployed. This field
                      applies to all control plane components that support High Availability.
                      Defaults to 2.
                    format: int32
                    type: integer
                  controlPlaneTolerations:
                    description: ControlPlaneTolerations specify tolerations which
                      are then globally applied to all resources created by the operator.
                    items:
                      description: The pod this Toleration is attached to tolerates
                        any taint that matches the triple <key,value,effect> using
                        the matching operator <operator>.
                      properties:
                        effect:
                          description: Effect indicates the taint effect to match.
                            Empty means match all taint effects. When specified, allowed
                            values are NoSchedule, PreferNoSchedule and NoExecute.
                          type: string
                        key:
                          description: Key is the taint key that the toleration applies
                            to. Empty means match all taint keys. If the key is empty,
                            operator must be Exists; this combination means to match
                            all values and all keys.
                          type: string
                        operator:
                          description: Operator represents a key's relationship to
                            the value. Valid operators are Exists and Equal. Defaults
                            to Equal. Exists is equivalent to wildcard for value,
                            so that a pod can tolerate all taints of a particular
                            category.
                          type: string
                        tolerationSeconds:
                          description: TolerationSeconds represents the period of
                            time the toleration (which must be of effect NoExecute,
                            otherwise this field is ignored) tolerates the taint.
                            By default, it is not set, which means tolerate the taint
                            forever (do not evict). Zero and negative values will
                            be treated as 0 (evict immediately) by the system.
                          format: int64
                          type: integer
                        value:
                          description: Value is the taint value the toleration matches
                            to. If the operator is Exists, the value should be empty,
                            otherwise just a regular string.
                          type: string
                      type: object
                    type: array
                  flexVolumePath:
                    description: FlexVolumePath optionally specifies a custom path
                      for FlexVolume. If not specified, FlexVolume will be enabled
                      by default. If set to 'None', FlexVolume will be disabled. The
                      default is based on the kubernetesProvider.
                    type: string
                  imagePath:
                    description: "ImagePath allows for the path part of an image to
                      be specified. If specified then the specified value will be
                      used as the image path for each image. If not specified or empty,
                      the default for each image will be used. A special case value,
                      UseDefault, is supported to explicitly specify the default image
                      path will be used for each image. \n Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                      \n This option allows configuring the `<imagePath>` portion
                      of the above format."
                    type: string
                  imagePrefix:
                    description: "ImagePrefix allows for the prefix part of an image
                      to be specified. If specified then the given value will be used
                      as a prefix on each image. If not specified or empty, no prefix
                      will be used. A special case value, UseDefault, is supported
                      to explicitly specify the default image prefix will be used
                      for each image. \n Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                      \n This option allows configuring the `<imagePrefix>` portion
                      of the above format."
                    type: string
                  imagePullSecrets:
                    description: ImagePullSecrets is an array of references to container
                      registry pull secrets to use. These are applied to all images
                      to be pulled.
                    items:
                      description: LocalObjectReference contains enough information
                        to let you locate the referenced object inside the same namespace.
                      properties:
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?'
                          type: string
                      type: object
                    type: array
                  kubernetesProvider:
                    description: KubernetesProvider specifies a particular provider
                      of the Kubernetes platform and enables provider-specific configuration.
                      If the specified value is empty, the Operator will attempt to
                      automatically determine the current provider. If the specified
                      value is not empty, the Operator will still attempt auto-detection,
                      but will additionally compare the auto-detected value to the
                      specified value to confirm they match.
                    enum:
                    - ""
                    - EKS
                    - GKE
                    - AKS
                    - OpenShift
                    - DockerEnterprise
                    - RKE2
                    type: string
                  nodeMetricsPort:
                    description: NodeMetricsPort specifies which port calico/node
                      serves prometheus metrics on. By default, metrics are not enabled.
                      If specified, this overrides any FelixConfiguration resources
                      which may exist. If omitted, then prometheus metrics may still
                      be configured through FelixConfiguration.
                    format: int32
                    type: integer
                  nodeUpdateStrategy:
                    description: NodeUpdateStrategy can be used to customize the desired
                      update strategy, such as the MaxUnavailable field.
                    properties:
                      rollingUpdate:
                        description: 'Rolling update config params. Present only if
                          type = "RollingUpdate". --- TODO: Update this to follow
                          our convention for oneOf, whatever we decide it to be. Same
                          as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345'
                        properties:
                          maxSurge:
                            anyOf:
                            - type: integer
                            - type: string
                            description: 'The maximum number of nodes with an existing
                              available DaemonSet pod that can have an updated DaemonSet
                              pod during during an update. Value can be an absolute
                              number (ex: 5) or a percentage of desired pods (ex:
                              10%). This can not be 0 if MaxUnavailable is 0. Absolute
                              number is calculated from percentage by rounding up
                              to a minimum of 1. Default value is 0. Example: when
                              this is set to 30%, at most 30% of the total number
                              of nodes that should be running the daemon pod (i.e.
                              status.desiredNumberScheduled) can have their a new
                              pod created before the old pod is marked as deleted.
                              The update starts by launching new pods on 30% of nodes.
                              Once an updated pod is available (Ready for at least
                              minReadySeconds) the old DaemonSet pod on that node
                              is marked deleted. If the old pod becomes unavailable
                              for any reason (Ready transitions to false, is evicted,
                              or is drained) an updated pod is immediatedly created
                              on that node without considering surge limits. Allowing
                              surge implies the possibility that the resources consumed
                              by the daemonset on any given node can double if the
                              readiness check fails, and so resource intensive daemonsets
                              should take into account that they may cause evictions
                              during disruption. This is an alpha field and requires
                              enabling DaemonSetUpdateSurge feature gate.'
                            x-kubernetes-int-or-string: true
                          maxUnavailable:
                            anyOf:
                            - type: integer
                            - type: string
                            description: 'The maximum number of DaemonSet pods that
                              can be unavailable during the update. Value can be an
                              absolute number (ex: 5) or a percentage of total number
                              of DaemonSet pods at the start of the update (ex: 10%).
                              Absolute number is calculated from percentage by rounding
                              down to a minimum of one. This cannot be 0 if MaxSurge
                              is 0 Default value is 1. Example: when this is set to
                              30%, at most 30% of the total number of nodes that should
                              be running the daemon pod (i.e. status.desiredNumberScheduled)
                              can have their pods stopped for an update at any given
                              time. The update starts by stopping at most 30% of those
                              DaemonSet pods and then brings up new DaemonSet pods
                              in their place. Once the new pods are available, it
                              then proceeds onto other DaemonSet pods, thus ensuring
                              that at least 70% of original number of DaemonSet pods
                              are available at all times during the update.'
                            x-kubernetes-int-or-string: true
                        type: object
                      type:
                        description: Type of daemon set update. Can be "RollingUpdate"
                          or "OnDelete". Default is RollingUpdate.
                        type: string
                    type: object
                  nonPrivileged:
                    description: NonPrivileged configures Calico to be run in non-privileged
                      containers as non-root users where possible.
                    type: string
                  registry:
                    description: "Registry is the default Docker registry used for
                      component Docker images. If specified then the given value must
                      end with a slash character (`/`) and all images will be pulled
                      from this registry. If not specified then the default registries
                      will be used. A special case value, UseDefault, is supported
                      to explicitly specify the default registries will be used. \n
                      Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                      \n This option allows configuring the `<registry>` portion of
                      the above format."
                    type: string
                  typhaAffinity:
                    description: TyphaAffinity allows configuration of node affinity
                      characteristics for Typha pods.
                    properties:
                      nodeAffinity:
                        description: NodeAffinity describes node affinity scheduling
                          rules for typha.
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions.
                            items:
                              description: An empty preferred scheduling term matches
                                all objects with implicit weight 0 (i.e. it's a no-op).
                                A null preferred scheduling term matches no objects
                                (i.e. is also a no-op).
                              properties:
                                preference:
                                  description: A node selector term, associated with
                                    the corresponding weight.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                weight:
                                  description: Weight associated with matching the
                                    corresponding nodeSelectorTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - preference
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: 'WARNING: Please note that if the affinity
                              requirements specified by this field are not met at
                              scheduling time, the pod will NOT be scheduled onto
                              the node. There is no fallback to another affinity rules
                              with this setting. This may cause networking disruption
                              or even catastrophic failure! PreferredDuringSchedulingIgnoredDuringExecution
                              should be used for affinity unless there is a specific
                              well understood reason to use RequiredDuringSchedulingIgnoredDuringExecution
                              and you can guarantee that the RequiredDuringSchedulingIgnoredDuringExecution
                              will always have sufficient nodes to satisfy the requirement.
                              NOTE: RequiredDuringSchedulingIgnoredDuringExecution
                              is set by default for AKS nodes, to avoid scheduling
                              Typhas on virtual-nodes. If the affinity requirements
                              specified by this field cease to be met at some point
                              during pod execution (e.g. due to an update), the system
                              may or may not try to eventually evict the pod from
                              its node.'
                            properties:
                              nodeSelectorTerms:
                                description: Required. A list of node selector terms.
                                  The terms are ORed.
                                items:
                                  description: A null or empty node selector term
                                    matches no objects. The requirements of them are
                                    ANDed. The TopologySelectorTerm type implements
                                    a subset of the NodeSelectorTerm.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                type: array
                            required:
                            - nodeSelectorTerms
                            type: object
                        type: object
                    type: object
                  typhaMetricsPort:
                    description: TyphaMetricsPort specifies which port calico/typha
                      serves prometheus metrics on. By default, metrics are not enabled.
                    format: int32
                    type: integer
                  variant:
                    description: 'Variant is the product to install - one of Calico
                      or TigeraSecureEnterprise Default: Calico'
                    enum:
                    - Calico
                    - TigeraSecureEnterprise
                    type: string
                type: object
              imageSet:
                description: ImageSet is the name of the ImageSet being used, if there
                  is an ImageSet that is being used. If an ImageSet is not being used
                  then this will not be set.
                type: string
              mtu:
                description: MTU is the most recently observed value for pod network
                  MTU. This may be an explicitly configured value, or based on Calico's
                  native auto-detetion.
                format: int32
                type: integer
              variant:
                description: Variant is the most recently observed installed variant
                  - one of Calico or TigeraSecureEnterprise
                enum:
                - Calico
                - TigeraSecureEnterprise
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/operator.tigera.io_intrusiondetections_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: intrusiondetections.operator.tigera.io
  annotations:
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: IntrusionDetection
    listKind: IntrusionDetectionList
    plural: intrusiondetections
    singular: intrusiondetection
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: IntrusionDetection installs the components required for Tigera
          intrusion detection. At most one instance of this resource is supported.
          It must be named "tigera-secure".
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the desired state for Tigera intrusion detection.
            properties:
              componentResources:
                description: ComponentResources can be used to customize the resource
                  requirements for each component. Only DeepPacketInspection is supported
                  for this spec.
                items:
                  description: The ComponentResource struct associates a ResourceRequirements
                    with a component by name
                  properties:
                    componentName:
                      description: ComponentName is an enum which identifies the component
                      enum:
                      - DeepPacketInspection
                      type: string
                    resourceRequirements:
                      description: ResourceRequirements allows customization of limits
                        and requests for compute resources such as cpu and memory.
                      properties:
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Limits describes the maximum amount of compute
                            resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Requests describes the minimum amount of compute
                            resources required. If Requests is omitted for a container,
                            it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. More info:
                            https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                          type: object
                      type: object
                  required:
                  - componentName
                  - resourceRequirements
                  type: object
                type: array
            type: object
          status:
            description: Most recently observed state for Tigera intrusion detection.
            properties:
              state:
                description: State provides user-readable status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: crds/operator.tigera.io_amazoncloudintegrations_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: amazoncloudintegrations.operator.tigera.io
  annotations:
    helm.sh/hook: crd-install
spec:
  group: operator.tigera.io
  names:
    kind: AmazonCloudIntegration
    listKind: AmazonCloudIntegrationList
    plural: amazoncloudintegrations
    singular: amazoncloudintegration
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: AmazonCloudIntegration is the Schema for the amazoncloudintegrations
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AmazonCloudIntegrationSpec defines the desired state of AmazonCloudIntegration
            properties:
              awsRegion:
                description: AWSRegion is the region in which your cluster is located.
                type: string
              defaultPodMetadataAccess:
                description: 'DefaultPodMetadataAccess defines what the default behavior
                  will be for accessing the AWS metadata service from a pod. Default:
                  Denied'
                enum:
                - Allowed
                - Denied
                type: string
              enforcedSecurityGroupID:
                description: EnforcedSecurityGroupID is the ID of the Security Group
                  which will be applied to all ENIs that are on a host that is also
                  part of the Kubernetes cluster.
                type: string
              nodeSecurityGroupIDs:
                description: NodeSecurityGroupIDs is a list of Security Group IDs
                  that all nodes and masters will be in.
                items:
                  type: string
                type: array
              podSecurityGroupID:
                description: PodSecurityGroupID is the ID of the Security Group which
                  all pods should be placed in by default.
                type: string
              sqsURL:
                description: SQSURL is the SQS URL needed to access the Simple Queue
                  Service.
                type: string
              trustEnforcedSecurityGroupID:
                description: TrustEnforcedSecurityGroupID is the ID of the Security
                  Group which will be applied to all ENIs in the VPC.
                type: string
              vpcs:
                description: VPCS is a list of VPC IDs to monitor for ENIs and Security
                  Groups, only one is supported.
                items:
                  type: string
                type: array
            type: object
          status:
            description: AmazonCloudIntegrationStatus defines the observed state of
              AmazonCloudIntegration
            properties:
              state:
                description: State provides user-readable status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: crds/operator.tigera.io_apiservers_crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  name: apiservers.operator.tigera.io
spec:
  group: operator.tigera.io
  names:
    kind: APIServer
    listKind: APIServerList
    plural: apiservers
    singular: apiserver
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: APIServer installs the Tigera API server and related resources.
          At most one instance of this resource is supported. It must be named "tigera-secure".
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the desired state for the Tigera API server.
            type: object
          status:
            description: Most recently observed status for the Tigera API server.
            properties:
              state:
                description: State provides user-readable status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: crds/eck/01-crd-eck-enterprisesearch.yaml
# Elasticsearch operator CRDs
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
    helm.sh/hook: "crd-install"
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: 'elastic-operator'
    app.kubernetes.io/name: 'eck-operator-crds'
    app.kubernetes.io/version: '1.8.0'
  name: enterprisesearches.enterprisesearch.k8s.elastic.co
spec:
  # preserveUnknownFields - set to false to pickup udpate to v1/CRD structure
  preserveUnknownFields: false
  group: enterprisesearch.k8s.elastic.co
  names:
    categories:
      - elastic
    kind: EnterpriseSearch
    listKind: EnterpriseSearchList
    plural: enterprisesearches
    shortNames:
      - ent
    singular: enterprisesearch
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: Enterprise Search version
          jsonPath: .status.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
              properties:
                config:
                  description: Config holds the Enterprise Search configuration.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                configRef:
                  description: ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
                  properties:
                    secretName:
                      description: SecretName is the name of the secret.
                      type: string
                  type: object
                count:
                  description: Count of Enterprise Search instances to deploy.
                  format: int32
                  type: integer
                elasticsearchRef:
                  description: ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                http:
                  description: HTTP holds the HTTP layer configuration for Enterprise Search resource.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the Enterprise Search Docker image to deploy.
                  type: string
                podTemplate:
                  description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                serviceAccountName:
                  description: ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
                  type: string
                version:
                  description: Version of Enterprise Search.
                  type: string
              type: object
            status:
              description: EnterpriseSearchStatus defines the observed state of EnterpriseSearch
              properties:
                associationStatus:
                  description: Association is the status of any auto-linking to Elasticsearch clusters.
                  type: string
                availableNodes:
                  description: AvailableNodes is the number of available replicas in the deployment.
                  format: int32
                  type: integer
                count:
                  description: Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
                  format: int32
                  type: integer
                health:
                  description: Health of the deployment.
                  type: string
                selector:
                  description: Selector is the label selector used to find all pods.
                  type: string
                service:
                  description: ExternalService is the name of the service associated to the Enterprise Search Pods.
                  type: string
                version:
                  description: 'Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.'
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        scale:
          labelSelectorPath: .status.selector
          specReplicasPath: .spec.count
          statusReplicasPath: .status.count
        status: {}
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: Enterprise Search version
          jsonPath: .status.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
              properties:
                config:
                  description: Config holds the Enterprise Search configuration.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                configRef:
                  description: ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
                  properties:
                    secretName:
                      description: SecretName is the name of the secret.
                      type: string
                  type: object
                count:
                  description: Count of Enterprise Search instances to deploy.
                  format: int32
                  type: integer
                elasticsearchRef:
                  description: ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                http:
                  description: HTTP holds the HTTP layer configuration for Enterprise Search resource.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the Enterprise Search Docker image to deploy.
                  type: string
                podTemplate:
                  description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                serviceAccountName:
                  description: ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
                  type: string
                version:
                  description: Version of Enterprise Search.
                  type: string
              type: object
            status:
              description: EnterpriseSearchStatus defines the observed state of EnterpriseSearch
              properties:
                associationStatus:
                  description: Association is the status of any auto-linking to Elasticsearch clusters.
                  type: string
                availableNodes:
                  description: AvailableNodes is the number of available replicas in the deployment.
                  format: int32
                  type: integer
                count:
                  description: Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
                  format: int32
                  type: integer
                health:
                  description: Health of the deployment.
                  type: string
                selector:
                  description: Selector is the label selector used to find all pods.
                  type: string
                service:
                  description: ExternalService is the name of the service associated to the Enterprise Search Pods.
                  type: string
                version:
                  description: 'Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.'
                  type: string
              type: object
          type: object
      served: true
      storage: false
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/eck/01-crd-eck-beat.yaml
# Elasticsearch operator CRDs
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
    helm.sh/hook: "crd-install"
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: 'elastic-operator'
    app.kubernetes.io/name: 'eck-operator-crds'
    app.kubernetes.io/version: '1.8.0'
  name: beats.beat.k8s.elastic.co
spec:
  # preserveUnknownFields - set to false to pickup udpate to v1/CRD structure
  preserveUnknownFields: false
  group: beat.k8s.elastic.co
  names:
    categories:
      - elastic
    kind: Beat
    listKind: BeatList
    plural: beats
    shortNames:
      - beat
    singular: beat
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: available
          type: integer
        - description: Expected nodes
          jsonPath: .status.expectedNodes
          name: expected
          type: integer
        - description: Beat type
          jsonPath: .spec.type
          name: type
          type: string
        - description: Beat version
          jsonPath: .status.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: Beat is the Schema for the Beats API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: BeatSpec defines the desired state of a Beat.
              properties:
                config:
                  description: Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                configRef:
                  description: ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
                  properties:
                    secretName:
                      description: SecretName is the name of the secret.
                      type: string
                  type: object
                daemonSet:
                  description: DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
                  properties:
                    podTemplate:
                      description: PodTemplateSpec describes the data a pod should have when created from a template
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    updateStrategy:
                      description: DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
                      properties:
                        rollingUpdate:
                          description: 'Rolling update config params. Present only if type = "RollingUpdate". --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345'
                          properties:
                            maxSurge:
                              anyOf:
                                - type: integer
                                - type: string
                              description: 'The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is an alpha field and requires enabling DaemonSetUpdateSurge feature gate.'
                              x-kubernetes-int-or-string: true
                            maxUnavailable:
                              anyOf:
                                - type: integer
                                - type: string
                              description: 'The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding down to a minimum of one. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.'
                              x-kubernetes-int-or-string: true
                          type: object
                        type:
                          description: Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
                          type: string
                      type: object
                  type: object
                deployment:
                  description: Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
                  properties:
                    podTemplate:
                      description: PodTemplateSpec describes the data a pod should have when created from a template
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    replicas:
                      format: int32
                      type: integer
                    strategy:
                      description: DeploymentStrategy describes how to replace existing pods with new ones.
                      properties:
                        rollingUpdate:
                          description: 'Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.'
                          properties:
                            maxSurge:
                              anyOf:
                                - type: integer
                                - type: string
                              description: 'The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.'
                              x-kubernetes-int-or-string: true
                            maxUnavailable:
                              anyOf:
                                - type: integer
                                - type: string
                              description: 'The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.'
                              x-kubernetes-int-or-string: true
                          type: object
                        type:
                          description: Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
                          type: string
                      type: object
                  type: object
                elasticsearchRef:
                  description: ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                image:
                  description: Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
                  type: string
                kibanaRef:
                  description: KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                secureSettings:
                  description: SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
                  items:
                    description: SecretSource defines a data source based on a Kubernetes Secret.
                    properties:
                      entries:
                        description: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
                        items:
                          description: KeyToPath defines how to map a key in a Secret object to a filesystem path.
                          properties:
                            key:
                              description: Key is the key contained in the secret.
                              type: string
                            path:
                              description: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                      secretName:
                        description: SecretName is the name of the secret.
                        type: string
                    required:
                      - secretName
                    type: object
                  type: array
                serviceAccountName:
                  description: ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
                  type: string
                type:
                  description: Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, etc.). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
                  maxLength: 20
                  pattern: '[a-zA-Z0-9-]+'
                  type: string
                version:
                  description: Version of the Beat.
                  type: string
              required:
                - type
                - version
              type: object
            status:
              description: BeatStatus defines the observed state of a Beat.
              properties:
                availableNodes:
                  format: int32
                  type: integer
                elasticsearchAssociationStatus:
                  description: AssociationStatus is the status of an association resource.
                  type: string
                expectedNodes:
                  format: int32
                  type: integer
                health:
                  type: string
                kibanaAssociationStatus:
                  description: AssociationStatus is the status of an association resource.
                  type: string
                version:
                  description: 'Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.'
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/eck/01-crd-eck-agent.yaml
# Elasticsearch operator CRDs
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
    helm.sh/hook: "crd-install"
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: 'elastic-operator'
    app.kubernetes.io/name: 'eck-operator-crds'
    app.kubernetes.io/version: '1.8.0'
  name: agents.agent.k8s.elastic.co
spec:
  # preserveUnknownFields - set to false to pickup udpate to v1/CRD structure
  preserveUnknownFields: false
  group: agent.k8s.elastic.co
  names:
    categories:
      - elastic
    kind: Agent
    listKind: AgentList
    plural: agents
    shortNames:
      - agent
    singular: agent
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: available
          type: integer
        - description: Expected nodes
          jsonPath: .status.expectedNodes
          name: expected
          type: integer
        - description: Agent version
          jsonPath: .status.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Agent is the Schema for the Agents API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: AgentSpec defines the desired state of the Agent
              properties:
                config:
                  description: Config holds the Agent configuration. At most one of [`Config`, `ConfigRef`] can be specified.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                configRef:
                  description: ConfigRef contains a reference to an existing Kubernetes Secret holding the Agent configuration. Agent settings must be specified as yaml, under a single "agent.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
                  properties:
                    secretName:
                      description: SecretName is the name of the secret.
                      type: string
                  type: object
                daemonSet:
                  description: DaemonSet specifies the Agent should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`.
                  properties:
                    podTemplate:
                      description: PodTemplateSpec describes the data a pod should have when created from a template
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    updateStrategy:
                      description: DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
                      properties:
                        rollingUpdate:
                          description: 'Rolling update config params. Present only if type = "RollingUpdate". --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345'
                          properties:
                            maxSurge:
                              anyOf:
                                - type: integer
                                - type: string
                              description: 'The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is an alpha field and requires enabling DaemonSetUpdateSurge feature gate.'
                              x-kubernetes-int-or-string: true
                            maxUnavailable:
                              anyOf:
                                - type: integer
                                - type: string
                              description: 'The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding down to a minimum of one. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.'
                              x-kubernetes-int-or-string: true
                          type: object
                        type:
                          description: Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
                          type: string
                      type: object
                  type: object
                deployment:
                  description: Deployment specifies the Agent should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`.
                  properties:
                    podTemplate:
                      description: PodTemplateSpec describes the data a pod should have when created from a template
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    replicas:
                      format: int32
                      type: integer
                    strategy:
                      description: DeploymentStrategy describes how to replace existing pods with new ones.
                      properties:
                        rollingUpdate:
                          description: 'Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.'
                          properties:
                            maxSurge:
                              anyOf:
                                - type: integer
                                - type: string
                              description: 'The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.'
                              x-kubernetes-int-or-string: true
                            maxUnavailable:
                              anyOf:
                                - type: integer
                                - type: string
                              description: 'The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.'
                              x-kubernetes-int-or-string: true
                          type: object
                        type:
                          description: Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
                          type: string
                      type: object
                  type: object
                elasticsearchRefs:
                  description: ElasticsearchRefs is a reference to a list of Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single ES cluster is currently supported.
                  items:
                    properties:
                      name:
                        description: Name of the Kubernetes object.
                        type: string
                      namespace:
                        description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                        type: string
                      outputName:
                        type: string
                      serviceName:
                        description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                        type: string
                    required:
                      - name
                    type: object
                  type: array
                fleetServerEnabled:
                  description: FleetServerEnabled determines whether this Agent will launch Fleet Server. Don't set unless `mode` is set to `fleet`.
                  type: boolean
                fleetServerRef:
                  description: FleetServerRef is a reference to Fleet Server that this Agent should connect to to obtain it's configuration. Don't set unless `mode` is set to `fleet`.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                http:
                  description: HTTP holds the HTTP layer configuration for the Agent in Fleet mode with Fleet Server enabled.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the Agent Docker image to deploy. Version has to match the Agent in the image.
                  type: string
                kibanaRef:
                  description: KibanaRef is a reference to Kibana where Fleet should be set up and this Agent should be enrolled. Don't set unless `mode` is set to `fleet`.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                mode:
                  description: Mode specifies the source of configuration for the Agent. The configuration can be specified locally through `config` or `configRef` (`standalone` mode), or come from Fleet during runtime (`fleet` mode). Defaults to `standalone` mode.
                  enum:
                    - standalone
                    - fleet
                  type: string
                secureSettings:
                  description: SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Agent. Secrets data can be then referenced in the Agent config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
                  items:
                    description: SecretSource defines a data source based on a Kubernetes Secret.
                    properties:
                      entries:
                        description: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
                        items:
                          description: KeyToPath defines how to map a key in a Secret object to a filesystem path.
                          properties:
                            key:
                              description: Key is the key contained in the secret.
                              type: string
                            path:
                              description: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                      secretName:
                        description: SecretName is the name of the secret.
                        type: string
                    required:
                      - secretName
                    type: object
                  type: array
                serviceAccountName:
                  description: ServiceAccountName is used to check access from the current resource to an Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
                  type: string
                version:
                  description: Version of the Agent.
                  type: string
              required:
                - version
              type: object
            status:
              description: AgentStatus defines the observed state of the Agent
              properties:
                availableNodes:
                  format: int32
                  type: integer
                elasticsearchAssociationsStatus:
                  additionalProperties:
                    description: AssociationStatus is the status of an association resource.
                    type: string
                  description: AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
                  type: object
                expectedNodes:
                  format: int32
                  type: integer
                fleetServerAssociationStatus:
                  description: AssociationStatus is the status of an association resource.
                  type: string
                health:
                  type: string
                kibanaAssociationStatus:
                  description: AssociationStatus is the status of an association resource.
                  type: string
                version:
                  description: 'Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.'
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/eck/01-crd-eck-elasticsearch.yaml
# Elasticsearch operator CRDs
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
    helm.sh/hook: "crd-install"
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: 'elastic-operator'
    app.kubernetes.io/name: 'eck-operator-crds'
    app.kubernetes.io/version: '1.8.0'
  name: elasticsearches.elasticsearch.k8s.elastic.co
spec:
  # preserveUnknownFields - set to false to pickup udpate to v1/CRD structure
  preserveUnknownFields: false
  group: elasticsearch.k8s.elastic.co
  names:
    categories:
      - elastic
    kind: Elasticsearch
    listKind: ElasticsearchList
    plural: elasticsearches
    shortNames:
      - es
    singular: elasticsearch
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: Elasticsearch version
          jsonPath: .status.version
          name: version
          type: string
        - jsonPath: .status.phase
          name: phase
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ElasticsearchSpec holds the specification of an Elasticsearch cluster.
              properties:
                auth:
                  description: Auth contains user authentication and authorization security settings for Elasticsearch.
                  properties:
                    fileRealm:
                      description: FileRealm to propagate to the Elasticsearch cluster.
                      items:
                        description: FileRealmSource references users to create in the Elasticsearch cluster.
                        properties:
                          secretName:
                            description: SecretName is the name of the secret.
                            type: string
                        type: object
                      type: array
                    roles:
                      description: Roles to propagate to the Elasticsearch cluster.
                      items:
                        description: RoleSource references roles to create in the Elasticsearch cluster.
                        properties:
                          secretName:
                            description: SecretName is the name of the secret.
                            type: string
                        type: object
                      type: array
                  type: object
                http:
                  description: HTTP holds HTTP layer settings for Elasticsearch.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the Elasticsearch Docker image to deploy.
                  type: string
                monitoring:
                  description: Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster. See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html. Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different Elasticsearch monitoring clusters running in the same Kubernetes cluster.
                  properties:
                    logs:
                      description: Logs holds references to Elasticsearch clusters which receive log data from this Elasticsearch cluster.
                      properties:
                        elasticsearchRefs:
                          description: ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single Elasticsearch cluster is currently supported.
                          items:
                            description: ObjectSelector defines a reference to a Kubernetes object.
                            properties:
                              name:
                                description: Name of the Kubernetes object.
                                type: string
                              namespace:
                                description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                                type: string
                              serviceName:
                                description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                                type: string
                            required:
                              - name
                            type: object
                          type: array
                      type: object
                    metrics:
                      description: Metrics holds references to Elasticsearch clusters which receive monitoring data from this Elasticsearch cluster.
                      properties:
                        elasticsearchRefs:
                          description: ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single Elasticsearch cluster is currently supported.
                          items:
                            description: ObjectSelector defines a reference to a Kubernetes object.
                            properties:
                              name:
                                description: Name of the Kubernetes object.
                                type: string
                              namespace:
                                description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                                type: string
                              serviceName:
                                description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                                type: string
                            required:
                              - name
                            type: object
                          type: array
                      type: object
                  type: object
                nodeSets:
                  description: NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
                  items:
                    description: NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
                    properties:
                      config:
                        description: Config holds the Elasticsearch configuration.
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                      count:
                        description: Count of Elasticsearch nodes to deploy. If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
                        format: int32
                        type: integer
                      name:
                        description: Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
                        maxLength: 23
                        pattern: '[a-zA-Z0-9-]+'
                        type: string
                      podTemplate:
                        description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                      volumeClaimTemplates:
                        description: VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name.
                        items:
                          description: PersistentVolumeClaim is a user's request for and claim to a persistent volume
                          properties:
                            apiVersion:
                              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                              type: string
                            kind:
                              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            metadata:
                              description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  type: object
                                finalizers:
                                  items:
                                    type: string
                                  type: array
                                labels:
                                  additionalProperties:
                                    type: string
                                  type: object
                                name:
                                  type: string
                                namespace:
                                  type: string
                              type: object
                            spec:
                              description: 'Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                              properties:
                                accessModes:
                                  description: 'AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                  items:
                                    type: string
                                  type: array
                                dataSource:
                                  description: 'This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.'
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being referenced
                                      type: string
                                  required:
                                    - kind
                                    - name
                                  type: object
                                resources:
                                  description: 'Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                  properties:
                                    limits:
                                      additionalProperties:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                    requests:
                                      additionalProperties:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                  type: object
                                selector:
                                  description: A label query over volumes to consider for binding.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                          - key
                                          - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                storageClassName:
                                  description: 'Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                  type: string
                                volumeMode:
                                  description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                                  type: string
                                volumeName:
                                  description: VolumeName is the binding reference to the PersistentVolume backing this claim.
                                  type: string
                              type: object
                            status:
                              description: 'Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                              properties:
                                accessModes:
                                  description: 'AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                  items:
                                    type: string
                                  type: array
                                capacity:
                                  additionalProperties:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  description: Represents the actual resources of the underlying volume.
                                  type: object
                                conditions:
                                  description: Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
                                  items:
                                    description: PersistentVolumeClaimCondition contails details about state of pvc
                                    properties:
                                      lastProbeTime:
                                        description: Last time we probed the condition.
                                        format: date-time
                                        type: string
                                      lastTransitionTime:
                                        description: Last time the condition transitioned from one status to another.
                                        format: date-time
                                        type: string
                                      message:
                                        description: Human-readable message indicating details about last transition.
                                        type: string
                                      reason:
                                        description: Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
                                        type: string
                                      status:
                                        type: string
                                      type:
                                        description: PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
                                        type: string
                                    required:
                                      - status
                                      - type
                                    type: object
                                  type: array
                                phase:
                                  description: Phase represents the current phase of PersistentVolumeClaim.
                                  type: string
                              type: object
                          type: object
                        type: array
                    required:
                      - name
                    type: object
                  minItems: 1
                  type: array
                podDisruptionBudget:
                  description: PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
                  properties:
                    metadata:
                      description: ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          type: object
                        finalizers:
                          items:
                            type: string
                          type: array
                        labels:
                          additionalProperties:
                            type: string
                          type: object
                        name:
                          type: string
                        namespace:
                          type: string
                      type: object
                    spec:
                      description: Spec is the specification of the PDB.
                      properties:
                        maxUnavailable:
                          anyOf:
                            - type: integer
                            - type: string
                          description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
                          x-kubernetes-int-or-string: true
                        minAvailable:
                          anyOf:
                            - type: integer
                            - type: string
                          description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
                          x-kubernetes-int-or-string: true
                        selector:
                          description: Label query over pods whose evictions are managed by the disruption budget. A null selector selects no pods. An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods. In policy/v1, an empty selector will select all pods in the namespace.
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                      type: object
                  type: object
                remoteClusters:
                  description: RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
                  items:
                    description: RemoteCluster declares a remote Elasticsearch cluster connection.
                    properties:
                      elasticsearchRef:
                        description: ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
                        properties:
                          name:
                            description: Name of the Kubernetes object.
                            type: string
                          namespace:
                            description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                            type: string
                          serviceName:
                            description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                            type: string
                        required:
                          - name
                        type: object
                      name:
                        description: Name is the name of the remote cluster as it is set in the Elasticsearch settings. The name is expected to be unique for each remote clusters.
                        minLength: 1
                        type: string
                    required:
                      - name
                    type: object
                  type: array
                secureSettings:
                  description: SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
                  items:
                    description: SecretSource defines a data source based on a Kubernetes Secret.
                    properties:
                      entries:
                        description: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
                        items:
                          description: KeyToPath defines how to map a key in a Secret object to a filesystem path.
                          properties:
                            key:
                              description: Key is the key contained in the secret.
                              type: string
                            path:
                              description: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                      secretName:
                        description: SecretName is the name of the secret.
                        type: string
                    required:
                      - secretName
                    type: object
                  type: array
                serviceAccountName:
                  description: ServiceAccountName is used to check access from the current resource to a resource (eg. a remote Elasticsearch cluster) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
                  type: string
                transport:
                  description: Transport holds transport layer settings for Elasticsearch.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS on the transport layer.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the CA certificate and private key for generating node certificates. The referenced secret should contain the following: \n - `ca.crt`: The CA certificate in PEM format. - `ca.key`: The private key for the CA certificate in PEM format."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        subjectAltNames:
                          description: SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
                          items:
                            description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                            properties:
                              dns:
                                description: DNS is the DNS name of the subject.
                                type: string
                              ip:
                                description: IP is the IP address of the subject.
                                type: string
                            type: object
                          type: array
                      type: object
                  type: object
                updateStrategy:
                  description: UpdateStrategy specifies how updates to the cluster should be performed.
                  properties:
                    changeBudget:
                      description: ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
                      properties:
                        maxSurge:
                          description: MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.
                          format: int32
                          type: integer
                        maxUnavailable:
                          description: MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.
                          format: int32
                          type: integer
                      type: object
                  type: object
                version:
                  description: Version of Elasticsearch.
                  type: string
                volumeClaimDeletePolicy:
                  description: VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets. Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
                  enum:
                    - DeleteOnScaledownOnly
                    - DeleteOnScaledownAndClusterDeletion
                  type: string
              required:
                - nodeSets
                - version
              type: object
            status:
              description: ElasticsearchStatus defines the observed state of Elasticsearch
              properties:
                availableNodes:
                  description: AvailableNodes is the number of available instances.
                  format: int32
                  type: integer
                health:
                  description: ElasticsearchHealth is the health of the cluster as returned by the health API.
                  type: string
                monitoringAssociationStatus:
                  additionalProperties:
                    description: AssociationStatus is the status of an association resource.
                    type: string
                  description: AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
                  type: object
                phase:
                  description: ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
                  type: string
                version:
                  description: 'Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.'
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: Elasticsearch version
          jsonPath: .spec.version
          name: version
          type: string
        - jsonPath: .status.phase
          name: phase
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ElasticsearchSpec holds the specification of an Elasticsearch cluster.
              properties:
                http:
                  description: HTTP holds HTTP layer settings for Elasticsearch.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the Elasticsearch Docker image to deploy.
                  type: string
                nodeSets:
                  description: NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
                  items:
                    description: NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
                    properties:
                      config:
                        description: Config holds the Elasticsearch configuration.
                        type: object
                      count:
                        description: Count of Elasticsearch nodes to deploy.
                        format: int32
                        minimum: 1
                        type: integer
                      name:
                        description: Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
                        maxLength: 23
                        pattern: '[a-zA-Z0-9-]+'
                        type: string
                      podTemplate:
                        description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
                        type: object
                      volumeClaimTemplates:
                        description: VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name.
                        items:
                          description: PersistentVolumeClaim is a user's request for and claim to a persistent volume
                          properties:
                            apiVersion:
                              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                              type: string
                            kind:
                              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            metadata:
                              description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  type: object
                                finalizers:
                                  items:
                                    type: string
                                  type: array
                                labels:
                                  additionalProperties:
                                    type: string
                                  type: object
                                name:
                                  type: string
                                namespace:
                                  type: string
                              type: object
                            spec:
                              description: 'Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                              properties:
                                accessModes:
                                  description: 'AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                  items:
                                    type: string
                                  type: array
                                dataSource:
                                  description: 'This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.'
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being referenced
                                      type: string
                                  required:
                                    - kind
                                    - name
                                  type: object
                                resources:
                                  description: 'Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                  properties:
                                    limits:
                                      additionalProperties:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                    requests:
                                      additionalProperties:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                  type: object
                                selector:
                                  description: A label query over volumes to consider for binding.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                          - key
                                          - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                storageClassName:
                                  description: 'Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                  type: string
                                volumeMode:
                                  description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                                  type: string
                                volumeName:
                                  description: VolumeName is the binding reference to the PersistentVolume backing this claim.
                                  type: string
                              type: object
                            status:
                              description: 'Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                              properties:
                                accessModes:
                                  description: 'AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                  items:
                                    type: string
                                  type: array
                                capacity:
                                  additionalProperties:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  description: Represents the actual resources of the underlying volume.
                                  type: object
                                conditions:
                                  description: Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
                                  items:
                                    description: PersistentVolumeClaimCondition contails details about state of pvc
                                    properties:
                                      lastProbeTime:
                                        description: Last time we probed the condition.
                                        format: date-time
                                        type: string
                                      lastTransitionTime:
                                        description: Last time the condition transitioned from one status to another.
                                        format: date-time
                                        type: string
                                      message:
                                        description: Human-readable message indicating details about last transition.
                                        type: string
                                      reason:
                                        description: Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
                                        type: string
                                      status:
                                        type: string
                                      type:
                                        description: PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
                                        type: string
                                    required:
                                      - status
                                      - type
                                    type: object
                                  type: array
                                phase:
                                  description: Phase represents the current phase of PersistentVolumeClaim.
                                  type: string
                              type: object
                          type: object
                        type: array
                    required:
                      - count
                      - name
                    type: object
                  minItems: 1
                  type: array
                podDisruptionBudget:
                  description: PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
                  properties:
                    metadata:
                      description: ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          type: object
                        finalizers:
                          items:
                            type: string
                          type: array
                        labels:
                          additionalProperties:
                            type: string
                          type: object
                        name:
                          type: string
                        namespace:
                          type: string
                      type: object
                    spec:
                      description: Spec is the specification of the PDB.
                      properties:
                        maxUnavailable:
                          anyOf:
                            - type: integer
                            - type: string
                          description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
                          x-kubernetes-int-or-string: true
                        minAvailable:
                          anyOf:
                            - type: integer
                            - type: string
                          description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
                          x-kubernetes-int-or-string: true
                        selector:
                          description: Label query over pods whose evictions are managed by the disruption budget. A null selector selects no pods. An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods. In policy/v1, an empty selector will select all pods in the namespace.
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                      type: object
                  type: object
                secureSettings:
                  description: SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
                  items:
                    description: SecretSource defines a data source based on a Kubernetes Secret.
                    properties:
                      entries:
                        description: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
                        items:
                          description: KeyToPath defines how to map a key in a Secret object to a filesystem path.
                          properties:
                            key:
                              description: Key is the key contained in the secret.
                              type: string
                            path:
                              description: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                      secretName:
                        description: SecretName is the name of the secret.
                        type: string
                    required:
                      - secretName
                    type: object
                  type: array
                updateStrategy:
                  description: UpdateStrategy specifies how updates to the cluster should be performed.
                  properties:
                    changeBudget:
                      description: ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
                      properties:
                        maxSurge:
                          description: MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.
                          format: int32
                          type: integer
                        maxUnavailable:
                          description: MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.
                          format: int32
                          type: integer
                      type: object
                  type: object
                version:
                  description: Version of Elasticsearch.
                  type: string
              required:
                - nodeSets
              type: object
            status:
              description: ElasticsearchStatus defines the observed state of Elasticsearch
              properties:
                availableNodes:
                  format: int32
                  type: integer
                health:
                  description: ElasticsearchHealth is the health of the cluster as returned by the health API.
                  type: string
                phase:
                  description: ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
                  type: string
              type: object
          type: object
      served: true
      storage: false
      subresources:
        status: {}
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: to not break compatibility when upgrading from previous versions of the CRD
          type: object
      served: false
      storage: false
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/eck/01-crd-eck-kibana.yaml
# Elasticsearch operator CRDs
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
    helm.sh/hook: "crd-install"
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: 'elastic-operator'
    app.kubernetes.io/name: 'eck-operator-crds'
    app.kubernetes.io/version: '1.8.0'
  name: kibanas.kibana.k8s.elastic.co
spec:
  # preserveUnknownFields - set to false to pickup udpate to v1/CRD structure
  preserveUnknownFields: false
  group: kibana.k8s.elastic.co
  names:
    categories:
      - elastic
    kind: Kibana
    listKind: KibanaList
    plural: kibanas
    shortNames:
      - kb
    singular: kibana
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: Kibana version
          jsonPath: .status.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: Kibana represents a Kibana resource in a Kubernetes cluster.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: KibanaSpec holds the specification of a Kibana instance.
              properties:
                config:
                  description: 'Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                count:
                  description: Count of Kibana instances to deploy.
                  format: int32
                  type: integer
                elasticsearchRef:
                  description: ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                enterpriseSearchRef:
                  description: EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster. Kibana provides the default Enterprise Search UI starting version 7.14.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                http:
                  description: HTTP holds the HTTP layer configuration for Kibana.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the Kibana Docker image to deploy.
                  type: string
                monitoring:
                  description: Monitoring enables you to collect and ship log and monitoring data of this Kibana. See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html. Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different Elasticsearch monitoring clusters running in the same Kubernetes cluster.
                  properties:
                    logs:
                      description: Logs holds references to Elasticsearch clusters which will receive log data from this Kibana.
                      properties:
                        elasticsearchRefs:
                          description: ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single Elasticsearch cluster is currently supported.
                          items:
                            description: ObjectSelector defines a reference to a Kubernetes object.
                            properties:
                              name:
                                description: Name of the Kubernetes object.
                                type: string
                              namespace:
                                description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                                type: string
                              serviceName:
                                description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                                type: string
                            required:
                              - name
                            type: object
                          type: array
                      type: object
                    metrics:
                      description: Metrics holds references to Elasticsearch clusters which will receive monitoring data from this Kibana.
                      properties:
                        elasticsearchRefs:
                          description: ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single Elasticsearch cluster is currently supported.
                          items:
                            description: ObjectSelector defines a reference to a Kubernetes object.
                            properties:
                              name:
                                description: Name of the Kubernetes object.
                                type: string
                              namespace:
                                description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                                type: string
                              serviceName:
                                description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                                type: string
                            required:
                              - name
                            type: object
                          type: array
                      type: object
                  type: object
                podTemplate:
                  description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                secureSettings:
                  description: SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
                  items:
                    description: SecretSource defines a data source based on a Kubernetes Secret.
                    properties:
                      entries:
                        description: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
                        items:
                          description: KeyToPath defines how to map a key in a Secret object to a filesystem path.
                          properties:
                            key:
                              description: Key is the key contained in the secret.
                              type: string
                            path:
                              description: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                      secretName:
                        description: SecretName is the name of the secret.
                        type: string
                    required:
                      - secretName
                    type: object
                  type: array
                serviceAccountName:
                  description: ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
                  type: string
                version:
                  description: Version of Kibana.
                  type: string
              required:
                - version
              type: object
            status:
              description: KibanaStatus defines the observed state of Kibana
              properties:
                associationStatus:
                  description: AssociationStatus is the status of any auto-linking to Elasticsearch clusters. This field is deprecated and will be removed in a future release. Use ElasticsearchAssociationStatus instead.
                  type: string
                availableNodes:
                  description: AvailableNodes is the number of available replicas in the deployment.
                  format: int32
                  type: integer
                count:
                  description: Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
                  format: int32
                  type: integer
                elasticsearchAssociationStatus:
                  description: ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
                  type: string
                enterpriseSearchAssociationStatus:
                  description: EnterpriseSearchAssociationStatus is the status of any auto-linking to Enterprise Search.
                  type: string
                health:
                  description: Health of the deployment.
                  type: string
                monitoringAssociationStatus:
                  additionalProperties:
                    description: AssociationStatus is the status of an association resource.
                    type: string
                  description: MonitoringAssociationStatus is the status of any auto-linking to monitoring Elasticsearch clusters.
                  type: object
                selector:
                  description: Selector is the label selector used to find all pods.
                  type: string
                version:
                  description: 'Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.'
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        scale:
          labelSelectorPath: .status.selector
          specReplicasPath: .spec.count
          statusReplicasPath: .status.count
        status: {}
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: Kibana version
          jsonPath: .spec.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: Kibana represents a Kibana resource in a Kubernetes cluster.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: KibanaSpec holds the specification of a Kibana instance.
              properties:
                config:
                  description: 'Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                count:
                  description: Count of Kibana instances to deploy.
                  format: int32
                  type: integer
                elasticsearchRef:
                  description: ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                  required:
                    - name
                  type: object
                http:
                  description: HTTP holds the HTTP layer configuration for Kibana.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the Kibana Docker image to deploy.
                  type: string
                podTemplate:
                  description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                secureSettings:
                  description: SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
                  items:
                    description: SecretSource defines a data source based on a Kubernetes Secret.
                    properties:
                      entries:
                        description: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
                        items:
                          description: KeyToPath defines how to map a key in a Secret object to a filesystem path.
                          properties:
                            key:
                              description: Key is the key contained in the secret.
                              type: string
                            path:
                              description: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                      secretName:
                        description: SecretName is the name of the secret.
                        type: string
                    required:
                      - secretName
                    type: object
                  type: array
                version:
                  description: Version of Kibana.
                  type: string
              type: object
            status:
              description: KibanaStatus defines the observed state of Kibana
              properties:
                associationStatus:
                  description: AssociationStatus is the status of an association resource.
                  type: string
                availableNodes:
                  format: int32
                  type: integer
                health:
                  description: KibanaHealth expresses the status of the Kibana instances.
                  type: string
              type: object
          type: object
      served: true
      storage: false
      subresources:
        status: {}
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: to not break compatibility when upgrading from previous versions of the CRD
          type: object
      served: false
      storage: false
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/eck/01-crd-eck-apmserver.yaml
# Elasticsearch operator CRDs
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
    helm.sh/hook: "crd-install"
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: 'elastic-operator'
    app.kubernetes.io/name: 'eck-operator-crds'
    app.kubernetes.io/version: '1.8.0'
  name: apmservers.apm.k8s.elastic.co
spec:
  # preserveUnknownFields - set to false to pickup udpate to v1/CRD structure
  preserveUnknownFields: false
  group: apm.k8s.elastic.co
  names:
    categories:
      - elastic
    kind: ApmServer
    listKind: ApmServerList
    plural: apmservers
    shortNames:
      - apm
    singular: apmserver
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: APM version
          jsonPath: .status.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: ApmServer represents an APM Server resource in a Kubernetes cluster.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ApmServerSpec holds the specification of an APM Server.
              properties:
                config:
                  description: 'Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                count:
                  description: Count of APM Server instances to deploy.
                  format: int32
                  type: integer
                elasticsearchRef:
                  description: ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                http:
                  description: HTTP holds the HTTP layer configuration for the APM Server resource.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the APM Server Docker image to deploy.
                  type: string
                kibanaRef:
                  description: KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                podTemplate:
                  description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                secureSettings:
                  description: SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
                  items:
                    description: SecretSource defines a data source based on a Kubernetes Secret.
                    properties:
                      entries:
                        description: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
                        items:
                          description: KeyToPath defines how to map a key in a Secret object to a filesystem path.
                          properties:
                            key:
                              description: Key is the key contained in the secret.
                              type: string
                            path:
                              description: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                      secretName:
                        description: SecretName is the name of the secret.
                        type: string
                    required:
                      - secretName
                    type: object
                  type: array
                serviceAccountName:
                  description: ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
                  type: string
                version:
                  description: Version of the APM Server.
                  type: string
              required:
                - version
              type: object
            status:
              description: ApmServerStatus defines the observed state of ApmServer
              properties:
                availableNodes:
                  description: AvailableNodes is the number of available replicas in the deployment.
                  format: int32
                  type: integer
                count:
                  description: Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
                  format: int32
                  type: integer
                elasticsearchAssociationStatus:
                  description: ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
                  type: string
                health:
                  description: Health of the deployment.
                  type: string
                kibanaAssociationStatus:
                  description: KibanaAssociationStatus is the status of any auto-linking to Kibana.
                  type: string
                secretTokenSecret:
                  description: SecretTokenSecretName is the name of the Secret that contains the secret token
                  type: string
                selector:
                  description: Selector is the label selector used to find all pods.
                  type: string
                service:
                  description: ExternalService is the name of the service the agents should connect to.
                  type: string
                version:
                  description: 'Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.'
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        scale:
          labelSelectorPath: .status.selector
          specReplicasPath: .spec.count
          statusReplicasPath: .status.count
        status: {}
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: APM version
          jsonPath: .spec.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: ApmServer represents an APM Server resource in a Kubernetes cluster.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ApmServerSpec holds the specification of an APM Server.
              properties:
                config:
                  description: 'Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                count:
                  description: Count of APM Server instances to deploy.
                  format: int32
                  type: integer
                elasticsearchRef:
                  description: ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                  required:
                    - name
                  type: object
                http:
                  description: HTTP holds the HTTP layer configuration for the APM Server resource.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the APM Server Docker image to deploy.
                  type: string
                podTemplate:
                  description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                secureSettings:
                  description: SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
                  items:
                    description: SecretSource defines a data source based on a Kubernetes Secret.
                    properties:
                      entries:
                        description: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
                        items:
                          description: KeyToPath defines how to map a key in a Secret object to a filesystem path.
                          properties:
                            key:
                              description: Key is the key contained in the secret.
                              type: string
                            path:
                              description: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                      secretName:
                        description: SecretName is the name of the secret.
                        type: string
                    required:
                      - secretName
                    type: object
                  type: array
                version:
                  description: Version of the APM Server.
                  type: string
              type: object
            status:
              description: ApmServerStatus defines the observed state of ApmServer
              properties:
                associationStatus:
                  description: Association is the status of any auto-linking to Elasticsearch clusters.
                  type: string
                availableNodes:
                  format: int32
                  type: integer
                health:
                  description: ApmServerHealth expresses the status of the Apm Server instances.
                  type: string
                secretTokenSecret:
                  description: SecretTokenSecretName is the name of the Secret that contains the secret token
                  type: string
                service:
                  description: ExternalService is the name of the service the agents should connect to.
                  type: string
              type: object
          type: object
      served: true
      storage: false
      subresources:
        status: {}
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: to not break compatibility when upgrading from previous versions of the CRD
          type: object
      served: false
      storage: false
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/eck/01-crd-eck-elasticmapsserver.yaml
# Elasticsearch operator CRDs
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
    helm.sh/hook: "crd-install"
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: 'elastic-operator'
    app.kubernetes.io/name: 'eck-operator-crds'
    app.kubernetes.io/version: '1.8.0'
  name: elasticmapsservers.maps.k8s.elastic.co
spec:
  # preserveUnknownFields - set to false to pickup udpate to v1/CRD structure
  preserveUnknownFields: false
  group: maps.k8s.elastic.co
  names:
    categories:
      - elastic
    kind: ElasticMapsServer
    listKind: ElasticMapsServerList
    plural: elasticmapsservers
    shortNames:
      - ems
    singular: elasticmapsserver
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.health
          name: health
          type: string
        - description: Available nodes
          jsonPath: .status.availableNodes
          name: nodes
          type: integer
        - description: ElasticMapsServer version
          jsonPath: .status.version
          name: version
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ElasticMapsServer represents an Elastic Map Server resource in a Kubernetes cluster.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: MapsSpec holds the specification of an Elastic Maps Server instance.
              properties:
                config:
                  description: 'Config holds the ElasticMapsServer configuration. See: https://www.elastic.co/guide/en/kibana/current/maps-connect-to-ems.html#elastic-maps-server-configuration'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                configRef:
                  description: ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration. Configuration settings are merged and have precedence over settings specified in `config`.
                  properties:
                    secretName:
                      description: SecretName is the name of the secret.
                      type: string
                  type: object
                count:
                  description: Count of Elastic Maps Server instances to deploy.
                  format: int32
                  type: integer
                elasticsearchRef:
                  description: ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
                  properties:
                    name:
                      description: Name of the Kubernetes object.
                      type: string
                    namespace:
                      description: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      type: string
                    serviceName:
                      description: ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
                      type: string
                  required:
                    - name
                  type: object
                http:
                  description: HTTP holds the HTTP layer configuration for Elastic Maps Server.
                  properties:
                    service:
                      description: Service defines the template for the associated Kubernetes Service object.
                      properties:
                        metadata:
                          description: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: Spec is the specification of the service.
                          properties:
                            allocateLoadBalancerNodePorts:
                              description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                              type: boolean
                            clusterIP:
                              description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            clusterIPs:
                              description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. \n Unless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            externalIPs:
                              description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                              items:
                                type: string
                              type: array
                            externalName:
                              description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              type: string
                            externalTrafficPolicy:
                              description: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                              type: string
                            healthCheckNodePort:
                              description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                              format: int32
                              type: integer
                            internalTrafficPolicy:
                              description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
                              type: string
                            ipFamilies:
                              description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName. \n This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field."
                              items:
                                description: IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            ipFamilyPolicy:
                              description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                              type: string
                            loadBalancerClass:
                              description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              type: string
                            loadBalancerIP:
                              description: 'Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.'
                              type: string
                            loadBalancerSourceRanges:
                              description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                              items:
                                type: string
                              type: array
                            ports:
                              description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              items:
                                description: ServicePort contains information on service's port.
                                properties:
                                  appProtocol:
                                    description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                                    type: string
                                  name:
                                    description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                                    type: string
                                  nodePort:
                                    description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                    format: int32
                                    type: integer
                                  port:
                                    description: The port that will be exposed by this service.
                                    format: int32
                                    type: integer
                                  protocol:
                                    default: TCP
                                    description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                                    type: string
                                  targetPort:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                                - port
                                - protocol
                              x-kubernetes-list-type: map
                            publishNotReadyAddresses:
                              description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              type: boolean
                            selector:
                              additionalProperties:
                                type: string
                              description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                              type: object
                            sessionAffinity:
                              description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                              type: string
                            sessionAffinityConfig:
                              description: sessionAffinityConfig contains the configurations of session affinity.
                              properties:
                                clientIP:
                                  description: clientIP contains the configurations of Client IP based session affinity.
                                  properties:
                                    timeoutSeconds:
                                      description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            topologyKeys:
                              description: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
                              items:
                                type: string
                              type: array
                            type:
                              description: 'type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                              type: string
                          type: object
                      type: object
                    tls:
                      description: TLS defines options for configuring TLS for HTTP.
                      properties:
                        certificate:
                          description: "Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: \n - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain."
                          properties:
                            secretName:
                              description: SecretName is the name of the secret.
                              type: string
                          type: object
                        selfSignedCertificate:
                          description: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          properties:
                            disabled:
                              description: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              type: boolean
                            subjectAltNames:
                              description: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              items:
                                description: SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                properties:
                                  dns:
                                    description: DNS is the DNS name of the subject.
                                    type: string
                                  ip:
                                    description: IP is the IP address of the subject.
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                image:
                  description: Image is the Elastic Maps Server Docker image to deploy.
                  type: string
                podTemplate:
                  description: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Elastic Maps Server pods
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                serviceAccountName:
                  description: ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
                  type: string
                version:
                  description: Version of Elastic Maps Server.
                  type: string
              required:
                - version
              type: object
            status:
              description: MapsStatus defines the observed state of Elastic Maps Server
              properties:
                associationStatus:
                  description: AssociationStatus is the status of an association resource.
                  type: string
                availableNodes:
                  description: AvailableNodes is the number of available replicas in the deployment.
                  format: int32
                  type: integer
                count:
                  description: Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
                  format: int32
                  type: integer
                health:
                  description: Health of the deployment.
                  type: string
                selector:
                  description: Selector is the label selector used to find all pods.
                  type: string
                version:
                  description: 'Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.'
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        scale:
          labelSelectorPath: .status.selector
          specReplicasPath: .spec.count
          statusReplicasPath: .status.count
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

