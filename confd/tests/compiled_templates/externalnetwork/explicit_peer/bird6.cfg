function apply_communities ()
{
}

template kernel kernel_template {
  learn;             # Learn all alien routes from the kernel
  persist;           # Don't remove routes on bird shutdown
  scan time 2;       # Scan kernel routing table every 2 seconds
  import all;
}

template direct direct_template {
  debug { states };
  interface -"cali*", -"kube-ipvs*", "*"; # Exclude cali* and kube-ipvs* but
                                          # include everything else.  In
                                          # IPVS-mode, kube-proxy creates a
                                          # kube-ipvs0 interface. We exclude
                                          # kube-ipvs0 because this interface
                                          # gets an address for every in use
                                          # cluster IP. We use static routes
                                          # for when we legitimately want to
                                          # export cluster IPs.
}

# Generated by confd
include "bird6_aggr.cfg";
include "bird6_ipam.cfg";

# ------------- External Networks -------------
# ExternalNetwork test-enet-1
table 'T_test-enet-1';
protocol kernel 'K_test-enet-1' from kernel_template {
  device routes yes;
  table 'T_test-enet-1';
  kernel table 7;
  export filter {
    print "route: ", net, ", from, ", ", ", proto, ", ", bgp_next_hop;
    if proto = "Node_2001__102" then accept;
    reject;
  };
}
protocol direct 'D_test-enet-1' from direct_template {
  table 'T_test-enet-1';
}
protocol static 'S_test-enet-1' from static_template {
  table 'T_test-enet-1';
}
# ExternalNetwork test-enet-2
table 'T_test-enet-2';
protocol kernel 'K_test-enet-2' from kernel_template {
  device routes yes;
  table 'T_test-enet-2';
  kernel table 4;
  export filter {
    print "route: ", net, ", from, ", ", ", proto, ", ", bgp_next_hop;
    if proto = "Node_2001__104" then accept;
    reject;
  };
}
protocol direct 'D_test-enet-2' from direct_template {
  table 'T_test-enet-2';
}
protocol static 'S_test-enet-2' from static_template {
  table 'T_test-enet-2';
}

router id 10.192.0.2;  # Use IPv4 address since router id is 4 octets, even in MP-BGP

# Configure synchronization between routing tables and kernel.
protocol kernel from kernel_template {
  export filter calico_kernel_programming; # Default is export none
  graceful restart;  # Turn on graceful restart to reduce potential flaps in
                     # routes when reloading BIRD configuration.  With a full
                     # automatic mesh, there is no way to prevent BGP from
                     # flapping since multiple nodes update their BGP
                     # configuration at the same time, GR is not guaranteed to
                     # work correctly in this scenario.
  merge paths on;    # Allow export multipath routes (ECMP)
}

# Watch interface up/down events.
protocol device {
  debug { states };
  scan time 2;    # Scan interfaces every 2 seconds
}

protocol direct from direct_template {
}

protocol bfd {
}


# Template for all BGP clients
template bgp bgp_template {
  debug { states, routes, filters, events };
  description "Connection to BGP peer";
  local as 64512;
  add paths on;
  graceful restart;  # See comment in kernel section about graceful restart.
  connect delay time 2;
  connect retry time 5;
  error wait time 5,30;
}

# -------------- BGP Filters ------------------
# No v6 BGPFilters configured

# ------------- Node-to-node mesh -------------

# Node-to-node mesh disabled



# ------------- Global peers -------------
# No global peers configured.


# ------------- Node-specific peers -------------




# For peer /bgp/v1/host/kube-master/peer_v6/2001::102
protocol bgp Node_2001__102 from bgp_template {
  neighbor 2001::102 as 64517;
  source address 2001::103;  # The local address we use for the TCP connection
  ttl security off;
  multihop;
  import filter {
    accept;
  };
  export filter {
    calico_export_to_bgp_peers();
    reject;
  };  # Only want to export routes for workloads.
  gateway recursive;
  table 'T_test-enet-1';
}


# For peer /bgp/v1/host/kube-master/peer_v6/2001::104
protocol bgp Node_2001__104 from bgp_template {
  neighbor 2001::104 as 64517;
  source address 2001::103;  # The local address we use for the TCP connection
  ttl security off;
  multihop;
  import filter {
    accept;
  };
  export filter {
    calico_export_to_bgp_peers();
    reject;
  };  # Only want to export routes for workloads.
  gateway recursive;
  table 'T_test-enet-2';
}



