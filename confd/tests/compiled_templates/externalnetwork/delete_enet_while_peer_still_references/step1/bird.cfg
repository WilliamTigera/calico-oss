function apply_communities ()
{
}

template kernel kernel_template {
  learn;             # Learn all alien routes from the kernel
  persist;           # Don't remove routes on bird shutdown
  scan time 2;       # Scan kernel routing table every 2 seconds
  import all;
}

template direct direct_template {
  debug { states };
  interface -"cali*", -"kube-ipvs*", "*"; # Exclude cali* and kube-ipvs* but
                                          # include everything else.  In
                                          # IPVS-mode, kube-proxy creates a
                                          # kube-ipvs0 interface. We exclude
                                          # kube-ipvs0 because this interface
                                          # gets an address for every in use
                                          # cluster IP. We use static routes
                                          # for when we legitimately want to
                                          # export cluster IPs.
}

# Generated by confd
include "bird_aggr.cfg";
include "bird_ipam.cfg";

# ------------- External Networks -------------
# ExternalNetwork test-enet
table 'T_test-enet';
protocol kernel 'K_test-enet' from kernel_template {
  device routes yes;
  table 'T_test-enet';
  kernel table 7;
  export filter {
    print "route: ", net, ", from, ", ", ", proto, ", ", bgp_next_hop;
    if proto = "Global_10_192_0_3" then accept;
    reject;
  };
}
protocol direct 'D_test-enet' from direct_template {
  table 'T_test-enet';
}
protocol static 'S_test-enet' from static_template {
  table 'T_test-enet';
}

router id 10.192.0.2;

# Configure synchronization between routing tables and kernel.
protocol kernel from kernel_template {
  export filter calico_kernel_programming; # Default is export none
  graceful restart;  # Turn on graceful restart to reduce potential flaps in
                     # routes when reloading BIRD configuration.  With a full
                     # automatic mesh, there is no way to prevent BGP from
                     # flapping since multiple nodes update their BGP
                     # configuration at the same time, GR is not guaranteed to
                     # work correctly in this scenario.
  merge paths on;    # Allow export multipath routes (ECMP)
}

# Watch interface up/down events.
protocol device {
  debug { states };
  scan time 2;    # Scan interfaces every 2 seconds
}

protocol direct from direct_template {
}

protocol bfd {
}


# Template for all BGP clients
template bgp bgp_template {
  debug { states, routes, filters, events };
  description "Connection to BGP peer";
  local as 64512;
  add paths on;
  graceful restart;  # See comment in kernel section about graceful restart.
  connect delay time 2;
  connect retry time 5;
  error wait time 5,30;
}

# -------------- BGP Filters ------------------
# No v4 BGPFilters configured

# ------------- Node-to-node mesh -------------

# Node-to-node mesh disabled



# ------------- Global peers -------------



# For peer /bgp/v1/global/peer_v4/10.192.0.3
protocol bgp Global_10_192_0_3 from bgp_template {
  neighbor 10.192.0.3 as 64512;
  source address 10.192.0.2;  # The local address we use for the TCP connection
  ttl security off;
  multihop;
  import filter {
    accept;
  };
  export filter {
    calico_export_to_bgp_peers(true);
    reject;
  };  # Only want to export routes for workloads.
  gateway recursive;
  table 'T_test-enet';

}


# For peer /bgp/v1/global/peer_v4/10.192.0.4
protocol bgp Global_10_192_0_4 from bgp_template {
  neighbor 10.192.0.4 as 64512;
  source address 10.192.0.2;  # The local address we use for the TCP connection
  ttl security off;
  multihop;
  import filter {
    accept;
  };
  export filter {
    calico_export_to_bgp_peers(true);
    reject;
  };  # Only want to export routes for workloads.
  gateway recursive;
}




# ------------- Node-specific peers -------------

# No node-specific peers configured.

