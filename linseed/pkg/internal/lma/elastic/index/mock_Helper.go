// Code generated by mockery v2.46.3. DO NOT EDIT.

package index

import (
	elastic "github.com/olivere/elastic/v7"
	mock "github.com/stretchr/testify/mock"
	v3 "github.com/tigera/api/pkg/apis/projectcalico/v3"

	api "github.com/projectcalico/calico/linseed/pkg/backend/api"
	v1 "github.com/projectcalico/calico/lma/pkg/apis/v1"
)

// MockHelper is an autogenerated mock type for the Helper type
type MockHelper struct {
	mock.Mock
}

// BaseQuery provides a mock function with given fields: i
func (_m *MockHelper) BaseQuery(i api.ClusterInfo) *elastic.BoolQuery {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for BaseQuery")
	}

	var r0 *elastic.BoolQuery
	if rf, ok := ret.Get(0).(func(api.ClusterInfo) *elastic.BoolQuery); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.BoolQuery)
		}
	}

	return r0
}

// GetTimeField provides a mock function with given fields:
func (_m *MockHelper) GetTimeField() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTimeField")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewRBACQuery provides a mock function with given fields: resources
func (_m *MockHelper) NewRBACQuery(resources []v3.AuthorizedResourceVerbs) (elastic.Query, error) {
	ret := _m.Called(resources)

	if len(ret) == 0 {
		panic("no return value specified for NewRBACQuery")
	}

	var r0 elastic.Query
	var r1 error
	if rf, ok := ret.Get(0).(func([]v3.AuthorizedResourceVerbs) (elastic.Query, error)); ok {
		return rf(resources)
	}
	if rf, ok := ret.Get(0).(func([]v3.AuthorizedResourceVerbs) elastic.Query); ok {
		r0 = rf(resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elastic.Query)
		}
	}

	if rf, ok := ret.Get(1).(func([]v3.AuthorizedResourceVerbs) error); ok {
		r1 = rf(resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSelectorQuery provides a mock function with given fields: selector
func (_m *MockHelper) NewSelectorQuery(selector string) (elastic.Query, error) {
	ret := _m.Called(selector)

	if len(ret) == 0 {
		panic("no return value specified for NewSelectorQuery")
	}

	var r0 elastic.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (elastic.Query, error)); ok {
		return rf(selector)
	}
	if rf, ok := ret.Get(0).(func(string) elastic.Query); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elastic.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTimeRangeQuery provides a mock function with given fields: r
func (_m *MockHelper) NewTimeRangeQuery(r *v1.TimeRange) elastic.Query {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for NewTimeRangeQuery")
	}

	var r0 elastic.Query
	if rf, ok := ret.Get(0).(func(*v1.TimeRange) elastic.Query); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elastic.Query)
		}
	}

	return r0
}

// NewMockHelper creates a new instance of MockHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHelper {
	mock := &MockHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
