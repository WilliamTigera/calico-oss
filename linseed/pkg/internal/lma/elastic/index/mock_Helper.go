// Code generated by mockery v2.14.0. DO NOT EDIT.

package index

import (
	elastic "github.com/olivere/elastic/v7"
	mock "github.com/stretchr/testify/mock"

	time "time"

	v3 "github.com/tigera/api/pkg/apis/projectcalico/v3"
)

// MockHelper is an autogenerated mock type for the Helper type
type MockHelper struct {
	mock.Mock
}

// GetIndex provides a mock function with given fields: cluster
func (_m *MockHelper) GetIndex(cluster string) string {
	ret := _m.Called(cluster)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTimeField provides a mock function with given fields:
func (_m *MockHelper) GetTimeField() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewRBACQuery provides a mock function with given fields: resources
func (_m *MockHelper) NewRBACQuery(resources []v3.AuthorizedResourceVerbs) (elastic.Query, error) {
	ret := _m.Called(resources)

	var r0 elastic.Query
	if rf, ok := ret.Get(0).(func([]v3.AuthorizedResourceVerbs) elastic.Query); ok {
		r0 = rf(resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elastic.Query)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]v3.AuthorizedResourceVerbs) error); ok {
		r1 = rf(resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSelectorQuery provides a mock function with given fields: selector
func (_m *MockHelper) NewSelectorQuery(selector string) (elastic.Query, error) {
	ret := _m.Called(selector)

	var r0 elastic.Query
	if rf, ok := ret.Get(0).(func(string) elastic.Query); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elastic.Query)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTimeRangeQuery provides a mock function with given fields: from, to
func (_m *MockHelper) NewTimeRangeQuery(from time.Time, to time.Time) elastic.Query {
	ret := _m.Called(from, to)

	var r0 elastic.Query
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) elastic.Query); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elastic.Query)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHelper creates a new instance of MockHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHelper(t mockConstructorTestingTNewMockHelper) *MockHelper {
	mock := &MockHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
