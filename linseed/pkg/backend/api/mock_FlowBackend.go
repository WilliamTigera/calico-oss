// Code generated by mockery v2.14.0. DO NOT EDIT.

package api

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/projectcalico/calico/linseed/pkg/apis/v1"
)

// MockFlowBackend is an autogenerated mock type for the FlowBackend type
type MockFlowBackend struct {
	mock.Mock
}

// Initialize provides a mock function with given fields: ctx
func (_m *MockFlowBackend) Initialize(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, i, opts
func (_m *MockFlowBackend) List(ctx context.Context, i ClusterInfo, opts v1.L3FlowParams) ([]v1.L3Flow, error) {
	ret := _m.Called(ctx, i, opts)

	var r0 []v1.L3Flow
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, v1.L3FlowParams) []v1.L3Flow); ok {
		r0 = rf(ctx, i, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.L3Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, v1.L3FlowParams) error); ok {
		r1 = rf(ctx, i, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockFlowBackend interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFlowBackend creates a new instance of MockFlowBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFlowBackend(t mockConstructorTestingTNewMockFlowBackend) *MockFlowBackend {
	mock := &MockFlowBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
