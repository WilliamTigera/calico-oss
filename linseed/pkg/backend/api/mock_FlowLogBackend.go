// Code generated by mockery v2.46.3. DO NOT EDIT.

package api

import (
	context "context"

	elastic "github.com/olivere/elastic/v7"
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/projectcalico/calico/linseed/pkg/apis/v1"
)

// MockFlowLogBackend is an autogenerated mock type for the FlowLogBackend type
type MockFlowLogBackend struct {
	mock.Mock
}

// Aggregations provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFlowLogBackend) Aggregations(_a0 context.Context, _a1 ClusterInfo, _a2 *v1.FlowLogAggregationParams) (*elastic.Aggregations, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Aggregations")
	}

	var r0 *elastic.Aggregations
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, *v1.FlowLogAggregationParams) (*elastic.Aggregations, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, *v1.FlowLogAggregationParams) *elastic.Aggregations); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.Aggregations)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, *v1.FlowLogAggregationParams) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFlowLogBackend) Create(_a0 context.Context, _a1 ClusterInfo, _a2 []v1.FlowLog) (*v1.BulkResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.BulkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, []v1.FlowLog) (*v1.BulkResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, []v1.FlowLog) *v1.BulkResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BulkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, []v1.FlowLog) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFlowLogBackend) List(_a0 context.Context, _a1 ClusterInfo, _a2 *v1.FlowLogParams) (*v1.List[v1.FlowLog], error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.List[v1.FlowLog]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, *v1.FlowLogParams) (*v1.List[v1.FlowLog], error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, *v1.FlowLogParams) *v1.List[v1.FlowLog]); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.List[v1.FlowLog])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, *v1.FlowLogParams) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockFlowLogBackend creates a new instance of MockFlowLogBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFlowLogBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFlowLogBackend {
	mock := &MockFlowLogBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
