// Code generated by mockery v2.14.0. DO NOT EDIT.

package api

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/projectcalico/calico/linseed/pkg/apis/v1"
)

// MockDNSFlowBackend is an autogenerated mock type for the DNSFlowBackend type
type MockDNSFlowBackend struct {
	mock.Mock
}

// List provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDNSFlowBackend) List(_a0 context.Context, _a1 ClusterInfo, _a2 v1.DNSFlowParams) (*v1.List[v1.DNSFlow], error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *v1.List[v1.DNSFlow]
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, v1.DNSFlowParams) *v1.List[v1.DNSFlow]); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.List[v1.DNSFlow])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, v1.DNSFlowParams) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockDNSFlowBackend interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDNSFlowBackend creates a new instance of MockDNSFlowBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDNSFlowBackend(t mockConstructorTestingTNewMockDNSFlowBackend) *MockDNSFlowBackend {
	mock := &MockDNSFlowBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
