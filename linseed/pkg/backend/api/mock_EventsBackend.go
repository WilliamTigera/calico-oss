// Code generated by mockery v2.46.3. DO NOT EDIT.

package api

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/projectcalico/calico/linseed/pkg/apis/v1"
)

// MockEventsBackend is an autogenerated mock type for the EventsBackend type
type MockEventsBackend struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventsBackend) Create(_a0 context.Context, _a1 ClusterInfo, _a2 []v1.Event) (*v1.BulkResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.BulkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, []v1.Event) (*v1.BulkResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, []v1.Event) *v1.BulkResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BulkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, []v1.Event) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventsBackend) Delete(_a0 context.Context, _a1 ClusterInfo, _a2 []v1.Event) (*v1.BulkResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.BulkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, []v1.Event) (*v1.BulkResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, []v1.Event) *v1.BulkResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BulkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, []v1.Event) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventsBackend) List(_a0 context.Context, _a1 ClusterInfo, _a2 *v1.EventParams) (*v1.List[v1.Event], error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.List[v1.Event]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, *v1.EventParams) (*v1.List[v1.Event], error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, *v1.EventParams) *v1.List[v1.Event]); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.List[v1.Event])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, *v1.EventParams) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Statistics provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventsBackend) Statistics(_a0 context.Context, _a1 ClusterInfo, _a2 *v1.EventStatisticsParams) (*v1.EventStatistics, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Statistics")
	}

	var r0 *v1.EventStatistics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, *v1.EventStatisticsParams) (*v1.EventStatistics, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, *v1.EventStatisticsParams) *v1.EventStatistics); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.EventStatistics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, *v1.EventStatisticsParams) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDismissFlag provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventsBackend) UpdateDismissFlag(_a0 context.Context, _a1 ClusterInfo, _a2 []v1.Event) (*v1.BulkResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDismissFlag")
	}

	var r0 *v1.BulkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, []v1.Event) (*v1.BulkResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClusterInfo, []v1.Event) *v1.BulkResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BulkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClusterInfo, []v1.Event) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockEventsBackend creates a new instance of MockEventsBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventsBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventsBackend {
	mock := &MockEventsBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
