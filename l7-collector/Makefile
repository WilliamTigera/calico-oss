##############################################################################
# Copyright 2020-2022 Tigera Inc. All rights reserved.
##############################################################################
include ../metadata.mk

PACKAGE_NAME          ?= github.com/projectcalico/calico/l7-collector

L7_COLLECTOR_IMAGE    ?=l7-collector
ENVOY_IMAGE           ?=envoy
ENVOY_INIT_IMAGE      ?=envoy-init
BUILD_IMAGES          ?=$(L7_COLLECTOR_IMAGE) $(ENVOY_IMAGE) $(ENVOY_INIT_IMAGE)

##############################################################################
# Include ../lib.Makefile before anything else
#   Additions to EXTRA_DOCKER_ARGS need to happen before the include since
#   that variable is evaluated when we declare DOCKER_RUN and siblings.
##############################################################################
include ../lib.Makefile

SRC_FILES=$(shell find cmd pkg uds -name '*.go') \
		$(shell find ../libcalico-go/lib -name '*.go')

LDFLAGS = -X main.VERSION=$(GIT_VERSION) \
			-X main.BUILD_DATE=$(DATE) \
			-X main.GIT_DESCRIPTION=$(GIT_DESCRIPTION) \
			-X main.GIT_REVISION=$(GIT_COMMIT)

###############################################################################
# Building the binary
###############################################################################
build: bin/l7-collector-$(ARCH)

.PHONY: bin/l7-collector-$(ARCH)
bin/l7-collector-$(ARCH): $(SRC_FILES)
ifeq ($(FIPS),true)
	$(call build_cgo_boring_binary, cmd/l7-collector/*.go, $@)
else
	$(call build_binary, cmd/l7-collector/*.go, $@)
endif

###############################################################################
# Building the image
###############################################################################
L7_COLLECTOR_CONTAINER_CREATED=.l7-collector.created-$(ARCH)
ENVOY_IMAGE_CREATED=.envoy.created-$(ARCH)
ENVOY_INIT_CONTAINER_CREATED=.envoy-init.created-$(ARCH)

.PHONY: image-all
image-all: $(addprefix sub-image-,$(VALIDARCHES))
sub-image-%:
	$(MAKE) image ARCH=$*

.PHONY: image
image: $(L7_COLLECTOR_IMAGE) $(ENVOY_IMAGE) $(ENVOY_INIT_IMAGE)

$(L7_COLLECTOR_IMAGE): $(L7_COLLECTOR_CONTAINER_CREATED)
$(L7_COLLECTOR_CONTAINER_CREATED): Dockerfile bin/l7-collector-$(ARCH)
	$(DOCKER_BUILD) -t $(L7_COLLECTOR_IMAGE):latest-$(ARCH) -f Dockerfile .
	$(MAKE) retag-build-images-with-registries VALIDARCHES=$(ARCH) IMAGETAG=latest BUILD_IMAGES=$(L7_COLLECTOR_IMAGE)
	touch $@

$(ENVOY_IMAGE): $(ENVOY_IMAGE_CREATED)
$(ENVOY_IMAGE_CREATED): register envoy/Dockerfile
	$(DOCKER_BUILD) --build-arg THIRD_PARTY_REGISTRY=$(THIRD_PARTY_REGISTRY) \
		-t $(ENVOY_IMAGE):latest-$(ARCH) -f envoy/Dockerfile envoy
	$(MAKE) retag-build-images-with-registries VALIDARCHES=$(ARCH) IMAGETAG=latest BUILD_IMAGES=$(ENVOY_IMAGE)
	touch $@

$(ENVOY_INIT_IMAGE): $(ENVOY_INIT_CONTAINER_CREATED)
$(ENVOY_INIT_CONTAINER_CREATED): register envoy-init/Dockerfile envoy-init/init_iptables.sh
	$(DOCKER_BUILD) -t $(ENVOY_INIT_IMAGE):latest-$(ARCH) -f envoy-init/Dockerfile envoy-init
	$(MAKE) retag-build-images-with-registries VALIDARCHES=$(ARCH) IMAGETAG=latest BUILD_IMAGES=$(ENVOY_INIT_IMAGE)
	touch $@

.PHONY: clean
clean:
	rm -rf bin
	rm -f $(L7_COLLECTOR_CONTAINER_CREATED)
	rm -f $(ENVOY_INIT_CONTAINER_CREATED)

	-docker image rm -f $$(docker images $(L7_COLLECTOR_IMAGE) -a -q)
	-docker image rm -f $$(docker images $(ENVOY_INIT_IMAGE) -a -q)

###############################################################################
# UTs
###############################################################################
.PHONY: ut
ut: bin/l7-collector-$(ARCH)
	$(DOCKER_GO_BUILD) sh -c "$(GIT_CONFIG_SSH) \
	    ginkgo -r --skipPackage deps,fv -focus='$(GINKGO_FOCUS)' $(GINKGO_ARGS) $(WHAT)"

.PHONY: fv
fv: bin/l7-collector-$(ARCH)
	$(DOCKER_RUN) \
	    $(LOCAL_BUILD_MOUNTS) \
	    $(CALICO_BUILD) sh -c "$(GIT_CONFIG_SSH) \
	    ginkgo fv -r --skipPackage deps -focus='$(GINKGO_FOCUS)' $(GINKGO_ARGS) $(WHAT)"

###############################################################################
# CI/CD
###############################################################################
.PHONY: ci cd

ci: clean static-checks image ut

cd: image-all cd-common
