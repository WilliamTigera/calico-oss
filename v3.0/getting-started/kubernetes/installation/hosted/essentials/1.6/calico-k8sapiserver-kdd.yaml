---
layout: null
---
# Calico Version {{site.data.versions[page.version].first.title}}
# http://docs.projectcalico.org/{{page.version}}/releases#{{site.data.versions[page.version].first.title}}
# This manifest includes the following component versions:
#   calico/k8sapiserver:{{site.data.versions[page.version].first.components["calico/k8sapiserver"].version}}

apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-k8sapiserver-certs
  namespace: kube-system
data:
  # This self-hosted install expects three files with the following names.  The values
  # should be base64 encoded strings of the entire contents of each file.
  #apiserver.key:
  #apiserver.crt:

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-k8sapiserver
  namespace: kube-system
  labels:
    calico-k8sapiserver: "true"
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-k8sapiserver
      namespace: kube-system
      labels:
        calico-k8sapiserver: "true"
      annotations:
        # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
        # reserves resources for critical add-on pods so that they can be rescheduled after
        # a failure.  This annotation works in tandem with the toleration below.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      # Allow this pod to be rescheduled while the node is in "critical add-ons only" mode.
      # This, along with the annotation above marks this pod as a critical add-on.
      - key: CriticalAddonsOnly
        operator: Exists
      serviceAccountName: calico-k8sapiserver
      containers:
      - name: calico-k8sapiserver
        image: myregistrydomain.com:5000/calico/k8sapiserver:{{site.data.versions[page.version].first.components["calico/k8sapiserver"].version}}
        imagePullPolicy: Never
        env:
          - name: DATASTORE_TYPE
            value: "kubernetes"
        volumeMounts:
          - mountPath: /code/apiserver.local.config/certificates
            name: certs
      volumes:
        - name: certs
          secret:
            secretName: calico-k8sapiserver-certs


---

apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v2.projectcalico.org
spec:
  insecureSkipTLSVerify: true
  #caBundle:
  group: projectcalico.org
  versionPriority: 200
  groupPriorityMinimum: 200
  service:
    name: calico-k8sapiserver
    namespace: kube-system
  version: v2
---
apiVersion: v1
kind: Service
metadata:
  name: calico-k8sapiserver
  namespace: kube-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 443
  selector:
    calico-k8sapiserver: "true"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: calico:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: calico-k8sapiserver
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: calico-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: calico-k8sapiserver
  namespace: kube-system
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: calico-k8sapiserver
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: calico-k8sapiserver-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: apiserver
  namespace: calico