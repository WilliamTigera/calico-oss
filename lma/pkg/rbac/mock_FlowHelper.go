// Code generated by mockery v2.14.0. DO NOT EDIT.

package rbac

import (
	mock "github.com/stretchr/testify/mock"

	api "github.com/projectcalico/calico/lma/pkg/api"
)

// MockFlowHelper is an autogenerated mock type for the FlowHelper type
type MockFlowHelper struct {
	mock.Mock
}

// CanListEndpoint provides a mock function with given fields: _a0, _a1
func (_m *MockFlowHelper) CanListEndpoint(_a0 api.EndpointType, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(api.EndpointType, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.EndpointType, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanListGlobalNetworkSets provides a mock function with given fields:
func (_m *MockFlowHelper) CanListGlobalNetworkSets() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanListHostEndpoints provides a mock function with given fields:
func (_m *MockFlowHelper) CanListHostEndpoints() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanListNetworkSets provides a mock function with given fields: namespace
func (_m *MockFlowHelper) CanListNetworkSets(namespace string) (bool, error) {
	ret := _m.Called(namespace)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanListPods provides a mock function with given fields: namespace
func (_m *MockFlowHelper) CanListPods(namespace string) (bool, error) {
	ret := _m.Called(namespace)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanListPolicy provides a mock function with given fields: p
func (_m *MockFlowHelper) CanListPolicy(p api.PolicyHit) (bool, error) {
	ret := _m.Called(p)

	var r0 bool
	if rf, ok := ret.Get(0).(func(api.PolicyHit) bool); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.PolicyHit) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncludeGlobalNamespace provides a mock function with given fields:
func (_m *MockFlowHelper) IncludeGlobalNamespace() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncludeNamespace provides a mock function with given fields: namespace
func (_m *MockFlowHelper) IncludeNamespace(namespace string) (bool, error) {
	ret := _m.Called(namespace)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockFlowHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFlowHelper creates a new instance of MockFlowHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFlowHelper(t mockConstructorTestingTNewMockFlowHelper) *MockFlowHelper {
	mock := &MockFlowHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
