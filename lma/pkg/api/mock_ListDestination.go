// Code generated by mockery v2.3.0. DO NOT EDIT.

package api

import (
	mock "github.com/stretchr/testify/mock"
	list "github.com/tigera/lma/pkg/list"

	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockListDestination is an autogenerated mock type for the ListDestination type
type MockListDestination struct {
	mock.Mock
}

// RetrieveList provides a mock function with given fields: kind, from, to, sortAscendingTime
func (_m *MockListDestination) RetrieveList(kind v1.TypeMeta, from *time.Time, to *time.Time, sortAscendingTime bool) (*list.TimestampedResourceList, error) {
	ret := _m.Called(kind, from, to, sortAscendingTime)

	var r0 *list.TimestampedResourceList
	if rf, ok := ret.Get(0).(func(v1.TypeMeta, *time.Time, *time.Time, bool) *list.TimestampedResourceList); ok {
		r0 = rf(kind, from, to, sortAscendingTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*list.TimestampedResourceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.TypeMeta, *time.Time, *time.Time, bool) error); ok {
		r1 = rf(kind, from, to, sortAscendingTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreList provides a mock function with given fields: _a0, _a1
func (_m *MockListDestination) StoreList(_a0 v1.TypeMeta, _a1 *list.TimestampedResourceList) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(v1.TypeMeta, *list.TimestampedResourceList) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
