// Code generated by mockery v2.43.2. DO NOT EDIT.

package elastic

import (
	context "context"
	time "time"

	v7 "github.com/olivere/elastic/v7"
	mock "github.com/stretchr/testify/mock"

	api "github.com/projectcalico/calico/lma/pkg/api"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Backend provides a mock function with given fields:
func (_m *MockClient) Backend() *v7.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Backend")
	}

	var r0 *v7.Client
	if rf, ok := ret.Get(0).(func() *v7.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v7.Client)
		}
	}

	return r0
}

// ClusterAlias provides a mock function with given fields: _a0
func (_m *MockClient) ClusterAlias(_a0 string) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ClusterAlias")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ClusterIndex provides a mock function with given fields: _a0, _a1
func (_m *MockClient) ClusterIndex(_a0 string, _a1 string) string {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ClusterIndex")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Do provides a mock function with given fields: ctx, s
func (_m *MockClient) Do(ctx context.Context, s *v7.SearchService) (*v7.SearchResult, error) {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *v7.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v7.SearchService) (*v7.SearchResult, error)); ok {
		return rf(ctx, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v7.SearchService) *v7.SearchResult); ok {
		r0 = rf(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v7.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v7.SearchService) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexTemplateName provides a mock function with given fields: index
func (_m *MockClient) IndexTemplateName(index string) string {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for IndexTemplateName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SearchCompositeAggregations provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClient) SearchCompositeAggregations(_a0 context.Context, _a1 *CompositeAggregationQuery, _a2 CompositeAggregationKey) (<-chan *CompositeAggregationBucket, <-chan error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SearchCompositeAggregations")
	}

	var r0 <-chan *CompositeAggregationBucket
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, *CompositeAggregationQuery, CompositeAggregationKey) (<-chan *CompositeAggregationBucket, <-chan error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CompositeAggregationQuery, CompositeAggregationKey) <-chan *CompositeAggregationBucket); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *CompositeAggregationBucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CompositeAggregationQuery, CompositeAggregationKey) <-chan error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// SearchDNSLogs provides a mock function with given fields: ctx, filter, start, end
func (_m *MockClient) SearchDNSLogs(ctx context.Context, filter *api.DNSLogsSelection, start *time.Time, end *time.Time) <-chan *api.DNSResult {
	ret := _m.Called(ctx, filter, start, end)

	if len(ret) == 0 {
		panic("no return value specified for SearchDNSLogs")
	}

	var r0 <-chan *api.DNSResult
	if rf, ok := ret.Get(0).(func(context.Context, *api.DNSLogsSelection, *time.Time, *time.Time) <-chan *api.DNSResult); ok {
		r0 = rf(ctx, filter, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *api.DNSResult)
		}
	}

	return r0
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
