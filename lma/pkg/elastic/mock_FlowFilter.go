// Code generated by mockery v2.42.2. DO NOT EDIT.

package elastic

import (
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/projectcalico/calico/linseed/pkg/apis/v1"
)

// MockFlowFilter is an autogenerated mock type for the FlowFilter type
type MockFlowFilter struct {
	mock.Mock
}

// IncludeFlow provides a mock function with given fields: flow
func (_m *MockFlowFilter) IncludeFlow(flow *CompositeAggregationBucket) (bool, error) {
	ret := _m.Called(flow)

	if len(ret) == 0 {
		panic("no return value specified for IncludeFlow")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*CompositeAggregationBucket) (bool, error)); ok {
		return rf(flow)
	}
	if rf, ok := ret.Get(0).(func(*CompositeAggregationBucket) bool); ok {
		r0 = rf(flow)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*CompositeAggregationBucket) error); ok {
		r1 = rf(flow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncludeLinseedFlow provides a mock function with given fields: flow
func (_m *MockFlowFilter) IncludeLinseedFlow(flow *v1.L3Flow) (bool, error) {
	ret := _m.Called(flow)

	if len(ret) == 0 {
		panic("no return value specified for IncludeLinseedFlow")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.L3Flow) (bool, error)); ok {
		return rf(flow)
	}
	if rf, ok := ret.Get(0).(func(*v1.L3Flow) bool); ok {
		r0 = rf(flow)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*v1.L3Flow) error); ok {
		r1 = rf(flow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyFlow provides a mock function with given fields: flow
func (_m *MockFlowFilter) ModifyFlow(flow *CompositeAggregationBucket) error {
	ret := _m.Called(flow)

	if len(ret) == 0 {
		panic("no return value specified for ModifyFlow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*CompositeAggregationBucket) error); ok {
		r0 = rf(flow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockFlowFilter creates a new instance of MockFlowFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFlowFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFlowFilter {
	mock := &MockFlowFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
