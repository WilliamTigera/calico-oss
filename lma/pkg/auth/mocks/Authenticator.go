// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	user "k8s.io/apiserver/pkg/authentication/user"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: r
func (_m *Authenticator) Authenticate(r *http.Request) (user.Info, int, error) {
	ret := _m.Called(r)

	var r0 user.Info
	if rf, ok := ret.Get(0).(func(*http.Request) user.Info); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.Info)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*http.Request) int); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*http.Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewAuthenticator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticator(t mockConstructorTestingTNewAuthenticator) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
