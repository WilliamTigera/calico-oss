// Code generated by mockery v2.36.1. DO NOT EDIT.

package datastore

import (
	mock "github.com/stretchr/testify/mock"

	auth "github.com/projectcalico/calico/lma/pkg/auth"

	rest "k8s.io/client-go/rest"

	user "k8s.io/apiserver/pkg/authentication/user"
)

// MockClusterCtxK8sClientFactory is an autogenerated mock type for the ClusterCtxK8sClientFactory type
type MockClusterCtxK8sClientFactory struct {
	mock.Mock
}

// ClientSetForCluster provides a mock function with given fields: clusterID
func (_m *MockClusterCtxK8sClientFactory) ClientSetForCluster(clusterID string) (ClientSet, error) {
	ret := _m.Called(clusterID)

	var r0 ClientSet
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (ClientSet, error)); ok {
		return rf(clusterID)
	}
	if rf, ok := ret.Get(0).(func(string) ClientSet); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClientSet)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Impersonate provides a mock function with given fields: _a0
func (_m *MockClusterCtxK8sClientFactory) Impersonate(_a0 *user.DefaultInfo) ClusterCtxK8sClientFactory {
	ret := _m.Called(_a0)

	var r0 ClusterCtxK8sClientFactory
	if rf, ok := ret.Get(0).(func(*user.DefaultInfo) ClusterCtxK8sClientFactory); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClusterCtxK8sClientFactory)
		}
	}

	return r0
}

// RBACAuthorizerForCluster provides a mock function with given fields: clusterId
func (_m *MockClusterCtxK8sClientFactory) RBACAuthorizerForCluster(clusterId string) (auth.RBACAuthorizer, error) {
	ret := _m.Called(clusterId)

	var r0 auth.RBACAuthorizer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (auth.RBACAuthorizer, error)); ok {
		return rf(clusterId)
	}
	if rf, ok := ret.Get(0).(func(string) auth.RBACAuthorizer); ok {
		r0 = rf(clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.RBACAuthorizer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestConfigForCluster provides a mock function with given fields: clusterID
func (_m *MockClusterCtxK8sClientFactory) RestConfigForCluster(clusterID string) *rest.Config {
	ret := _m.Called(clusterID)

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func(string) *rest.Config); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}

// NewMockClusterCtxK8sClientFactory creates a new instance of MockClusterCtxK8sClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterCtxK8sClientFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterCtxK8sClientFactory {
	mock := &MockClusterCtxK8sClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
