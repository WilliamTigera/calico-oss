// Code generated by mockery v2.36.1. DO NOT EDIT.

package api

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockReportEventFetcher is an autogenerated mock type for the ReportEventFetcher type
type MockReportEventFetcher struct {
	mock.Mock
}

// GetAuditEvents provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockReportEventFetcher) GetAuditEvents(_a0 context.Context, _a1 *time.Time, _a2 *time.Time) <-chan *AuditEventResult {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 <-chan *AuditEventResult
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, *time.Time) <-chan *AuditEventResult); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *AuditEventResult)
		}
	}

	return r0
}

// NewMockReportEventFetcher creates a new instance of MockReportEventFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReportEventFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReportEventFetcher {
	mock := &MockReportEventFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
