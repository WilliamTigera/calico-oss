// Code generated by mockery v2.14.0. DO NOT EDIT.

package api

import (
	context "context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	list "github.com/projectcalico/calico/lma/pkg/list"

	mock "github.com/stretchr/testify/mock"

	pkgapi "github.com/projectcalico/calico/lma/pkg/api"

	time "time"

	v1 "github.com/projectcalico/calico/linseed/pkg/apis/v1"

	v3 "github.com/tigera/api/pkg/apis/projectcalico/v3"
)

// MockComplianceStore is an autogenerated mock type for the ComplianceStore type
type MockComplianceStore struct {
	mock.Mock
}

// GetAuditEvents provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockComplianceStore) GetAuditEvents(_a0 context.Context, _a1 *time.Time, _a2 *time.Time) <-chan *AuditEventResult {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 <-chan *AuditEventResult
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, *time.Time) <-chan *AuditEventResult); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *AuditEventResult)
		}
	}

	return r0
}

// RetrieveArchivedReport provides a mock function with given fields: ctx, id
func (_m *MockComplianceStore) RetrieveArchivedReport(ctx context.Context, id string) (*v1.ReportData, error) {
	ret := _m.Called(ctx, id)

	var r0 *v1.ReportData
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.ReportData); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ReportData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveArchivedReportSummaries provides a mock function with given fields: cxt, q
func (_m *MockComplianceStore) RetrieveArchivedReportSummaries(cxt context.Context, q ReportQueryParams) (*ArchivedReportSummaries, error) {
	ret := _m.Called(cxt, q)

	var r0 *ArchivedReportSummaries
	if rf, ok := ret.Get(0).(func(context.Context, ReportQueryParams) *ArchivedReportSummaries); ok {
		r0 = rf(cxt, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ArchivedReportSummaries)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ReportQueryParams) error); ok {
		r1 = rf(cxt, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveArchivedReportTypeAndNames provides a mock function with given fields: cxt, q
func (_m *MockComplianceStore) RetrieveArchivedReportTypeAndNames(cxt context.Context, q ReportQueryParams) ([]ReportTypeAndName, error) {
	ret := _m.Called(cxt, q)

	var r0 []ReportTypeAndName
	if rf, ok := ret.Get(0).(func(context.Context, ReportQueryParams) []ReportTypeAndName); ok {
		r0 = rf(cxt, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ReportTypeAndName)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ReportQueryParams) error); ok {
		r1 = rf(cxt, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveLastArchivedReportSummary provides a mock function with given fields: ctx, name
func (_m *MockComplianceStore) RetrieveLastArchivedReportSummary(ctx context.Context, name string) (*v1.ReportData, error) {
	ret := _m.Called(ctx, name)

	var r0 *v1.ReportData
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.ReportData); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ReportData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveLatestBenchmarks provides a mock function with given fields: ctx, ct, filters, start, end
func (_m *MockComplianceStore) RetrieveLatestBenchmarks(ctx context.Context, ct v1.BenchmarkType, filters []v1.BenchmarksFilter, start time.Time, end time.Time) <-chan BenchmarksResult {
	ret := _m.Called(ctx, ct, filters, start, end)

	var r0 <-chan BenchmarksResult
	if rf, ok := ret.Get(0).(func(context.Context, v1.BenchmarkType, []v1.BenchmarksFilter, time.Time, time.Time) <-chan BenchmarksResult); ok {
		r0 = rf(ctx, ct, filters, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan BenchmarksResult)
		}
	}

	return r0
}

// RetrieveList provides a mock function with given fields: kind, from, to, sortAscendingTime
func (_m *MockComplianceStore) RetrieveList(kind metav1.TypeMeta, from *time.Time, to *time.Time, sortAscendingTime bool) (*list.TimestampedResourceList, error) {
	ret := _m.Called(kind, from, to, sortAscendingTime)

	var r0 *list.TimestampedResourceList
	if rf, ok := ret.Get(0).(func(metav1.TypeMeta, *time.Time, *time.Time, bool) *list.TimestampedResourceList); ok {
		r0 = rf(kind, from, to, sortAscendingTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*list.TimestampedResourceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metav1.TypeMeta, *time.Time, *time.Time, bool) error); ok {
		r1 = rf(kind, from, to, sortAscendingTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAuditEvents provides a mock function with given fields: ctx, filter, start, end
func (_m *MockComplianceStore) SearchAuditEvents(ctx context.Context, filter *v3.AuditEventsSelection, start *time.Time, end *time.Time) <-chan *AuditEventResult {
	ret := _m.Called(ctx, filter, start, end)

	var r0 <-chan *AuditEventResult
	if rf, ok := ret.Get(0).(func(context.Context, *v3.AuditEventsSelection, *time.Time, *time.Time) <-chan *AuditEventResult); ok {
		r0 = rf(ctx, filter, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *AuditEventResult)
		}
	}

	return r0
}

// SearchFlowLogs provides a mock function with given fields: ctx, namespaces, start, end
func (_m *MockComplianceStore) SearchFlowLogs(ctx context.Context, namespaces []string, start *time.Time, end *time.Time) <-chan *pkgapi.FlowLogResult {
	ret := _m.Called(ctx, namespaces, start, end)

	var r0 <-chan *pkgapi.FlowLogResult
	if rf, ok := ret.Get(0).(func(context.Context, []string, *time.Time, *time.Time) <-chan *pkgapi.FlowLogResult); ok {
		r0 = rf(ctx, namespaces, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *pkgapi.FlowLogResult)
		}
	}

	return r0
}

// StoreArchivedReport provides a mock function with given fields: r
func (_m *MockComplianceStore) StoreArchivedReport(r *v1.ReportData) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ReportData) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreBenchmarks provides a mock function with given fields: ctx, b
func (_m *MockComplianceStore) StoreBenchmarks(ctx context.Context, b *v1.Benchmarks) error {
	ret := _m.Called(ctx, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Benchmarks) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreList provides a mock function with given fields: _a0, _a1
func (_m *MockComplianceStore) StoreList(_a0 metav1.TypeMeta, _a1 *list.TimestampedResourceList) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(metav1.TypeMeta, *list.TimestampedResourceList) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockComplianceStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockComplianceStore creates a new instance of MockComplianceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockComplianceStore(t mockConstructorTestingTNewMockComplianceStore) *MockComplianceStore {
	mock := &MockComplianceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
