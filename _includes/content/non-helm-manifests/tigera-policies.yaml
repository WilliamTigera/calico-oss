# Tier containing policies to allow access to Calico Enterprise.
apiVersion: projectcalico.org/v3
kind: Tier
metadata:
  name: allow-tigera
spec:
  order: 100

---

# Allow the Kubernetes API Server access to Calico Enterprise API Server.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.cnx-apiserver-access
  namespace: tigera-system
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-apiserver'
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      # This policy allows Calico Enterprise API Server access from anywhere: replace it with
      # the addresses of your Kubernetes API Servers if those are static.
      nets: ["0.0.0.0/0"]
    destination:
      # The ports Calico Enterprise API Server and Calico Enterprise Query Server are configured to listen on.
      ports: [443, 5443, 8080, 10443]
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule in this policy allows tigera api-server to communicate with kubernetes api server.
      namespaceSelector: projectcalico.org/name == 'default'
      selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
      # By default, kubernetes api server listens on [6443, 443]. If Api server is customized to listen
      # on different port, Include the port number below.
      ports: [443, 6443]
---

# Allow users to access Calico Enterprise Manager.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.manager-access
  namespace: tigera-manager
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-manager'
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      # This policy allows access to Calico Enterprise Manager from anywhere: narrow it down if
      # only certain subnets should be allowed.
      nets: ["0.0.0.0/0"]
    destination:
      # By default, Calico Enterprise Manager is accessed over https. Update this if needed.
      ports: [9443]
  - action: Allow
    protocol: TCP
    source: {}
    # This policy is used for multi-cluster management to establish a tunnel from another cluster: narrow it down if
    # only certain subnets should be allowed.
    destination:
      ports: [9449]
  egress:
  - action: Allow
    protocol: TCP
    source: {}
    destination:
      selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure' 
      namespaceSelector: projectcalico.org/name == 'tigera-elasticsearch'
      ports: [9200]
  - action: Allow
    protocol: TCP
    destination:
      # This rule allows to communicate with tigera-compliance.
      namespaceSelector: projectcalico.org/name == 'tigera-compliance'
      selector: k8s-app == 'compliance-server'
      ports: [5443]
  - action: Allow
    protocol: TCP
    destination:
      # This rule allows to communicate with tigera-kibana.
      namespaceSelector: projectcalico.org/name == 'tigera-kibana'
      selector: k8s-app == 'tigera-secure'
      ports: [5601]
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule allows to communicate with tigera-dex.
      namespaceSelector: projectcalico.org/name == 'tigera-dex'
      selector: k8s-app == 'tigera-dex'
      ports: [5556]
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule in this policy allows compliance to communicate with kubernetes api server.
      namespaceSelector: projectcalico.org/name == 'default'
      selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
      # By default, kubernetes api server listens on [6443, 443]. If Api server is customized to listen
      # on different port, Include the port number below.
      ports: [443, 6443]
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
---

# Allow internal communication to compliance-server from Manager.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.compliance-server
  namespace: tigera-compliance
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'compliance-server'
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      selector: k8s-app == 'tigera-manager'
      namespaceSelector: name == 'tigera-manager'
    destination:
      ports: [5443]
  egress:
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule in this policy allows compliance to communicate with kubernetes api server.
      namespaceSelector: projectcalico.org/name == 'default'
      selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
      # By default, kubernetes api server listens on [6443, 443]. If Api server is customized to listen
      # on different port, Include the port number below.
      ports: [6443, 443]
  - action: Allow
    protocol: TCP
    destination:
      namespaceSelector: projectcalico.org/name == 'tigera-elasticsearch'
      selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure'
      ports: [9200]
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule allows to communicate with tigera-dex.
      namespaceSelector: projectcalico.org/name == 'tigera-dex'
      selector: k8s-app == 'tigera-dex'
      ports: [5556]

---

# This manifest creates a network policy to allow traffic to Alertmanager
# (TCP port 9093).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.calico-node-alertmanager
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: app == 'alertmanager' && alertmanager == 'calico-node-alertmanager'
  types:
    - Ingress
    - Egress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports: [9093]
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  # This rule allows all kind of egress traffic from AlertManager. 
  # recommended to customize egress flow, based on configuration.
  - action: Allow
    protocol: TCP
---

# This manifest creates a network policy to allow traffic between
# Alertmanagers for HA configuration (TCP port 6783).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.calico-node-alertmanager-mesh
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: app == 'alertmanager' && alertmanager == 'calico-node-alertmanager'
  types:
    - Ingress
    - Egress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      selector: app == 'alertmanager' && alertmanager == 'calico-node-alertmanager'
      ports: [9094]
  - action: Allow
    protocol: UDP
    destination:
      selector: app == 'alertmanager' && alertmanager == 'calico-node-alertmanager'
      ports: [9094]
  egress:
  - action: Allow
    protocol: TCP
    destination:
      selector: app == 'alertmanager' && alertmanager == 'calico-node-alertmanager'
      ports: [9094]
  - action: Allow
    protocol: UDP
    destination:
      selector: app == 'alertmanager' && alertmanager == 'calico-node-alertmanager'
      ports: [9094]
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
---

# This manifest creates a network policy to allow traffic to access the
# Prometheus (TCP port 9090).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.prometheus
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: app == 'prometheus' && prometheus == 'calico-node-prometheus'
  types:
    - Ingress
    - Egress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports: [9090]
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  - action: Allow
    protocol: TCP
    destination:
      ports: [9081]
---

# Allow access to Elasticsearch client nodes from Kibana, fluentd, and the
# intrusion detection installer
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.elasticsearch-access
  namespace: tigera-elasticsearch
spec:
  order: 1
  tier: allow-tigera
  selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure'
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      selector: k8s-app == 'fluentd-node'
      namespaceSelector: name == 'tigera-fluentd'
    destination:
      ports: [9200]
  - action: Allow
    protocol: TCP
    source:
      selector: k8s-app == 'eks-log-forwarder'
      namespaceSelector: name == 'tigera-fluentd'
    destination:
      ports: [9200]
  - action: Allow
    protocol: TCP
    source:
      selector: k8s-app == 'tigera-secure'
      namespaceSelector: name == 'tigera-kibana'
    destination:
      ports: [9200]
  - action: Allow
    protocol: TCP
    source:
      selector: job-name == 'intrusion-detection-es-job-installer'
      namespaceSelector: name == 'tigera-intrusion-detection'
    destination:
      ports: [9200]
  - action: Allow
    protocol: TCP
    source:
      selector: k8s-app == 'elastic-curator'
      namespaceSelector: name == 'tigera-elasticsearch'
    destination:
      ports: [9200]
  - action: Allow
    protocol: TCP
    source:
      selector: k8s-app == 'tigera-manager'
      namespaceSelector: name == 'tigera-manager'
    destination:
      ports: [9200]
  - action: Allow
    destination:
      ports: [9200]
    protocol: TCP
    source:
      selector: k8s-app == 'compliance-benchmarker'
      namespaceSelector: name == 'tigera-compliance'
  - action: Allow
    destination:
      ports: [9200]
    protocol: TCP
    source:
      selector: k8s-app == 'compliance-controller'
      namespaceSelector: name == 'tigera-compliance'
  - action: Allow
    destination:
      ports: [9200]
    protocol: TCP
    source:
      selector: k8s-app == 'compliance-server'
      namespaceSelector: name == 'tigera-compliance'
  - action: Allow
    destination:
      ports: [9200]
    protocol: TCP
    source:
      selector: k8s-app == 'compliance-snapshotter'
      namespaceSelector: name == 'tigera-compliance'
  - action: Allow
    destination:
      ports: [9200]
    protocol: TCP
    source:
      selector: k8s-app == 'compliance-reporter'
      namespaceSelector: name == 'tigera-compliance'
  - action: Allow
    destination:
      ports: [9200]
    protocol: TCP
    source:
      selector: k8s-app == 'intrusion-detection-controller'
      namespaceSelector: name == 'tigera-intrusion-detection'
  - action: Allow
    destination:
      ports: [9200]
    protocol: TCP
    source:
      selector: k8s-app == 'elastic-operator'
      namespaceSelector: name == 'tigera-eck-operator'
  - action: Allow
    destination:
      ports: [9200]
    protocol: TCP
    # If the node CIDRs are known they can be added to this rule to restrict access to just the nodes in the cluster
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule allows to communicate with tigera-dex.
      namespaceSelector: projectcalico.org/name == 'tigera-dex'
      selector: k8s-app == 'tigera-dex'
      ports: [5556]
---

# Allow internal communication within the ElasticSearch cluster
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.elasticsearch-internal
  namespace: tigera-elasticsearch
spec:
  order: 1
  tier: allow-tigera
  selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure'
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure'
    destination:
      ports: [9300]
  egress:
  - action: Allow
    protocol: TCP
    destination:
      # This rule allows communicate with elastic search.
      namespaceSelector: projectcalico.org/name == 'tigera-elasticsearch'
      selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure'
      ports: [9300]
---

# Allow access to Kibana
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.kibana-access
  namespace: tigera-kibana
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-secure'
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      # This policy allows access to Kibana from anywhere.
      # Narrow this down to your management network or remove this
      # policy to block access to Kibana.
      nets: ["0.0.0.0/0"]
    destination:
      ports: [5601]
  - action: Allow
    protocol: TCP
    source:
      # Allow the installer to access Kibana
      selector: job-name == 'intrusion-detection-es-job-installer'
      namespaceSelector: name == 'tigera-intrusion-detection'
    destination:
      ports: [5601]
  - action: Allow
    destination:
      ports: [5601]
    protocol: TCP
    source:
      selector: k8s-app == 'elastic-operator'
      namespaceSelector: name == 'tigera-eck-operator'
    # If the node CIDRs are known they can be added to this rule to restrict access to just the nodes in the cluster
  egress:
  - action: Allow
    protocol: TCP
    source: {}
    destination:
      selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure'
      namespaceSelector: projectcalico.org/name == "tigera-elasticsearch"
      ports: [9200]
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == "kube-system"
      selector: k8s-app == "kube-dns"
      ports: [53]
{%- endif %}
---

apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.intrusion-detection-controller
  namespace: tigera-intrusion-detection
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'intrusion-detection-controller'
  types:
    - Ingress
    - Egress
  ingress:
  # Intrusion detection controller doesn't listen on any external ports
  - action: Deny
  egress:
  # Block any link local IPs, e.g. cloud metadata, which are often targets
  # of server-side request forgery (SSRF) attacks
  - action: Deny
    protocol: TCP
    destination:
      nets:
      - "169.254.0.0/16"
  - action: Deny
    protocol: TCP
    destination:
      nets:
      - "fe80::/10"
  # Pass to subsequent tiers or profiles for further refinement
  - action: Pass

---

apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.allow-fluentd-node
  namespace: tigera-fluentd
spec:
  tier: allow-tigera
  order: 1
  selector: k8s-app == "fluentd-node"
  serviceAccountSelector: ''
  types:
    - Ingress
    - Egress
  egress:
  - action: Deny
    protocol: TCP
    source: {}
    destination:
      selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure'
      namespaceSelector: projectcalico.org/name == "tigera-elasticsearch"
      notPorts: [9200]
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == "kube-system"
      selector: k8s-app == "kube-dns"
      ports: [53]
{%- endif %}
  - action: Allow

---

apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.allow-tigera-dex-ingress
  namespace: tigera-dex
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-dex'
  types:
    - Ingress
    - Egress
  ingress:
    - action: Allow
      protocol: TCP
      source:
        selector: k8s-app == 'tigera-manager'
        namespaceSelector: name == 'tigera-manager'
      destination:
        ports: [5556]
    - action: Allow
      protocol: TCP
      source:
        selector: elasticsearch.k8s.elastic.co/cluster-name == 'tigera-secure'
        namespaceSelector: name == 'tigera-elasticsearch'
      destination:
        ports: [5556]
    - action: Allow
      destination:
        ports: [5556]
      protocol: TCP
      source:
        selector: k8s-app == 'compliance-server'
        namespaceSelector: name == 'tigera-compliance'
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows to communicate with openshift-dns.
        namespaceSelector: projectcalico.org/name == "openshift-dns"
        selector: dns.operator.openshift.io/daemonset-dns == "default"
        ports: [5353]
{%- else %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows communicate with kube-dns.
        namespaceSelector: projectcalico.org/name == "kube-system"
        selector: k8s-app == "kube-dns"
        ports: [53]
{%- endif %}
    - action: Allow
      protocol: TCP
      destination:
        # This egress rule in this policy allows tigera-dex to communicate with kubernetes api server.
        namespaceSelector: projectcalico.org/name == 'default'
        selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
        # By default, kubernetes api server listens on [6443, 443]. If Api server is customized to listen
        # on different port, Include the port number below.
        ports: [443, 6443]
    - action: Allow
      protocol: TCP
      destination:
        # This rule is intended to allow egress between dex and your identity provider.
        ports: [443]
        selector: k8s-app == 'tigera-dex-external-idp'
        namespaceSelector: name == 'tigera-dex'

---

# This network set is added to represent the address(es) where your identity provider is running. If you make this network
# set more specific, network policies are enforced to block egress to all addresses that do not correspond with your IdP.
apiVersion: projectcalico.org/v3
kind: NetworkSet
metadata:
  name: tigera-external-identity-provider
  namespace: tigera-dex
  labels:
    k8s-app: tigera-dex-external-idp
spec:
  nets: ['0.0.0.0/0']

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-elasticsearch
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-kibana
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-intrusion-detection
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-manager
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-compliance
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-prometheus
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-dex
spec:
  tier: allow-tigera
  selector: all()
  types:
    - Ingress
    - Egress
