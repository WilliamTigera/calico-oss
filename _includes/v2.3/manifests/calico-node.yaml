{% comment %}
calico-node.yaml acccepts the following include flags:

| Name             | Accepted Values               |
|------------------|-------------------------------|
| datastore        | kdd, etcd                     |
| typha            | true, false                   |
| network          | calico, flannel, ecs, <unset> |
| disable_ipip     | true, false                   |
| variant_name     | Calico, Canal                 |
| app_layer_policy | true, disabled, false         |
| platform         | gke, <unset>                  |

 Notes:

 - platform=gke expects datastore=kdd and network=<unset>
{% endcomment -%}
{%- capture objname -%}
  {%- if include.network == "flannel" and include.datastore == "etcd" -%}
    canal-node
  {%- elsif include.network == "flannel" -%}
    canal
  {%- else -%}
    calico-node
  {%- endif -%}
{%- endcapture -%}
# This manifest installs the {{site.nodecontainer}} container
{%-  if include.network != "ecs" %}
# as well as the {{site.tseeprodname}} CNI plugins and network config
{% endif %}
# on each master and worker node in a Kubernetes cluster.
{%- if include.platform == "gke" %}
# Update network mode to cni
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: {{objname}}-init
  labels:
    app: {{objname}}-init
  namespace: kube-system
spec:
  template:
    metadata:
      labels:
        app: {{objname}}-init
    spec:
      hostPID: true
      containers:
        - name: node-init
          image: gcr.io/google-containers/startup-script:v1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          env:
          - name: STARTUP_SCRIPT
            value: |
              #! /bin/bash
              # Modifications Copyright (c) 2019 Tigera, Inc. All rights reserved.
              # Based on work Copyright 2019 Authors of Cilium (Apache v2 license).
              set -o errexit
              set -o pipefail
              set -o nounset
              echo "Installing BPF filesystem mount"
              cat >/tmp/sys-fs-bpf.mount <<EOF
              [Unit]
              Description=Mount BPF filesystem (Calico)
              Documentation=http://docs.calico.org/
              DefaultDependencies=no
              Before=local-fs.target umount.target
              After=swap.target
              [Mount]
              What=bpffs
              Where=/sys/fs/bpf
              Type=bpf
              [Install]
              WantedBy=multi-user.target
              EOF
              if [ -d "/etc/systemd/system/" ]; then
                mv /tmp/sys-fs-bpf.mount /etc/systemd/system/
                echo "Installed sys-fs-bpf.mount to /etc/systemd/system/"
              elif [ -d "/lib/systemd/system/" ]; then
                mv /tmp/sys-fs-bpf.mount /lib/systemd/system/
                echo "Installed sys-fs-bpf.mount to /lib/systemd/system/"
              fi
              systemctl enable sys-fs-bpf.mount
              systemctl start sys-fs-bpf.mount
              echo "Changing kubelet configuration to --network-plugin=cni --cni-bin-dir=/home/kubernetes/bin"
              mkdir -p /home/kubernetes/bin
              sed -i "s:--network-plugin=kubenet:--network-plugin=cni\ --cni-bin-dir=/home/kubernetes/bin:g" /etc/default/kubelet
              echo "Restarting kubelet..."
              systemctl restart kubelet
              if ip link show cbr0; then
                echo "Detected cbr0 bridge. Deleting interface..."
                ip link del cbr0
              fi
              echo "Link information:"
              ip link
              echo "Routing table:"
              ip route
              echo "Node initialization complete"
---
{%- endif %}

kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: {{objname}}
  namespace: kube-system
  labels:
    k8s-app: {{objname}}
spec:
  selector:
    matchLabels:
      k8s-app: {{objname}}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: {{objname}}
      annotations:
        # This, along with the CriticalAddonsOnly toleration below,
        # marks the pod as a critical add-on, ensuring it gets
        # priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure {{objname}} gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: {{objname}}
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      imagePullSecrets:
        - name: cnx-pull-secret
      initContainers:
{%-  if include.network != "ecs" %}
        # This container installs the {{site.tseeprodname}} CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: {{site.imageNames["cni"]}}:{{site.data.versions[page.version].first.components["calico/cni"].version}}
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-{{include.variant_name | downcase}}.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: cni_network_config
{%- if include.datastore == "etcd" %}
            # The location of the {{site.tseeprodname}} etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: etcd_endpoints
  {%- if include.network == "flannel" %}
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_cert
  {%- endif %}
{%- elsif include.datastore == "kdd" %}
            # Set the hostname based on the k8s node name.
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{%- endif %}
{%-  if include.network == "calico" %}
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: veth_mtu
{%- endif %}
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
{%- if include.datastore == "etcd" %}
            - mountPath: /calico-secrets
              name: etcd-certs
{%- endif %}
{%- endif %}
{%- if include.app_layer_policy == "true" or include.app_layer_policy == "disabled" %}
        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
        # to communicate with Felix over the Policy Sync API.
        - name: flexvol-driver
          image: {{site.imageNames["flexvol"]}}:{{site.data.versions[page.version].first.components["flexvol"].version}}
          volumeMounts:
          - name: flexvol-driver-host
            mountPath: /host/driver
{%- endif %}
      containers:
        # Runs {{site.nodecontainer}} container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: {{page.registry}}{{site.imageNames["node"]}}:{{site.data.versions[page.version].first.components["cnx-node"].version}}
          env:
{%- if include.datastore == "etcd" %}
            # The location of the {{site.tseeprodname}} etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{%- elsif include.datastore == "kdd" %}
            # Use Kubernetes API as the backing datastore.
            - name: DATASTORE_TYPE
              value: "kubernetes"
            # Wait for the datastore.
            - name: WAIT_FOR_DATASTORE
              value: "true"
            # Set based on the k8s node name.
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{%- endif %}
{%- if include.typha == "true" %}
            # Typha support: controlled by the ConfigMap.
            - name: FELIX_TYPHAK8SSERVICENAME
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: typha_service_name
{%- endif %}
{%- if include.network == "calico" %}
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
  {%- if include.disable_ipip == "true" %}
            # Disable IPIP by default
            - name: CALICO_IPV4POOL_IPIP
              value: "Never"
  {%- else %}
            # Enable IPIP by default
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
  {%- endif %}
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: veth_mtu
{%- elsif include.network == "flannel" %}
            # Don't enable BGP.
            - name: CALICO_NETWORKING_BACKEND
              value: "none"
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,canal"
            # Period, in seconds, at which felix re-applies all iptables state
            - name: FELIX_IPTABLESREFRESHINTERVAL
              value: "60"
            # No IP address needed.
            - name: IP
              value: ""
{%- elsif include.network == "ecs" %}
            # Don't enable BGP.
            - name: CALICO_NETWORKING_BACKEND
              value: "none"
            - name: FELIX_INTERFACEPREFIX
              value: "eni"
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,ecs"
            - name: NO_DEFAULT_POOLS
              value: "true"
{%- else %}
            # Don't enable BGP.
            - name: CALICO_NETWORKING_BACKEND
              value: "none"
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s"
{%- endif %}
{%- if include.network != "ecs" %}
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "192.168.0.0/16"
{%- endif %}
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
{% include {{page.version}}/extra-felix-config-12sp.yaml %}
{%- if include.app_layer_policy == "true" or include.app_layer_policy == "disabled" %}
            - name: FELIX_POLICYSYNCPATHPREFIX
              valueFrom:
                configMapKeyRef:
                  name: {{include.variant_name | downcase}}-config
                  key: felix-policy-sync-path-prefix
                  optional: true
{%- endif %}
            # Sets Default Security Groups if tigera-aws-config exists
            - name: TIGERA_DEFAULT_SECURITY_GROUPS
              valueFrom:
                configMapKeyRef:
                  name: tigera-aws-config
                  key: default_sgs
                  optional: true
            # Sets Pod Security Group if tigera-aws-config exists
            - name: TIGERA_POD_SECURITY_GROUP
              valueFrom:
                configMapKeyRef:
                  name: tigera-aws-config
                  key: pod_sg
                  optional: true
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 9099
              host: localhost
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
{%- if include.network == "calico" %}
            exec:
              command:
              - /bin/calico-node
              - -bird-ready
              - -felix-ready
{%- elsif include.network == "flannel" %}
            httpGet:
              path: /readiness
              port: 9099
              host: localhost
{%- else %}
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
{%- endif %}
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /var/log/calico
              name: var-log-calico
              readOnly: false
{%- if include.datastore == "etcd" %}
            - mountPath: /calico-secrets
              name: etcd-certs
{%- endif %}
{%- if include.app_layer_policy == "true" or include.app_layer_policy == "disabled" %}
            - name: policysync
              mountPath: /var/run/nodeagent
{%- endif %}
{%- if include.network == "flannel" %}
  {%- if include.datastore == "kdd" %}
        # This container runs flannel using the kube-subnet-mgr backend
        # for allocating subnets.
        - name: kube-flannel
          image: quay.io/coreos/flannel:v0.9.1
          command: [ "/opt/bin/flanneld", "--ip-masq", "--kube-subnet-mgr" ]
          securityContext:
            privileged: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: FLANNELD_IFACE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: canal_iface
            - name: FLANNELD_IP_MASQ
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: masquerade
          volumeMounts:
          - mountPath: /run/xtables.lock
            name: xtables-lock
            readOnly: false
          - name: flannel-cfg
            mountPath: /etc/kube-flannel/
  {%- elsif include.datastore == "etcd" %}
        # Runs the flannel daemon to enable vxlan networking between
        # container hosts.
        - name: flannel
          image: quay.io/coreos/flannel:v0.9.1
          env:
            # The location of the etcd cluster.
            - name: FLANNELD_ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_cert
            # Location of the CA certificate for etcd.
            - name: FLANNELD_ETCD_CAFILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: FLANNELD_ETCD_KEYFILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: FLANNELD_ETCD_CERTFILE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: etcd_cert
            # The interface flannel should run on.
            - name: FLANNELD_IFACE
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: canal_iface
            # Perform masquerade on traffic leaving the pod cidr.
            - name: FLANNELD_IP_MASQ
              valueFrom:
                configMapKeyRef:
                  name: canal-config
                  key: masquerade
            # Write the subnet.env file to the mounted directory.
            - name: FLANNELD_SUBNET_FILE
              value: "/run/flannel/subnet.env"
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/resolv.conf
              name: resolv
            - mountPath: /run/flannel
              name: run-flannel
            - mountPath: /calico-secrets
              name: etcd-certs
  {%- endif %}
{%- endif %}
      volumes:
        # Used by {{site.nodecontainer}}.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
{%- if include.network == "flannel" and include.datastore == "kdd" %}
        # Used by flannel.
        - name: flannel-cfg
          configMap:
            name: canal-config
{%- elsif include.network == "flannel" and include.datastore == "etcd" %}
        # Used by flannel.
        - name: run-flannel
          hostPath:
            path: /run/flannel
        - name: resolv
          hostPath:
            path: /etc/resolv.conf
{%- endif %}
{%- if include.network != "ecs" %}
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
{%- if include.platform == "gke" %}
            path: /home/kubernetes/bin
{%- else %}
            path: /opt/cni/bin
{%- endif %}
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
{%- endif %}
{%- if include.datastore == "etcd" %}
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
{%- endif %}
{%- if include.app_layer_policy == "true" or include.app_layer_policy == "disabled" %}
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
        # Used to install Flex Volume Driver
        - name: flexvol-driver-host
          hostPath:
            type: DirectoryOrCreate
{%- if include.platform == "gke" %}
            path: /home/kubernetes/flexvolume/nodeagent~uds
{%- else %}
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
{%- endif %}
{%- endif %}
        # Used for calico logs
        - name: var-log-calico
          hostPath:
            type: DirectoryOrCreate
            path: /var/log/calico
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{objname}}
  namespace: kube-system

{%- if include.datastore == "etcd" and include.network == "flannel" %}
---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: canal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: canal
subjects:
- kind: ServiceAccount
  name: canal-node
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: canal
rules:
  - apiGroups: [""]
    resources:
      - pods
      - nodes
    verbs:
      - get
{%- endif %}
