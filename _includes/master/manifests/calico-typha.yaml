{% comment %}
calico-typha.yaml acccepts the following include flags:

| Name         | Accepted Values               |
|--------------|-------------------------------|
| datastore    | kdd, etcd                     |
| variant_name | Calico, Canal                 |
| network      | calico, flannel, ecs, <unset> |
| federation   | true, false                   |

{% endcomment -%}
# This manifest creates a Service, which will be backed by Calico's Typha daemon.
# Typha sits in between Felix and the API server, reducing Calico's load on the API server.
# It is a requirement when using Kubernetes API datastore with more than 50 nodes, or when
# using the Federated Identity feature with any datastore type.

apiVersion: v1
kind: Service
metadata:
  name: calico-typha
  namespace: kube-system
  labels:
    k8s-app: calico-typha
spec:
  ports:
    - port: 5473
      protocol: TCP
      targetPort: calico-typha
      name: calico-typha
  selector:
    k8s-app: calico-typha

---

# This manifest creates a Deployment of Typha to back the above service.

apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: calico-typha
  namespace: kube-system
  labels:
    k8s-app: calico-typha
spec:
  # Number of Typha replicas.  To enable Typha, set this to a non-zero value *and* set the
  # typha_service_name variable in the calico-config ConfigMap above.
  #
  # We recommend using Typha if you have more than 50 nodes or if you are using Federated Endpoint Identity.
  # Above 100 nodes it is essential (when using the Kubernetes datastore).  Use one replica for every 100-200
  # nodes.  In production, we recommend running at least 3 replicas to reduce the impact of rolling upgrade.
  replicas: 0
  revisionHistoryLimit: 2
  template:
    metadata:
      labels:
        k8s-app: calico-typha
      annotations:
        # This, along with the CriticalAddonsOnly toleration below, marks the pod as a critical
        # add-on, ensuring it gets priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
      # Since Calico can't network a pod until Typha is up, we need to run Typha itself
      # as a host-networked pod.
      serviceAccountName: calico-node
      imagePullSecrets:
        - name: cnx-pull-secret
      containers:
      - image: {{site.data.versions[page.version].first.dockerRepo}}/{{site.imageNames["typha"]}}:{{site.data.versions[page.version].first.components["typha"].version}}
        name: calico-typha
{%- if include.federation == "true" or include.datastore == "etcd" %}
        volumeMounts:
{%- endif -%}
{%- if include.federation == "true" %}
        # These lines enable a secrets volume for use with federated endpoint identity. Add
        # multiple entries to the volumeMounts if you are mounting in multiple secrets (e.g. one for each remote cluster)
        - name: tigera-federation-remotecluster
          mountPath: "/etc/tigera-federation-remotecluster"
          readOnly: true
{%- endif -%}
{%- if include.datastore == "etcd" %}
        - name: etcd-certs
          mountPath:  "/calico-secrets"
          readOnly: true
{%- endif %}
        ports:
        - containerPort: 5473
          name: calico-typha
          protocol: TCP
        env:
{%- if include.network == "ecs" %}
          - name: FELIX_INTERFACEPREFIX
            value: "eni"
{%- endif %}
          # Enable "info" logging by default.  Can be set to "debug" to increase verbosity.
          - name: TYPHA_LOGSEVERITYSCREEN
            value: "info"
          # Disable logging to file and syslog since those don't make sense in Kubernetes.
          - name: TYPHA_LOGFILEPATH
            value: "none"
          - name: TYPHA_LOGSEVERITYSYS
            value: "none"
          # Monitor the Kubernetes API to find the number of running instances and rebalance
          # connections.
          - name: TYPHA_CONNECTIONREBALANCINGMODE
            value: "kubernetes"
{%- if include.datastore == "etcd" %}
          - name: TYPHA_DATASTORETYPE
            value: "etcdv3"
          # The location of the {{site.prodname}} etcd cluster.
          - name: TYPHA_ETCDENDPOINTS
            valueFrom:
              configMapKeyRef:
                name: {{include.variant_name | downcase}}-config
                key: etcd_endpoints
          # Location of the CA certificate for etcd.
          - name: TYPHA_ETCDCAFILE
            valueFrom:
              configMapKeyRef:
                name: {{include.variant_name | downcase}}-config
                key: etcd_ca
          # Location of the client key for etcd.
          - name: TYPHA_ETCDKEYFILE
            valueFrom:
              configMapKeyRef:
                name: {{include.variant_name | downcase}}-config
                key: etcd_key
          # Location of the client certificate for etcd.
          - name: TYPHA_ETCDCERTFILE
            valueFrom:
              configMapKeyRef:
                name: {{include.variant_name | downcase}}-config
                key: etcd_cert
{%- elsif include.datastore == "kdd" %}
          # Use Kubernetes API as the backing datastore.
          - name: TYPHA_DATASTORETYPE
            value: "kubernetes"
{%- endif %}
          - name: TYPHA_HEALTHENABLED
            value: "true"
          # Sets Default Security Groups if tigera-aws-config exists
          - name: TIGERA_DEFAULT_SECURITY_GROUPS
            valueFrom:
              configMapKeyRef:
                name: tigera-aws-config
                key: default_sgs
                optional: true
          # Sets Pod Security Group if tigera-aws-config exists
          - name: TIGERA_POD_SECURITY_GROUP
            valueFrom:
              configMapKeyRef:
                name: tigera-aws-config
                key: pod_sg
                optional: true
          # Uncomment these lines to enable prometheus metrics.  Since Typha is host-networked,
          # this opens a port on the host, which may need to be secured.
          #- name: TYPHA_PROMETHEUSMETRICSENABLED
          #  value: "true"
          #- name: TYPHA_PROMETHEUSMETRICSPORT
          #  value: "9093"
        livenessProbe:
          exec:
            command:
            - calico-typha
            - check
            - liveness
          periodSeconds: 30
          initialDelaySeconds: 30
        readinessProbe:
          exec:
            command:
            - calico-typha
            - check
            - readiness
          periodSeconds: 10
{%- if include.federation == "true" or include.datastore == "etcd" %}
      volumes:
{%- endif -%}
{%- if include.federation == "true" %}
      # These lines enable a secrets volume for use with federated endpoint identity. Add
      # multiple entries to the volumes if you are mounting in multiple secrets (e.g. one for each remote cluster)
      # The secret should be created with: kubectl create secret generic tigera-federation-remotecluster --from-file=...
      - name: tigera-federation-remotecluster
        secret:
          secretName: tigera-federation-remotecluster
          defaultMode: 0400
{%- endif -%}
{%- if include.datastore == "etcd" %}
      # Mount in the etcd TLS secrets with mode 400.
      # See https://kubernetes.io/docs/concepts/configuration/secret/
      - name: etcd-certs
        secret:
          secretName: calico-etcd-secrets
{%- endif -%}
