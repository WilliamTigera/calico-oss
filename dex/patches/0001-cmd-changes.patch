From 480168212495aceb3404d7c4f72fbf0f6ed54168 Mon Sep 17 00:00:00 2001
From: rene-dekker <rene@tigera.io>
Date: Thu, 4 Jan 2024 15:39:51 -0800
Subject: [PATCH] Remove code from dex that is unused and requires code generation. Add FIPS support to tls configs.

---
 dex/cmd/dex/config.go | 11 -----------
 dex/cmd/dex/serve.go  | 28 +++++-----------------------
 2 files changed, 5 insertions(+), 34 deletions(-)

diff --git a/dex/cmd/dex/config.go b/dex/cmd/dex/config.go
index 7bb7fbb780..3bce17d19f 100644
--- a/dex/cmd/dex/config.go
+++ b/dex/cmd/dex/config.go
@@ -13,11 +13,9 @@ import (
 	"github.com/dexidp/dex/pkg/log"
 	"github.com/dexidp/dex/server"
 	"github.com/dexidp/dex/storage"
-	"github.com/dexidp/dex/storage/ent"
 	"github.com/dexidp/dex/storage/etcd"
 	"github.com/dexidp/dex/storage/kubernetes"
 	"github.com/dexidp/dex/storage/memory"
-	"github.com/dexidp/dex/storage/sql"
 )

 // Config is the config format for the main application.
@@ -180,12 +178,6 @@ var (
 	_ StorageConfig = (*etcd.Etcd)(nil)
 	_ StorageConfig = (*kubernetes.Config)(nil)
 	_ StorageConfig = (*memory.Config)(nil)
-	_ StorageConfig = (*sql.SQLite3)(nil)
-	_ StorageConfig = (*sql.Postgres)(nil)
-	_ StorageConfig = (*sql.MySQL)(nil)
-	_ StorageConfig = (*ent.SQLite3)(nil)
-	_ StorageConfig = (*ent.Postgres)(nil)
-	_ StorageConfig = (*ent.MySQL)(nil)
 )

 func getORMBasedSQLStorage(normal, entBased StorageConfig) func() StorageConfig {
@@ -203,9 +195,6 @@ var storages = map[string]func() StorageConfig{
 	"etcd":       func() StorageConfig { return new(etcd.Etcd) },
 	"kubernetes": func() StorageConfig { return new(kubernetes.Config) },
 	"memory":     func() StorageConfig { return new(memory.Config) },
-	"sqlite3":    getORMBasedSQLStorage(&sql.SQLite3{}, &ent.SQLite3{}),
-	"postgres":   getORMBasedSQLStorage(&sql.Postgres{}, &ent.Postgres{}),
-	"mysql":      getORMBasedSQLStorage(&sql.MySQL{}, &ent.MySQL{}),
 }

 // isExpandEnvEnabled returns if os.ExpandEnv should be used for each storage and connector config.
diff --git a/dex/cmd/dex/serve.go b/dex/cmd/dex/serve.go
index 70906a866d..3115a14685 100644
--- a/dex/cmd/dex/serve.go
+++ b/dex/cmd/dex/serve.go
@@ -38,6 +38,8 @@ import (
 	"github.com/dexidp/dex/pkg/log"
 	"github.com/dexidp/dex/server"
 	"github.com/dexidp/dex/storage"
+
+	tls2 "github.com/projectcalico/calico/crypto/pkg/tls"
 )
 
 type serveOptions struct {
@@ -134,23 +136,8 @@ func runServe(options serveOptions) error {
 
 	var grpcOptions []grpc.ServerOption
 
-	allowedTLSCiphers := []uint16{
-		tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
-		tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
-		tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
-		tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
-		tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
-		tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
-		tls.TLS_RSA_WITH_AES_128_GCM_SHA256,
-		tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
-	}
-
 	if c.GRPC.TLSCert != "" {
-		baseTLSConfig := &tls.Config{
-			MinVersion:               tls.VersionTLS12,
-			CipherSuites:             allowedTLSCiphers,
-			PreferServerCipherSuites: true,
-		}
+		baseTLSConfig := tls2.NewTLSConfig(os.Getenv("FIPS_MODE") == "true")
 
 		tlsConfig, err := newTLSReloader(logger, c.GRPC.TLSCert, c.GRPC.TLSKey, c.GRPC.TLSClientCA, baseTLSConfig)
 		if err != nil {
@@ -420,12 +407,7 @@ func runServe(options serveOptions) error {
 			return fmt.Errorf("listening (%s) on %s: %v", name, c.Web.HTTPS, err)
 		}
 
-		baseTLSConfig := &tls.Config{
-			MinVersion:               tls.VersionTLS12,
-			CipherSuites:             allowedTLSCiphers,
-			PreferServerCipherSuites: true,
-		}
-
+		baseTLSConfig := tls2.NewTLSConfig(os.Getenv("FIPS_MODE") == "true")
 		tlsConfig, err := newTLSReloader(logger, c.Web.TLSCert, c.Web.TLSKey, "", baseTLSConfig)
 		if err != nil {
 			return fmt.Errorf("invalid config: get HTTP TLS: %v", err)
@@ -634,7 +616,7 @@ func newTLSReloader(logger log.Logger, certFile, keyFile, caFile string, baseCon
 		}
 	}()
 
-	conf := &tls.Config{}
+	conf := tls2.NewTLSConfig(os.Getenv("FIPS_MODE") == "true")
 	// https://pkg.go.dev/crypto/tls#baseConfig
 	// Server configurations must set one of Certificates, GetCertificate or GetConfigForClient.
 	if caFile != "" {
-- 
2.34.1

