version: v1.0
name: ES Gateway

# Set a long time limit to combat situations where we are waiting in the queue for a runner to become available 
# and time out before we reach the front of the queue.
# Each block below has its own time limit to ensure the pipeline itself doesn't take a long time when running.
execution_time_limit:
  hours: 12

agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

global_job_config:
  secrets:
    - name: docker-hub
    # Mount the github SSH secret for pulling private repositories.
    - name: private-repo
    # Mount a secret for pulling images from GCR.
    - name: tigera-dev-ci-pull-credentials
  prologue:
    commands:
      - echo $DOCKERHUB_PASSWORD | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      # Correct permissions since they are too open by default:
      - chmod 0600 ~/.keys/*
      # Add the key to the ssh agent:
      - ssh-add ~/.keys/*
      # Login to docker in order to pull images.
      - docker login --username casey@tigera.io -u _json_key -p "$(cat /home/semaphore/tigera-dev-ci.json)" https://gcr.io
      - checkout

blocks:
  - name: 'CI'
    dependencies: []
    execution_time_limit:
      minutes: 20
    task:
      jobs:
        - name: Run CI
          commands:
            - make ci

  - name: 'Push Images (non-PR builds only)'
    dependencies: ["CI"]
    execution_time_limit:
      minutes: 20
    skip:
      # Only run on branches, not PRs.
      when: "branch !~ '.+'"
    task:
      secrets:
        - name: google-service-account-for-gcr
      prologue:
        commands:
          # Correct permissions since they are too open by default:
          - chmod 0600 ~/.keys/*
          # Add the key to the ssh agent:
          - ssh-add ~/.keys/*
          # Login to docker in order to pull images.
          - docker login --username casey@tigera.io -u _json_key -p "$(cat ~/secrets/secret.google-service-account-key.json)" https://gcr.io
      jobs:
        - name: Run CD
          commands:
            - export BRANCH_NAME=$SEMAPHORE_GIT_BRANCH
            - if [ -z "${SEMAPHORE_GIT_PR_NUMBER}" ]; then make cd CONFIRM=true; fi

promotions:
  - name: Update Pins
    pipeline_file: update_pins.yml
    auto_promote:
      # If the block has passed and the branch is for master or a release branch then run the pin updates. Note that
      # this doesn't try to restrict which release branches, as the presence of this auto promotion code means that
      # it can handle updating the pins in this fashion.
      when: "(result = 'passed') and ((branch = 'master') or (branch =~ '^release-calient-v\d*\.\d*'))"
