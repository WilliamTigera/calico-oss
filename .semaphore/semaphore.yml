version: v1.0
name: felix-private

execution_time_limit:
  hours: 2

agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

global_job_config:
  secrets:
    - name: docker-hub
    # Mount the github SSH secret for pulling private repositories.
    - name: private-repo
    # Mount a secret for pulling images from GCR.
    - name: tigera-dev-ci-pull-credentials
  prologue:
    commands:
      - echo $DOCKERHUB_PASSWORD | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      # Correct permissions since they are too open by default:
      - chmod 0600 ~/.keys/*
      # Add the key to the ssh agent:
      - ssh-add ~/.keys/*
      # confirm tigera-dev-ci.json exists so we don't hang during docker login
      - if [ ! -e /home/semaphore/tigera-dev-ci.json ]; then echo tigera-dev-ci.json does not exist && exit 1; else echo tigera-dev-ci.json exists, continuing; fi      # Login to docker in order to pull images.
      - docker login --username casey@tigera.io -u _json_key -p "$(cat /home/semaphore/tigera-dev-ci.json)" https://gcr.io

auto_cancel:
  running:
    when: "branch != 'master'"
  queued:
    when: "branch != 'master'"

promotions:
- name: Cleanup
  pipeline_file: cleanup.yml
  auto_promote:
    when: "result = 'stopped'"
# Run the pin update process in case there were a backlog of pin update requests
- name: Update Pins
  pipeline_file: update_pins.yml
  auto_promote:
    # If the block has passed and the branch is for master or a release branch then run the pin updates. Note that
    # this doesn't try to restrict which release branches, as the presence of this auto promotion code means that
    # it can handle updating the pins in this fashion.
    when: "(result = 'passed') and ((branch = 'master') or (branch =~ '^release-calient-v\d*\.\d*'))"

blocks:
- name: Build
  dependencies: []
  task:
    agent:
      machine:
        type: e1-standard-4
        os_image: ubuntu1804
    jobs:
    - name: Build
      commands:
      - checkout
      - cache restore go-pkg-cache
      - cache restore go-mod-cache
      - >-
        make image fv/fv.test bin/test-workload bin/test-connection
        bin/calico-felix bin/calico-felix.exe
      - 'cache store bin-${SEMAPHORE_GIT_SHA} bin'
      - cache store go-pkg-cache .go-pkg-cache
      - 'cache store go-mod-cache ${HOME}/go/pkg/mod/cache'
      - docker save -o /tmp/tigera-felix.tar tigera/felix:latest-amd64
      - 'cache store felix-image-${SEMAPHORE_GIT_SHA} /tmp/tigera-felix.tar'
- name: FV Tests
  dependencies: ["Build"]
  task:
    prologue:
      commands:
      # Semaphore mounts a copy-on-write FS as /var/lib/docker in order to provide a pre-loaded cache of
      # some images. However, the cache is not useful to us and the copy-on-write FS is a big problem given
      # how much we churn docker containers during the build.  Disable it.
      - sudo systemctl stop docker
      - sudo umount /var/lib/docker && sudo killall qemu-nbd || true
      - sudo systemctl start docker
      # Free up space on the build machine.
      - sudo rm -rf ~/.kiex ~/.phpbrew ~/.rbenv ~/.nvm ~/.kerl ~/.sbt ~/.npm /usr/lib/jvm /opt/firefox* /opt/apache-maven* /opt/scala /usr/local/golang
      - checkout
      - cache restore go-pkg-cache
      - cache restore go-mod-cache
      - 'cache restore bin-${SEMAPHORE_GIT_SHA}'
      - 'cache restore felix-image-${SEMAPHORE_GIT_SHA}'
      - docker load -i /tmp/tigera-felix.tar
      - rm /tmp/tigera-felix.tar
      - touch bin/*
    jobs:
    - name: FV Test matrix
      commands:
      - make check-wireguard
      - make fv FV_BATCHES_TO_RUN="${SEMAPHORE_JOB_INDEX}" FV_NUM_BATCHES=${SEMAPHORE_JOB_COUNT}
      parallelism: 6
    epilogue:
      always:
        commands:
        - ./.semaphore/collect-artifacts
        - ./.semaphore/publish-artifacts
- name: BPF UT/FV tests on new kernel
  dependencies: []
  task:
    prologue:
      commands:
      - checkout
      - export GOOGLE_APPLICATION_CREDENTIALS=$HOME/secrets/secret.google-service-account-key.json
      - export SHORT_WORKFLOW_ID=$(echo ${SEMAPHORE_WORKFLOW_ID} | sha256sum | cut -c -8)
      - export ZONE=europe-west3-c
      - export VM_NAME=sem-${SEMAPHORE_PROJECT_NAME}-${SHORT_WORKFLOW_ID}-${SEMAPHORE_JOB_INDEX:-ut}
      - echo VM_NAME=${VM_NAME}
      - export REPO_NAME=$(basename $(pwd))
      - mkdir artifacts
      - ./.semaphore/create-test-vm ${VM_NAME}
      - 'gcloud --quiet compute scp --zone=${ZONE} -- /home/semaphore/tigera-dev-ci.json ubuntu@${VM_NAME}:/tmp/tigera-dev-ci.json'
      - echo 'docker login --username casey@tigera.io -u _json_key -p "$(cat /tmp/tigera-dev-ci.json)" https://gcr.io' | gcloud --quiet compute ssh --zone=${ZONE} ubuntu@${VM_NAME} -- -A -o ServerAliveInterval=10 sh
    jobs:
    - name: UT and Wireguard non-BPF FV on newer kernel
      commands:
      - ./.semaphore/on-test-vm make --directory=${REPO_NAME} ut-bpf
      - ./.semaphore/on-test-vm make --directory=${REPO_NAME} check-wireguard
    - name: FV on newer kernel
      commands:
      - ./.semaphore/on-test-vm make --directory=${REPO_NAME} fv-bpf GINKGO_FOCUS=BPF-SAFE FV_NUM_BATCHES=${SEMAPHORE_JOB_COUNT} FV_BATCHES_TO_RUN="${SEMAPHORE_JOB_INDEX}"
      parallelism: 8
    epilogue:
      always:
        commands:
        - ./.semaphore/on-test-vm ${REPO_NAME}/.semaphore/collect-artifacts
        - gcloud --quiet compute scp "--zone=${ZONE}" "ubuntu@${VM_NAME}:${REPO_NAME}/artifacts" ./ --recurse
        - ./.semaphore/publish-artifacts
        - gcloud --quiet compute instances delete ${VM_NAME} --zone=${ZONE}
    secrets:
    - name: google-service-account-for-gce
    - name: private-repo
    - name: tigera-dev-ci-pull-credentials

- name: Windows FV
  dependencies: []
  task:
    secrets:
      - name: banzai-secrets
    prologue:
      commands:
        # Prepare aws configuration.
        - pip install --upgrade --user awscli
        - export REPORT_DIR=~/report
        - export LOGS_DIR=~/fv.log
        - export SHORT_WORKFLOW_ID=$(echo ${SEMAPHORE_WORKFLOW_ID} | sha256sum | cut -c -8)
        - export CLUSTER_NAME=sem-${SEMAPHORE_PROJECT_NAME}-pr${SEMAPHORE_GIT_PR_NUMBER}-${SHORT_WORKFLOW_ID}
        - export KEYPAIR_NAME=${CLUSTER_NAME}
        - echo CLUSTER_NAME=${CLUSTER_NAME}
        - sudo apt-get install putty-tools
        - git clone git@github.com:tigera/process.git
        - checkout
        - make build && make fv/win-fv.exe
    epilogue:
      always:
        commands:
          - artifact push job ${REPORT_DIR} --destination semaphore/test-results --expire-in ${SEMAPHORE_ARTIFACT_EXPIRY} || true
          - artifact push job ${LOGS_DIR} --destination semaphore/logs --expire-in ${SEMAPHORE_ARTIFACT_EXPIRY} || true
          - aws ec2 delete-key-pair --key-name ${KEYPAIR_NAME} || true
          - cd ~/process/testing/winfv && NAME_PREFIX="${CLUSTER_NAME}" ./setup-fv.sh -q -u
    env_vars:
      - name: SEMAPHORE_ARTIFACT_EXPIRY
        value: 2w
      - name: AWS_DEFAULT_REGION
        value: us-west-2
      - name: MASTER_CONNECT_KEY_PUB
        value: master_ssh_key.pub
      - name: MASTER_CONNECT_KEY
        value: master_ssh_key
      - name: WIN_PPK_KEY
        value: win_ppk_key
      - name: K8S_VERSION
        value: 1.20.1
    jobs:
      - name: FV Test matrix
        commands:
          - ./.semaphore/run-win-fv

- name: Static checks
  dependencies: []
  task:
    agent:
      machine:
        # Linters use a lot of RAM so use a bigger machine type.
        type: e1-standard-8
        os_image: ubuntu1804
    prologue:
      commands:
      - checkout
      - cache restore go-pkg-cache
      - cache restore go-mod-cache
    jobs:
    - name: Static checks
      commands:
      - make static-checks
- name: Multi-arch builds, UT, k8sfv-tests
  dependencies: []
  task:
    prologue:
      commands:
      - checkout
      - cache restore go-pkg-cache
      - cache restore go-mod-cache
    jobs:
    - name: CI excluding FV
      commands:
      - make ci EXCEPT=fv
- name: Trigger pin updates
  dependencies: []
  skip:
    when: "(branch != 'master') and (branch !~ '^release-calient-v\d*\.\d*')"
  task:
    secrets:
      - name: semaphore-api
    jobs:
      - name: Trigger pin updates
        commands:
          - checkout
          - make semaphore-run-auto-pin-update-workflows
