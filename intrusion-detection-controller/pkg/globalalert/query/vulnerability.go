// Copyright (c) 2023 Tigera, Inc. All rights reserved.
//

package query

import (
	"crypto/tls"
	"crypto/x509"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"

	log "github.com/sirupsen/logrus"

	calicotls "github.com/projectcalico/calico/crypto/pkg/tls"
)

type VulnerabilityQueryParameterMap map[string]string

func getImageAssuranceTLSConfig() (*tls.Config, error) {
	bundlePath := os.Getenv("IMAGE_ASSURANCE_CA_BUNDLE_PATH")
	if bundlePath == "" {
		return nil, fmt.Errorf("IMAGE_ASSURANCE_CA_BUNDLE_PATH can not be empty")
	}

	tlsConfig := calicotls.NewTLSConfig()

	ca, err := x509.SystemCertPool()
	if err != nil {
		log.WithError(err).Warn("failed to get system cert pool, creating a new one")
		ca = x509.NewCertPool()
	}

	pemCerts, err := os.ReadFile(bundlePath)
	if err != nil {
		return nil, err
	}

	ca.AppendCertsFromPEM(pemCerts)
	tlsConfig.RootCAs = ca
	return tlsConfig, nil
}

func getImageAssuranceEndpoint() (string, error) {
	imageAssuranceEndpoint := os.Getenv("IMAGE_ASSURANCE_ENDPOINT")
	if imageAssuranceEndpoint == "" {
		return "", fmt.Errorf("IMAGE_ASSURANCE_ENDPOINT can not be empty")
	}
	if _, err := url.Parse(imageAssuranceEndpoint); err != nil {
		return "", err
	}
	return imageAssuranceEndpoint, nil
}

func getImageAssuranceOrgID() (string, error) {
	imageAssuranceOrgID := os.Getenv("IMAGE_ASSURANCE_ORGANIZATION_ID")
	if imageAssuranceOrgID == "" {
		return "", fmt.Errorf("IMAGE_ASSURANCE_ORGANIZATION_ID can not be empty")
	}
	return imageAssuranceOrgID, nil
}

func getImageAssuranceAPIToken() (string, error) {
	imageAssuranceAPIToken := os.Getenv("IMAGE_ASSURANCE_API_TOKEN")
	if imageAssuranceAPIToken == "" {
		return "", fmt.Errorf("IMAGE_ASSURANCE_API_TOKEN can not be empty")
	}
	return imageAssuranceAPIToken, nil
}

func queryVulnerabilityDataset(httpClient *http.Client, params VulnerabilityQueryParameterMap) ([]JsonObject, error) {
	imageAssuranceEndpoint, err := getImageAssuranceEndpoint()
	if err != nil {
		return nil, err
	}
	imageAssuranceOrgID, err := getImageAssuranceOrgID()
	if err != nil {
		return nil, err
	}

	imageAssuranceAPIToken, err := getImageAssuranceAPIToken()
	if err != nil {
		return nil, err
	}

	u := fmt.Sprintf("%s/v1/organizations/%s/events", imageAssuranceEndpoint, imageAssuranceOrgID)
	req, err := http.NewRequest(http.MethodGet, u, nil)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", imageAssuranceAPIToken))

	query := req.URL.Query()
	for k, v := range params {
		query.Set(k, v)
	}
	req.URL.RawQuery = query.Encode()

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, err
	} else if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("image assurance api returns status = %d", resp.StatusCode)
	}

	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var events []JsonObject
	if err := json.Unmarshal(body, &events); err != nil {
		return nil, err
	}
	return events, nil
}
