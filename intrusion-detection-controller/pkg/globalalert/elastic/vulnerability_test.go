// Copyright 2022 Tigera Inc. All rights reserved.

package elastic

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("GlobalAlert Image Assurance API Test", func() {
	AfterEach(func() {
		os.Unsetenv("IMAGE_ASSURANCE_ENDPOINT")
		os.Unsetenv("IMAGE_ASSURANCE_CA_BUNDLE_PATH")
		os.Unsetenv("IMAGE_ASSURANCE_ORGANIZATION_ID")
	})

	Context("System environment variables", func() {
		It("should validate IMAGE_ASSURANCE_ENDPOINT environment variable", func() {
			_, err := getImageAssuranceEndpoint()
			Expect(err).To(HaveOccurred())

			os.Setenv("IMAGE_ASSURANCE_ENDPOINT", "http://image-assurance/bast")
			ep, err := getImageAssuranceEndpoint()
			Expect(err).NotTo(HaveOccurred())
			Expect(ep).To(Equal("http://image-assurance/bast"))
		})

		It("should validate IMAGE_ASSURANCE_ORGANIZATION_ID environment variable", func() {
			var err error

			_, err = getImageAssuranceOrgID()
			Expect(err).To(HaveOccurred())

			os.Setenv("IMAGE_ASSURANCE_ORGANIZATION_ID", "image-assurance-org-id")
			orgId, err := getImageAssuranceOrgID()
			Expect(err).NotTo(HaveOccurred())
			Expect(orgId).To(Equal("image-assurance-org-id"))
		})

		It("should set TLS config RootCA when IMAGE_ASSURANCE_CA_BUNDLE_PATH is set", func() {
			var keyBytes = []byte(`-----BEGIN CERTIFICATE-----
MIIE5zCCA8+gAwIBAgIUGSKS8h7p2B4MxKjEKk8WiufMU/wwDQYJKoZIhvcNAQEL
BQAwgZMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQH
DA1TYW4gRnJhbmNpc2NvMRQwEgYDVQQKDAtUaWdlcmEsIEluYzEfMB0GA1UEAwwW
dGlnZXJhLWltYWdlLWFzc3VyYW5jZTEgMB4GCSqGSIb3DQEJARYRY29udGFjdEB0
aWdlcmEuaW8wHhcNMjExMTI0MDQyMzEzWhcNMjIxMTI0MDQyMzEzWjCBkzELMAkG
A1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFu
Y2lzY28xFDASBgNVBAoMC1RpZ2VyYSwgSW5jMR8wHQYDVQQDDBZ0aWdlcmEtaW1h
Z2UtYXNzdXJhbmNlMSAwHgYJKoZIhvcNAQkBFhFjb250YWN0QHRpZ2VyYS5pbzCC
ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOjRLctj7inusobEkvKJwP9h
0K8dZ5iamyE3kpl7hnO/l6idYM8BFreZEZyE5B90gM5jwJvylK90j6XEVzdnEty1
7YuZ3qJLP6p3kWswfH2mGFyiS041h9XkYChMqh8qik1gMC4S1uUcOpmXbpPNQkM5
1IGT4+G3XzewFy8WGJSGnvpJzzk1wjdzjenO8wRCZNZ5c8YN3nYH42SN51XUMNH9
/nh7tYx3ZUqFNS+r1B2eOA8TZ7VrGKQnq3Hq6DwGPSbozWLqqvoHzfwQUY7TzCW7
DS6sLteq+YEeBFmNZ3pmajLMX9pexp4FTpVfU2yC2/t0kV3aMFHDVuon5md2jtEC
AwEAAaOCAS8wggErMIHrBgNVHREEgeMwgeCCD2ltYWdlLWFzc3VyYW5jZYIbdGln
ZXJhLXNlY3VyZS1iYXN0LWFwaS1odHRwgjJ0aWdlcmEtc2VjdXJlLWJhc3QtYXBp
LWh0dHAudGlnZXJhLWltYWdlLWFzc3VyYW5jZYI2dGlnZXJhLXNlY3VyZS1iYXN0
LWFwaS1odHRwLnRpZ2VyYS1pbWFnZS1hc3N1cmFuY2Uuc3ZjgkR0aWdlcmEtc2Vj
dXJlLWJhc3QtYXBpLWh0dHAudGlnZXJhLWltYWdlLWFzc3VyYW5jZS5zdmMuY2x1
c3Rlci5sb2NhbDAdBgNVHQ4EFgQUQcuucQejhRWzHpYWCeh3RIh60sEwDwYDVR0T
AQH/BAUwAwEB/zALBgNVHQ8EBAMCAuQwDQYJKoZIhvcNAQELBQADggEBAHizz2VX
sPZwSNKfqr65fwbqxjw3a3Uh3ImpJoL8cHzpRX3cr9QC9W5J04mQ3qwzag7Vness
aOx7D/xJy35dSioU6B4O7r4tFTlp9DdRpvF1i2Malp7NEr2XhG8DMMoZg1wH0sIS
cmktONqMA/8MNlBUCfUgj/hQSgaLtKcYrevO0QveYAhCExwh+hxziw5ZkViaGz5E
gtfkPdd1F22poVET+TgBfFP/p9tpst588r4dUIwNMg7NpvlFhSgCmr5jg4fSkcPn
0P65uE40xg11LW6sCXGjTlzscsZ6h7tkr5OEpCcjlTdXyIsF9CZuU8F72rWsmGnN
APr1F6UfkPoj8n4=`)
			tmpfile, err := os.CreateTemp("", "vuln-api-ca")
			defer os.Remove(tmpfile.Name())
			Expect(err).NotTo(HaveOccurred())

			_, err = tmpfile.Write(keyBytes)
			Expect(err).NotTo(HaveOccurred())
			err = tmpfile.Close()
			Expect(err).NotTo(HaveOccurred())

			os.Setenv("IMAGE_ASSURANCE_CA_BUNDLE_PATH", tmpfile.Name())
			cfg, err := getImageAssuranceTLSConfig(false)
			Expect(err).NotTo(HaveOccurred())
			Expect(cfg.RootCAs).NotTo(BeNil())
		})

		It("should return error when IMAGE_ASSURANCE_CA_BUNDLE_PATH is not set", func() {
			_, err := getImageAssuranceTLSConfig(false)
			Expect(err).To(HaveOccurred())
		})
	})

	Context("Image Assurance API requests", func() {
		orgID := "image-assurance-org-id"

		BeforeEach(func() {
			os.Setenv("IMAGE_ASSURANCE_ORGANIZATION_ID", orgID)
		})

		It("should return vulnerability events on successful requests", func() {
			params := VulnerabilityQueryParameterMap{
				"key1": "val1",
				"key2": "val2",
			}

			resp := []JsonObject{
				{
					"id":             "26b1d490-d43f-4679-8dca-03dbe1235a00",
					"created_at":     1631235788,
					"type":           "image_detection",
					"max_cvss_score": 7.5,
					"scan_result":    "fail",
					"registry":       "gcr.io/unique-caldron-775",
					"repository":     "cnx/tigera/es-gateway",
					"image_tag":      "v3.10.0",
					"namespace":      "",
					"cluster_name":   "",
				},
				{
					"id":             "26b1d490-d43f-4679-8dca-03dbe1235a00",
					"created_at":     1631235788,
					"type":           "pod_detection",
					"max_cvss_score": 3.5,
					"scan_result":    "fail",
					"registry":       "gcr.io/unique-caldron-775",
					"repository":     "cnx/tigera/es-gateway",
					"image_tag":      "v3.10.0",
					"namespace":      "tigera-elasticsearch",
					"cluster_name":   "my-cluster-1",
				},
			}

			ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				Expect(r.Method).To(Equal(http.MethodGet))
				u := r.URL
				Expect(u.Path).To(Equal(fmt.Sprintf("/v1/organizations/%s/events", orgID)))
				q := u.Query()
				for k, v := range params {
					Expect(q.Get(k)).To(Equal(v))
				}

				body, err := json.Marshal(resp)
				Expect(err).NotTo(HaveOccurred())
				fmt.Fprint(w, string(body))
			}))
			defer ts.Close()

			os.Setenv("IMAGE_ASSURANCE_ENDPOINT", ts.URL)
			os.Setenv("IMAGE_ASSURANCE_API_TOKEN", "token")
			resp, err := queryVulnerabilityDataset(ts.Client(), params)
			Expect(err).NotTo(HaveOccurred())

			for i, r := range resp {
				Expect(r).To(Equal(resp[i]))
			}
		})

		It("should return error when http response status is not OK", func() {
			ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				http.Error(w, "Not found", http.StatusNotFound)
			}))
			defer ts.Close()

			os.Setenv("IMAGE_ASSURANCE_ENDPOINT", ts.URL)
			_, err := queryVulnerabilityDataset(ts.Client(), VulnerabilityQueryParameterMap{})
			Expect(err).To(HaveOccurred())
		})

		It("should return error when http response body is not a valid JSON", func() {
			ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				fmt.Fprintf(w, "not-a-valid-json-body")
			}))
			defer ts.Close()

			os.Setenv("IMAGE_ASSURANCE_ENDPOINT", ts.URL)
			_, err := queryVulnerabilityDataset(ts.Client(), VulnerabilityQueryParameterMap{})
			Expect(err).To(HaveOccurred())
		})
	})

})
